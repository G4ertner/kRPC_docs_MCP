{"id": "58c9753678ec9fb895a9c4beea258a0d8af0b7a97c75a8eb2ed0dd2bb7ca8c46", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "main", "description": "main function is run when you just execute this file, but NOT when you \nimport it into another file - thus you can choose to call ascent later \nto go to space, or just use the other functions in this file.", "code": "def main():\n    '''\n    main function is run when you just execute this file, but NOT when you \n    import it into another file - thus you can choose to call ascent later \n    to go to space, or just use the other functions in this file.\n    '''\n\n    ##  Setup KRPC and create a launch_params object with the default settings\n    conn = krpc.connect(name='Launch')\n    launch_params = MissionParameters() \n    ascent(conn,launch_params)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.Simple_Launch_Script.MissionParameters", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.ascent"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 437, "lines_of_code": 11, "restricted": false}
{"id": "73611e518e1245502b0de6412c928229da6b9c4ae68e85ada461fadb7884d432", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "ascent", "description": "Ascent Autopilot function.  Goes to space, or dies trying.", "code": "def ascent(conn, launch_params):\n    '''\n    Ascent Autopilot function.  Goes to space, or dies trying.\n    '''\n    #Setup KRPC and PIDs\n    conn = krpc.connect(name='Launch')\n    sc = conn.space_center\n    v = sc.active_vessel\n    telem=v.flight(v.orbit.body.reference_frame)\n    thrust_controller = PID(P=.001, I=0.0001, D=0.01)\n    thrust_controller.ClampI = launch_params.max_q\n    thrust_controller.setpoint(launch_params.max_q) \n    \n\n    #Prepare for Launch\n    v.auto_pilot.engage()\n    v.auto_pilot.target_heading=inc_to_heading(launch_params.inclination)\n    if launch_params.force_roll: \n        v.auto_pilot.target_roll=launch_params.roll\n    v.control.throttle=1.0\n    \n    #Gravity Turn Loop\n    while apoapsis_way_low(v, launch_params.orbit_alt):\n        gravturn(conn, launch_params)\n        autostage(v , launch_params.max_auto_stage)\n        limitq(conn, thrust_controller)\n        telemetry(conn)\n        time.sleep(1.0 / REFRESH_FREQ)        \n    v.control.throttle = 0.0\n    \n    # Fine Tune APA\n    v.auto_pilot.disengage()\n    v.auto_pilot.sas=True\n    time.sleep(.1)\n    v.auto_pilot.sas_mode = v.auto_pilot.sas_mode.prograde\n    v.auto_pilot.wait()\n    boostAPA(conn, launch_params)  #fine tune APA\n\n    # Coast Phase\n    sc.physics_warp_factor = MAX_PHYSICS_WARP\n    while still_in_atmosphere(conn):   \n        if apoapsis_little_low(v , launch_params.orbit_alt):\n            sc.physics_warp_factor = 0\n            boostAPA(conn, launch_params)\n            sc.physics_warp_factor = MAX_PHYSICS_WARP\n        telemetry(conn)  \n        time.sleep(1.0 / REFRESH_FREQ)       \n    \n    # Circularization Burn\n    sc.physics_warp_factor = 0\n    planCirc(conn)\n    telemetry(conn)\n    execute_next_node(conn)\n\n    # Finish Up\n    if launch_params.deploy_solar: v.control.solar_panels=True \n    telemetry(conn)\n    v.auto_pilot.sas_mode= v.auto_pilot.sas_mode.prograde\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.Simple_Launch_Script.apoapsis_little_low", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.apoapsis_way_low", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.autostage", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.boostAPA", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.gravturn", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.inc_to_heading", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.limitq", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.planCirc", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.still_in_atmosphere", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.telemetry"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1886, "lines_of_code": 58, "inputs": ["conn", "launch_params"], "restricted": false}
{"id": "3f37de2f729d5002b9cb8a49305241ae5f410cff8615068033bb7340f8790234", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "autostage", "description": "activate next stage when there is no fuel left in the current stage", "code": "def autostage(vessel, MAX_AUTO_STAGE):\n    '''\n    activate next stage when there is no fuel left in the current stage\n    '''\n    if out_of_stages(vessel, MAX_AUTO_STAGE):   \n        return\n    res = get_resources(vessel)\n    interstage = True   # flag to check if this is a fuel-less stage\n    for fueltype in ALL_FUELS:\n        if out_of_fuel(res, fueltype):\n            next_stage(vessel)\n            return\n        if res.has_resource(fueltype):\n            interstage = False\n    if interstage:\n        next_stage(vessel)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.Simple_Launch_Script.get_resources", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.next_stage", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.out_of_fuel", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.out_of_stages"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 528, "lines_of_code": 16, "inputs": ["vessel", "MAX_AUTO_STAGE"], "restricted": false}
{"id": "48de969f783dd6068b673efd3f9b5f66389a5f74d6a364c84ddee8cb69ffe2a1", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "gravturn", "description": "Execute quadratic gravity turn -  \nbased on Robert Penner's easing equations (EaseOut)", "code": "def gravturn(conn, launch_params):\n    '''\n    Execute quadratic gravity turn -  \n    based on Robert Penner's easing equations (EaseOut)\n    '''\n    vessel = conn.space_center.active_vessel\n    flight = vessel.flight(vessel.orbit.body.non_rotating_reference_frame)\n    progress=flight.mean_altitude/launch_params.grav_turn_finish\n    vessel.auto_pilot.target_pitch= 90-(-90 * progress*(progress-2))\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 400, "lines_of_code": 9, "inputs": ["conn", "launch_params"], "restricted": false}
{"id": "8730b4342b9d63f97c301d926ba2c12303491ac34401170863aed3a2b6050f53", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "boostAPA", "description": "function to increase Apoapsis using low thrust on a \ntight loop with no delay for increased precision.", "code": "def boostAPA(conn, launch_params):\n    '''\n    function to increase Apoapsis using low thrust on a \n    tight loop with no delay for increased precision.\n    '''\n    vessel = conn.space_center.active_vessel\n    flight = vessel.flight(vessel.orbit.body.non_rotating_reference_frame)\n\n    vessel.control.throttle=.2\n    while apoapsis_little_low(vessel, launch_params.orbit_alt):\n        autostage(vessel, launch_params.max_auto_stage)\n        telemetry(conn) \n    vessel.control.throttle=0\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.Simple_Launch_Script.apoapsis_little_low", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.autostage", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.telemetry"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 489, "lines_of_code": 13, "inputs": ["conn", "launch_params"], "restricted": false}
{"id": "67da83161ffaf898ed5e99f492f6baa68389ca04bc0c0188d18fdf10abfe818e", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "planCirc", "description": "Plan a Circularization at Apoapsis.  \nV1 is velocity at apoapsis.  \nV2 is the velocity at apoapsis of a circular orbit.   \nBurn time uses Tsiolkovsky rocket equation.", "code": "def planCirc(conn):\n\n    '''\n    Plan a Circularization at Apoapsis.  \n    V1 is velocity at apoapsis.  \n    V2 is the velocity at apoapsis of a circular orbit.   \n    Burn time uses Tsiolkovsky rocket equation.\n    '''\n    vessel = conn.space_center.active_vessel\n    ut = conn.space_center.ut\n    grav_param = vessel.orbit.body.gravitational_parameter\n    apo = vessel.orbit.apoapsis\n    sma = vessel.orbit.semi_major_axis\n    v1 = math.sqrt(grav_param * ((2.0 / apo) - (1.0 / sma)))\n    v2 = math.sqrt(grav_param * ((2.0 / apo) - (1.0 / apo)))\n    vessel.control.add_node(ut + vessel.orbit.time_to_apoapsis, \n                            prograde=(v2 - v1))\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 660, "lines_of_code": 17, "inputs": ["conn"], "restricted": false}
{"id": "50b15089ee0ce1f4461886daa16a1c1735b07ccc5658e3b344c5edc838e3a3d0", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "inc_to_heading", "description": "Converts desired inclination to a compass heading the autopilot can track\nThis only works for equatorial launches at the moment!   \ninc: inclination in degrees\nreturns: heading in degrees", "code": "def inc_to_heading(inc):\n    '''\n    Converts desired inclination to a compass heading the autopilot can track\n    This only works for equatorial launches at the moment!   \n    inc: inclination in degrees\n    returns: heading in degrees\n    '''\n    if inc > 180 or inc < -180:\n        return 90   #invalid entries get set to 0 inclination\n    if inc >= 0:\n        value = 90 - inc\n    if inc < 0:\n        value = -(inc - 90)\n    if value < 0:\n        value += 360\n    return value\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 481, "lines_of_code": 16, "inputs": ["inc"], "restricted": false}
{"id": "de58f71e862f55bf29facd17cecc379ba52e6b8a7095619d937c78a825eab40c", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "limitq", "description": "limits vessel's throttle to stay under MAX_Q using PID controller", "code": "def limitq(conn, controller):\n    '''\n    limits vessel's throttle to stay under MAX_Q using PID controller\n    '''\n    vessel = conn.space_center.active_vessel\n    flight = vessel.flight(vessel.orbit.body.non_rotating_reference_frame)\n    vessel.control.throttle= controller.update(flight.dynamic_pressure)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 308, "lines_of_code": 7, "inputs": ["conn", "controller"], "restricted": false}
{"id": "772d37321c2ffad07970c1d961017ae24cc8e4fb8eab166fd2c11259e14906f6", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "telemetry", "description": "Show telemetry data\nTODO: split between creating telemetry data (object? dict?)\nand displaying the data. This will make it easier to transition to a\nGUI later on. For this reason, no attempts to fit the lines has been\nmade (yet)", "code": "def telemetry(conn):\n    '''\n    Show telemetry data\n    TODO: split between creating telemetry data (object? dict?)\n    and displaying the data. This will make it easier to transition to a\n    GUI later on. For this reason, no attempts to fit the lines has been\n    made (yet)\n    '''\n    vessel = conn.space_center.active_vessel\n    flight = vessel.flight(vessel.orbit.body.non_rotating_reference_frame)\n    global next_telem_time\n    \n    if time.time() > next_telem_time:\n        display_telemetry(Telemetry(vessel, flight))\n        next_telem_time += TELEM_DELAY\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.Simple_Launch_Script.Telemetry", "Art_Whaleys_KRPC_Demos.Simple_Launch_Script.display_telemetry"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 568, "lines_of_code": 15, "inputs": ["conn"], "restricted": false}
{"id": "f983fc0dfea602909c1708bf5ad371a3dbd322b008d41965469fbb02d2ad9ea4", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "display_telemetry", "description": "Take a Telemetry object t and display it in a pleasing way", "code": "def display_telemetry(t):\n    '''\n    Take a Telemetry object t and display it in a pleasing way\n    '''\n    # define the data to be displayed in as many columns needed\n    col1 = ('Apoapsis:       {apoapsis:8,.0f}',\n            'Time to apo:       {time_to_apo:5,.0f}',\n            'Altitude:         {altitude:6,.0f}',\n            'Orbital velocity:  {velocity:5,.0f}',\n            'Latitude:          {lat:5.1f}',\n            'Dynamic Pressure: {q:6,.0f}')\n    \n    col2 = ('Periapsis:   {periapsis: 8,.0f}',\n            'Time to peri:   {time_to_peri:5,.0f}',\n            'Inclination:      {inclination: 3.0f}\\n',\n            'Vertical speed: {vertical_speed: 5,.0f}',\n            'Longitude:      {lon:5.1f}\\n',\n            'G-force:         {g:4.1f}')\n    # zip the columns together and display them\n    print('-' * 60)\n    for display_line in zip(col1, col2):\n        print('     '.join(display_line).format(**t.__dict__))\n    print('-' * 60)\n    print('\\n')\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 967, "lines_of_code": 24, "inputs": ["t"], "restricted": false}
{"id": "7c9a6aab2237108a5fe0b08ac02fd1e36da6c046b3b934062940da0af4fc1cd2", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "still_in_atmosphere", "description": "# ----------------------------------------------------------------------------\n# Helper functions\n# ----------------------------------------------------------------------------                ", "code": "def still_in_atmosphere(conn):\n    vessel = conn.space_center.active_vessel\n    flight = vessel.flight(vessel.orbit.body.non_rotating_reference_frame)\n    return flight.mean_altitude<vessel.orbit.body.atmosphere_depth\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 218, "lines_of_code": 4, "inputs": ["conn"], "restricted": false}
{"id": "23755b33cf648656792a69fe2f652787925226e9666321eb73dc59966366658d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "apoapsis_way_low", "description": "True if Apoapsis is less than 95% of target apoapsis", "code": "def apoapsis_way_low(vessel, ORBIT_ALT):\n    '''\n    True if Apoapsis is less than 95% of target apoapsis\n    '''\n    return vessel.orbit.apoapsis_altitude<(ORBIT_ALT*.95)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 172, "lines_of_code": 5, "inputs": ["vessel", "ORBIT_ALT"], "restricted": false}
{"id": "ded38233700ab64f1fca380b6ac0c06f3c2b66f9d92f02be877e890d2f4712fd", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "apoapsis_little_low", "description": "True if Apoapsis is less than target apoapsis at all", "code": "def apoapsis_little_low(vessel, ORBIT_ALT):\n    '''\n    True if Apoapsis is less than target apoapsis at all\n    '''\n    return vessel.orbit.apoapsis_altitude<ORBIT_ALT\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 169, "lines_of_code": 5, "inputs": ["vessel", "ORBIT_ALT"], "restricted": false}
{"id": "147cb5391adbe339f817f085628114ecb89c29da9aab10cfccbd1695444d0f64", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "out_of_stages", "description": "True if no more stages left to activate", "code": "def out_of_stages(vessel, MAX_AUTO_STAGE):\n    '''\n    True if no more stages left to activate\n    '''\n    return vessel.control.current_stage <= MAX_AUTO_STAGE\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 161, "lines_of_code": 5, "inputs": ["vessel", "MAX_AUTO_STAGE"], "restricted": false}
{"id": "80e4dcdb1a9384bb21051e95f164f3501ba5c5571dccb8a92ce739426d0ddf19", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "get_resources", "description": "get resources of the vessel in the decouple stage", "code": "def get_resources(vessel):\n    '''\n    get resources of the vessel in the decouple stage\n    '''\n    return vessel.resources_in_decouple_stage(\n        vessel.control.current_stage - 1, \n        cumulative=False)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 213, "lines_of_code": 7, "inputs": ["vessel"], "restricted": false}
{"id": "ad19346322bfa6ec6f77e6c3c0ee981d2d7b12067ba7a9e942ba0f9c7d9039c1", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "out_of_fuel", "description": "return True if there is fuel capacity of the fueltype, but no fuel", "code": "def out_of_fuel(resource, fueltype):\n    '''\n    return True if there is fuel capacity of the fueltype, but no fuel\n    '''\n    return resource.max(fueltype) > 0 and resource.amount(fueltype) == 0\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 197, "lines_of_code": 5, "inputs": ["resource", "fueltype"], "restricted": false}
{"id": "e5ec8a0ba103cd39aaa3161dd802ffd5cefcf73316aac678263cde32f89a06e1", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "next_stage", "description": "activate the next stage", "code": "def next_stage(vessel):\n    '''\n    activate the next stage\n    '''\n    vessel.control.activate_next_stage()\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 109, "lines_of_code": 5, "inputs": ["vessel"], "restricted": false}
{"id": "935b7be88d96392dd9bf66698087904323203b45c576889fdca5e5615a28b906", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "MissionParameters.__init__", "description": "Extracted function MissionParameters.__init__ from Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "code": "    def __init__(self,\n                 max_auto_stage = 0,\n                 orbit_alt = 100000,\n                 grav_turn_finish = 55000,\n                 inclination = 0,\n                 force_roll = True,\n                 roll = 90,\n                 deploy_solar = True,\n                 max_q = 20000):\n        self.max_auto_stage = max_auto_stage\n        self.orbit_alt = orbit_alt\n        self.grav_turn_finish = grav_turn_finish\n        self.inclination = inclination\n        self.force_roll = force_roll \n        self.roll = roll\n        self.deploy_solar = deploy_solar\n        self.max_q = max_q\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 608, "lines_of_code": 17, "inputs": ["self", "max_auto_stage", "orbit_alt", "grav_turn_finish", "inclination", "force_roll", "roll", "deploy_solar", "max_q"], "restricted": false}
{"id": "43195eee7046b87bc596cbabe8c036cd2ac0ef07e5c54bb6160a7fd2426b0d7f", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "Telemetry.__init__", "description": "Extracted function Telemetry.__init__ from Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "code": "    def __init__(self, vessel, flight):\n        self.apoapsis = vessel.orbit.apoapsis_altitude\n        self.periapsis = vessel.orbit.periapsis_altitude\n        self.time_to_apo = vessel.orbit.time_to_apoapsis\n        self.time_to_peri = vessel.orbit.time_to_periapsis\n        self.velocity = vessel.orbit.speed\n        self.inclination = math.radians(vessel.orbit.inclination)\n        self.altitude = flight.mean_altitude\n        self.vertical_speed = flight.vertical_speed\n        self.lat = flight.latitude\n        self.lon = flight.longitude\n        self.q = flight.dynamic_pressure\n        self.g = flight.g_force\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 618, "lines_of_code": 13, "inputs": ["self", "vessel", "flight"], "restricted": false}
{"id": "ce92e7476f5e3b5a75a0957e9dd381551e45b2b1879386165a6814f4863e7049", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "MissionParameters", "description": "All mission parameters are stored in a single object to easily\npass around", "code": "class MissionParameters(object):\n    '''\n    All mission parameters are stored in a single object to easily\n    pass around\n    '''\n    def __init__(self,\n                 max_auto_stage = 0,\n                 orbit_alt = 100000,\n                 grav_turn_finish = 55000,\n                 inclination = 0,\n                 force_roll = True,\n                 roll = 90,\n                 deploy_solar = True,\n                 max_q = 20000):\n        self.max_auto_stage = max_auto_stage\n        self.orbit_alt = orbit_alt\n        self.grav_turn_finish = grav_turn_finish\n        self.inclination = inclination\n        self.force_roll = force_roll \n        self.roll = roll\n        self.deploy_solar = deploy_solar\n        self.max_q = max_q\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 740, "lines_of_code": 22, "restricted": false}
{"id": "40828bc743e562620ebefa2b0b02226cb0ff8b17f5a1d19fbd7056b00302c76e", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "Telemetry", "description": "Extracted class Telemetry from Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "code": "class Telemetry(object):\n    def __init__(self, vessel, flight):\n        self.apoapsis = vessel.orbit.apoapsis_altitude\n        self.periapsis = vessel.orbit.periapsis_altitude\n        self.time_to_apo = vessel.orbit.time_to_apoapsis\n        self.time_to_peri = vessel.orbit.time_to_periapsis\n        self.velocity = vessel.orbit.speed\n        self.inclination = math.radians(vessel.orbit.inclination)\n        self.altitude = flight.mean_altitude\n        self.vertical_speed = flight.vertical_speed\n        self.lat = flight.latitude\n        self.lon = flight.longitude\n        self.q = flight.dynamic_pressure\n        self.g = flight.g_force\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 643, "lines_of_code": 14, "restricted": false}
{"id": "3c4370ce773abbe09ddb9f5314b788ec57366060c9790b927f68e03e0adbf775", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/Simple_Launch_Script.py", "lang": "python", "name": "CONST_BLOCK", "description": "Top-level constants: REFRESH_FREQ, TELEM_DELAY, ALL_FUELS, MAX_PHYSICS_WARP", "code": "REFRESH_FREQ = 2    # refresh rate in hz\nTELEM_DELAY = 5     #number of seconds between telemetry updates\nALL_FUELS = ('LiquidFuel', 'SolidFuel')\nMAX_PHYSICS_WARP = 3 # valid values are 0 (none) through 3 (4x)\n", "categories": ["const"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 210, "lines_of_code": 4, "restricted": false}
{"id": "1a9a5181b86397b3fda5afd5fb64659117c48fdb17c7340ccf183c3450f768a4", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/docking_autopilot.py", "lang": "python", "name": "main", "description": "##############################################################################\n## Main  - only run when this file is explicitly executed\n##############################################################################", "code": "def main():\n    conn = krpc.connect()\n    dock(conn)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.docking_autopilot.dock"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 53, "lines_of_code": 3, "restricted": false}
{"id": "f2bd36a114dd865f18185fdf3cd1654050f5fa5343f45436f6a75ccf1634b97a", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/docking_autopilot.py", "lang": "python", "name": "dock", "description": "##############################################################################\n## dock  - The actually interesting function in this file.   \n## works by lining vessel up parallel, with 10m of separation between\n## docking ports.  When this is confirmed, it moves forward slowly to dock.\n##############################################################################", "code": "def dock(conn, speed_limit = 1.0):\n\n    #Setup KRPC\n    sc = conn.space_center\n    v = sc.active_vessel\n    t = sc.target_docking_port\n    ap = v.auto_pilot\n    rf = v.orbit.body.reference_frame\n    \n    #Setup Auto Pilot\n    ap.reference_frame = rf   \n    ap.target_direction = tuple(x * -1 for x in t.direction(rf))\n    ap.engage()\n\n    #create PIDs\n    upPID = PID(.75,.25,1)   \n    rightPID = PID(.75,.25,1)\n    forwardPID = PID(.75,.2,.5)\n\n    proceed=False  \n    #'proceed' is a flag that signals that we're lined up and ready to dock.\n    # Otherwise the program will try to line up 10m from the docking port.\n \n    #LineUp and then dock  - in the same loop with 'proceed' controlling whether\n    #we're headed for the 10m safe point, or headed forward to dock.\n    while True:\n        offset = getOffsets(v, t)  #grab data and compute setpoints\n        velocity = getVelocities(v, t)\n        if proceedCheck(offset):  #Check whether we're lined up and ready to dock\n            proceed = True\n        setpoints = getSetpoints(offset, proceed, speed_limit)  \n        \n        upPID.setpoint(setpoints.up)  #set PID setpoints\n        rightPID.setpoint(setpoints.right)\n        forwardPID.setpoint(setpoints.forward)\n        \n        v.control.up = -upPID.update(velocity.up)  #steer vessel\n        v.control.right = -rightPID.update(velocity.right)\n        v.control.forward = -forwardPID.update(velocity.forward)\n     \n        time.sleep(.1)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.docking_autopilot.getOffsets", "Art_Whaleys_KRPC_Demos.docking_autopilot.getSetpoints", "Art_Whaleys_KRPC_Demos.docking_autopilot.getVelocities", "Art_Whaleys_KRPC_Demos.docking_autopilot.proceedCheck"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1449, "lines_of_code": 41, "inputs": ["conn", "speed_limit"], "restricted": false}
{"id": "4c92ba2bde09bba753e18ff34c8a4f27e89b163da2d2b3fabfc6ee6266d8ebdf", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/docking_autopilot.py", "lang": "python", "name": "getOffsets", "description": "returns the distance (right, forward, up) between docking ports.", "code": "def getOffsets(v, t):\n    '''\n    returns the distance (right, forward, up) between docking ports.\n    '''\n    return v3._make(t.part.position(v.parts.controlling.reference_frame))\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 181, "lines_of_code": 5, "inputs": ["v", "t"], "restricted": false}
{"id": "052b0fbb66319eb404bcfbef065e6b4975efc5d42649d41663812e6ca7bbc11b", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/docking_autopilot.py", "lang": "python", "name": "getVelocities", "description": "returns the relative velocities (right, forward, up)", "code": "def getVelocities(v, t):\n    '''\n    returns the relative velocities (right, forward, up)\n    '''\n    return v3._make(v.velocity(t.reference_frame))\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 149, "lines_of_code": 5, "inputs": ["v", "t"], "restricted": false}
{"id": "2a2707727a9b471fe645279231ff63b4a3131c0ad484229b1a90eea7ea1032bd", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/docking_autopilot.py", "lang": "python", "name": "getSetpoints", "description": "returns the computed set points -\nset points are actually just the offset distances clamped to the\nspeed_limit variable!   This way we slow down as we get closer to the right\nheading.", "code": "def getSetpoints(offset, proceed, speed_limit):\n    '''\n    returns the computed set points -\n    set points are actually just the offset distances clamped to the\n    speed_limit variable!   This way we slow down as we get closer to the right\n    heading.\n    '''\n    tvup = max(min(offset.up, speed_limit), -speed_limit)\n    tvright = -1 * (max(min(offset.right, speed_limit), -speed_limit))\n    if proceed:\n        tvforward = -.2\n    else:\n        tvforward = max(min((10 - offset.forward), speed_limit), -speed_limit)\n    return v3(tvright, tvforward, tvup)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 562, "lines_of_code": 14, "inputs": ["offset", "proceed", "speed_limit"], "restricted": false}
{"id": "1f4f0379c69545e0be9dacecf19ebbb0696b7288448c3a7a82ad046fd47833bc", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/docking_autopilot.py", "lang": "python", "name": "proceedCheck", "description": "returns true if we're lined up and ready to move forward to dock.", "code": "def proceedCheck(offset):\n    '''\n    returns true if we're lined up and ready to move forward to dock.\n    '''\n    return (offset.up < .1 and\n            offset.right < .1 and\n            math.fabs(10 - offset.forward)<.1)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 224, "lines_of_code": 7, "inputs": ["offset"], "restricted": false}
{"id": "3767d6b6d25cf9ead51d961d201bc1ecc4ac34f84852d5ec73eebd5ecaba53b3", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/node_executor.py", "lang": "python", "name": "main", "description": "Extracted function main from Art_Whaleys_KRPC_Demos/node_executor.py", "code": "def main():\n    conn = krpc.connect()\n#Demo of all three major functions in this file - uncomment the one you want!\n    execute_btn(conn)   #Creates an on screen button to execute the next node\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.node_executor.execute_btn"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 194, "lines_of_code": 4, "restricted": false}
{"id": "4f55c3994ee5642c57b4d1af7d391dcd9dab29a682559c5572f8baa91546bdef", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/node_executor.py", "lang": "python", "name": "execute_next_node", "description": "This is the actually interesting function in this script!\n\nExecutes the Next Maneuver Node for the vessel provided.\nIf you just open and run this file, it will execute a node and exit.\nYou can also include this file into your own script with the line\n\nfrom node_executor import execute_next_node\n\nat the top of your script, and then anytime you want to execute a node\nyou just have to call (execute_next_node(conn) passing it the active \nKRPC connection as a parameter.\n\nI'm also demonstrating two different ways to point the vessel with the\nautopilot.  One relies on the vessel having SAS Node holding capabilty,\nthe other uses the KRPC built-in auto-pilot.   The one built into\nKRPC can require some tuning depending on your vessel...  but works on\nany vessel regardless of pilot skill/probe core choice!   ", "code": "def execute_next_node(conn):\n    '''\n    This is the actually interesting function in this script!\n\n    Executes the Next Maneuver Node for the vessel provided.\n    If you just open and run this file, it will execute a node and exit.\n    You can also include this file into your own script with the line\n\n    from node_executor import execute_next_node\n\n    at the top of your script, and then anytime you want to execute a node\n    you just have to call (execute_next_node(conn) passing it the active \n    KRPC connection as a parameter.\n\n    I'm also demonstrating two different ways to point the vessel with the\n    autopilot.  One relies on the vessel having SAS Node holding capabilty,\n    the other uses the KRPC built-in auto-pilot.   The one built into\n    KRPC can require some tuning depending on your vessel...  but works on\n    any vessel regardless of pilot skill/probe core choice!   \n    '''\n    space_center = conn.space_center\n    vessel = space_center.active_vessel\n    ap=vessel.auto_pilot\n\n# Grab the next node if it exists\n    try:\n        node = vessel.control.nodes[0]\n    except Exception:\n        return    #Fail silently but gracefully if there was no node to execute\n    \n    \n# Orient vessel to the node\n################## One Way To Orient Vessel!##############\n    rf = vessel.orbit.body.reference_frame\n    ap.reference_frame=rf\n    ap.engage()\n    ap.target_direction = node.remaining_burn_vector(rf)\n    ap.wait()\n\n##################  Another Way To Orient Vessel!########\n    #ap.sas = True\n    #time.sleep(.1)\n    #ap.sas_mode = vessel.auto_pilot.sas_mode.maneuver\n    #ap.wait()\n        \n# Calculate the length and start of burn\n    m = vessel.mass\n    isp = vessel.specific_impulse\n    dv = node.delta_v\n    F = vessel.available_thrust\n    G = 9.81\n    burn_time = (m - (m / math.exp(dv / (isp * G)))) / (F / (isp * G))\n\n# Warp until burn\n    space_center.warp_to(node.ut - (burn_time / 2.0) - 5.0)\n    while node.time_to > (burn_time / 2.0):\n        pass\n    ap.wait()\n    \n# Actually Burn\n    vessel.control.throttle = thrust_controller(vessel, node.remaining_delta_v)  \n    while node.remaining_delta_v > .1:\n        ap.target_direction=node.remaining_burn_vector(rf)#comment out this line\n        #if using the vessel sas method to orient vessel\n        vessel.control.throttle = thrust_controller(vessel, node.remaining_delta_v)  \n\n# Finish Up\n    ap.disengage()\n    vessel.control.throttle = 0.0\n    node.remove()\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.node_executor.thrust_controller"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 2457, "lines_of_code": 70, "inputs": ["conn"], "restricted": false}
{"id": "6f25fa83c2ecabb9d3b99622c0ede55da50f013b8222574feb22fff6bae970f1", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/node_executor.py", "lang": "python", "name": "execute_all_nodes", "description": "as the name implies - this function executes ALL maneuver nodes currently\nplanned for the vessel in series.", "code": "def execute_all_nodes(conn):\n\n    '''\n    as the name implies - this function executes ALL maneuver nodes currently\n    planned for the vessel in series.\n    '''\n    space_center = conn.space_center\n    vessel = space_center.active_vessel\n    while vessel.control.nodes:\n        execute_next_node(conn)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.node_executor.execute_next_node"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 303, "lines_of_code": 10, "inputs": ["conn"], "restricted": false}
{"id": "9ae30c1120f005f802ce8135851d57461fc7e75da2d01d6204dda80f8e73ac3a", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/node_executor.py", "lang": "python", "name": "thrust_controller", "description": "This function is somewhat arbitrary in it's working - there's not a 'rule'\nthat I've found on how to feather out throttle towards the end of a burn\nbut given that the chances of overshooting go up with TWR (since we fly\nin a world with discrete physics frames!) it makes sense to relate the\nthrottle to the TWR for this purpose.", "code": "def thrust_controller(vessel, deltaV):\n    '''\n    This function is somewhat arbitrary in it's working - there's not a 'rule'\n    that I've found on how to feather out throttle towards the end of a burn\n    but given that the chances of overshooting go up with TWR (since we fly\n    in a world with discrete physics frames!) it makes sense to relate the\n    throttle to the TWR for this purpose.\n    '''\n    TWR= vessel.max_thrust/vessel.mass\n    if deltaV < TWR / 3:\n        return .05\n    elif deltaV < TWR / 2:\n        return .1\n    elif deltaV < TWR:\n        return .25\n    else:\n        return 1.0\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 603, "lines_of_code": 17, "inputs": ["vessel", "deltaV"], "restricted": false}
{"id": "21189ef2e0f4a623920369bd1829d0557bd6bb081b3e6d1d95f44dd4f0455d67", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/node_executor.py", "lang": "python", "name": "execute_btn", "description": "Demo of how to use the UI Service to turn this node execution function into\na handy little utility for doing something useful.  Just puts a button on\nthe screen.  When you click it - it executes the next maneuver node.", "code": "def execute_btn(conn):\n    '''\n    Demo of how to use the UI Service to turn this node execution function into\n    a handy little utility for doing something useful.  Just puts a button on\n    the screen.  When you click it - it executes the next maneuver node.\n    '''\n    space_center = conn.space_center\n    vessel = space_center.active_vessel\n    canvas = conn.ui.stock_canvas  # draw on the main screen\n    panel = canvas.add_panel()  #container for our button\n    rect = panel.rect_transform  #rect to define panel\n    rect.size = (100, 30)  #panel size\n    rect.position = (110-(canvas.rect_transform.size[0]/2), 0)  #left middle\n    button = panel.add_button(\"Execute Node\")  #add the button\n    button.rect_transform.position = (0, 20)   #locate the button\n    button_clicked = conn.add_stream(getattr, button, 'clicked')  #watch button\n    while True:   #if button clicked, execute the next node \n        if button_clicked():\n            execute_next_node(conn)\n            button.clicked = False\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.node_executor.execute_next_node"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1007, "lines_of_code": 20, "inputs": ["conn"], "restricted": false}
{"id": "b0f5221d98626622bb2e142a5dddc0d390731f82262342e066bfc15ee730f26e", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/pid.py", "lang": "python", "name": "main", "description": "##############################################################################\n## Main  -- only run when we execute this file directly.\n##          ignored when we import the PID into other files!\n##############################################################################", "code": "def main():\n    #Setup KRPC\n    conn = krpc.connect()\n    sc = conn.space_center\n    v = sc.active_vessel\n    telem = v.flight(v.orbit.body.reference_frame)\n\n#  Create PID controller.\n    p = PID(P=.25, I=0.025, D=0.0025)\n    p.ClampI = 20\n    p.setpoint(Target_Velocity) \n\n#  starting with locked SAS and throttle at full\n    v.control.sas = True\n    v.control.throttle = 1.0\n    while not v.thrust:  # stage if we just launched a new rocket\n        v.control.activate_next_stage()\n\n#  Loop Forever, or until you get the point of this example and stop it.\n    while True:\n        the_pids_output=p.update(telem.vertical_speed)\n        v.control.throttle=the_pids_output\n        print('Vertical V:{:03.2f}   PID returns:{:03.2f}   Throttle:{:03.2f}'\n              .format(telem.vertical_speed,\n                      the_pids_output,\n                      v.control.throttle))\n        time.sleep(.1)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.pid.PID"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 899, "lines_of_code": 27, "restricted": false}
{"id": "ccb0b7469eaddf78b672b7e81c88f92a72f7ca10f30409cb8a708f4ee9bb38a8", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/pid.py", "lang": "python", "name": "PID.__init__", "description": "Extracted function PID.__init__ from Art_Whaleys_KRPC_Demos/pid.py", "code": "    def __init__(self, P=1.0, I=0.1, D=0.01):   \n        self.Kp = P    #P controls reaction to the instantaneous error\n        self.Ki = I    #I controls reaction to the history of error\n        self.Kd = D    #D prevents overshoot by considering rate of change\n        self.P = 0.0\n        self.I = 0.0\n        self.D = 0.0\n        self.SetPoint = 0.0  #Target value for controller\n        self.ClampI = 1.0  #clamps i_term to prevent 'windup.'\n        self.LastTime = time.time()\n        self.LastMeasure = 0.0\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 514, "lines_of_code": 11, "inputs": ["self", "P", "I", "D"], "restricted": false}
{"id": "a6b540cf3a293a0affecdd069f2e74dec4b6647c6a13c48af4f64636d5d77e4a", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/pid.py", "lang": "python", "name": "PID.update", "description": "Extracted function PID.update from Art_Whaleys_KRPC_Demos/pid.py", "code": "    def update(self,measure):\n        now = time.time()\n        change_in_time = now - self.LastTime\n        if not change_in_time:\n            change_in_time = 1.0   #avoid potential divide by zero if PID just created.\n       \n        error = self.SetPoint - measure\n        self.P = error\n        self.I += error\n        self.I = self.clamp_i(self.I)   # clamp to prevent windup lag\n        self.D = (measure - self.LastMeasure) / (change_in_time)\n\n        self.LastMeasure = measure  # store data for next update\n        self.lastTime = now\n\n        return (self.Kp * self.P) + (self.Ki * self.I) - (self.Kd * self.D)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 621, "lines_of_code": 16, "inputs": ["self", "measure"], "restricted": false}
{"id": "fae502a4b42090d76fc1b6cae34c9e241663cfe9aeb7fb324814e0bc2a4dde4d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/pid.py", "lang": "python", "name": "PID.clamp_i", "description": "Extracted function PID.clamp_i from Art_Whaleys_KRPC_Demos/pid.py", "code": "    def clamp_i(self, i):   \n        if i > self.ClampI:\n            return self.ClampI\n        elif i < -self.ClampI:\n            return -self.ClampI\n        else:\n            return i\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 186, "lines_of_code": 7, "inputs": ["self", "i"], "restricted": false}
{"id": "79652dfbf6555ac7781824beb262bb174216c10c8f7383820bbf74643e9e2cc6", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/pid.py", "lang": "python", "name": "PID.setpoint", "description": "Extracted function PID.setpoint from Art_Whaleys_KRPC_Demos/pid.py", "code": "    def setpoint(self, value):\n        self.SetPoint = value\n        self.I = 0.0\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 82, "lines_of_code": 3, "inputs": ["self", "value"], "restricted": false}
{"id": "4a2f6d6200b1507e8b06647076b42bcc6b7d9bf1d6598ded543ac23326a61e7d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/pid.py", "lang": "python", "name": "PID", "description": "Generic PID Controller Class\nBased on the PID recipe at :\n\nhttp://code.activestate.com/recipes/577231-discrete-pid-controller/\n\nand the code and discussions in the blog at:\n\nhttp://brettbeauregard.com/blog/2011/04/\nimproving-the-beginners-pid-introduction/\n\nAn instance is created with the format\nyour_pid=PID(P=.0001, I=0.00001, D=0.000001)\n\nFinding the right values for those three gain numbers is called 'tuning' and\nthat's beyond the scope of this doc string!  \n\nUse your_pid.setpoint(X) to set the target output value of the controller. \n\nRegularly call your_pid.update(Y), passing it the input data that the\ncontroller should respond to.\noutput_data = your_pid.update(input_data)", "code": "class PID(object):\n    '''\n    Generic PID Controller Class\n    Based on the PID recipe at :\n\n    http://code.activestate.com/recipes/577231-discrete-pid-controller/\n\n    and the code and discussions in the blog at:\n\n    http://brettbeauregard.com/blog/2011/04/\n    improving-the-beginners-pid-introduction/\n\n    An instance is created with the format\n    your_pid=PID(P=.0001, I=0.00001, D=0.000001)\n\n    Finding the right values for those three gain numbers is called 'tuning' and\n    that's beyond the scope of this doc string!  \n\n    Use your_pid.setpoint(X) to set the target output value of the controller. \n    \n    Regularly call your_pid.update(Y), passing it the input data that the\n    controller should respond to.\n    output_data = your_pid.update(input_data)\n\n    '''  \n    \n    def __init__(self, P=1.0, I=0.1, D=0.01):   \n        self.Kp = P    #P controls reaction to the instantaneous error\n        self.Ki = I    #I controls reaction to the history of error\n        self.Kd = D    #D prevents overshoot by considering rate of change\n        self.P = 0.0\n        self.I = 0.0\n        self.D = 0.0\n        self.SetPoint = 0.0  #Target value for controller\n        self.ClampI = 1.0  #clamps i_term to prevent 'windup.'\n        self.LastTime = time.time()\n        self.LastMeasure = 0.0\n                \n    def update(self,measure):\n        now = time.time()\n        change_in_time = now - self.LastTime\n        if not change_in_time:\n            change_in_time = 1.0   #avoid potential divide by zero if PID just created.\n       \n        error = self.SetPoint - measure\n        self.P = error\n        self.I += error\n        self.I = self.clamp_i(self.I)   # clamp to prevent windup lag\n        self.D = (measure - self.LastMeasure) / (change_in_time)\n\n        self.LastMeasure = measure  # store data for next update\n        self.lastTime = now\n\n        return (self.Kp * self.P) + (self.Ki * self.I) - (self.Kd * self.D)\n\n    def clamp_i(self, i):   \n        if i > self.ClampI:\n            return self.ClampI\n        elif i < -self.ClampI:\n            return -self.ClampI\n        else:\n            return i\n        \n    def setpoint(self, value):\n        self.SetPoint = value\n        self.I = 0.0\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 2219, "lines_of_code": 66, "restricted": false}
{"id": "96439287003103d44b5e86a181fd1063d053851ac478eea731434c6aaabefb75", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "main", "description": "###############################################################################\n##                      Main Function\n##    Demonstrates Rendezvous with selected target vessel\n##    This function is not called when file is imported into YOUR scripts.\n###############################################################################", "code": "def main():\n    conn=krpc.connect()\n    sc = conn.space_center\n    v = conn.space_center.active_vessel\n    t = conn.space_center.target_vessel\n\n    match_planes(conn)\n    hohmann(conn)\n    circularize_at_intercept(conn)\n    get_closer(conn)\n    print (\"Rendezvous Complete.\")\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.circularize_at_intercept", "Art_Whaleys_KRPC_Demos.rendezvous.get_closer", "Art_Whaleys_KRPC_Demos.rendezvous.hohmann", "Art_Whaleys_KRPC_Demos.rendezvous.match_planes"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 276, "lines_of_code": 11, "restricted": false}
{"id": "b614a1dc830af1025648729991ef5233641ff609081dc89faa0dae54f68e6458", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "match_planes", "description": "###############################################################################\n##                      Automated Rendezvous Functions\n##    High Level Functions that perform each phase of a rendezvous\n###############################################################################", "code": "def match_planes(conn):\n    print(\"Computing Plane Change Maneuver if Necessary...\")\n    sc = conn.space_center\n    v = sc.active_vessel\n    t = sc.target_vessel\n    ascending = False\n    time = sc.ut\n    if v.orbit.relative_inclination(t) < 0.004363323129985824:  #.25 degree\n        print(\"Planes within .25 degree.  Continuing with program...\")\n        return\n\n    #figure out if AN or DN is soonest.   Since Script assumes circular orbits\n    #it doesn't worry about which is highest (cheapest burn).\n    ut_an = v.orbit.ut_at_true_anomaly(v.orbit.true_anomaly_an(t))\n    ut_dn = v.orbit.ut_at_true_anomaly(v.orbit.true_anomaly_dn(t))\n    if ut_an < ut_dn:\n        ascending = True\n        time = ut_an\n    else: \n        ascending = False\n        time = ut_dn\n\n    #calculate plane change burn\n    sp = v.orbit.orbital_speed_at(time)\n    inc = v.orbit.relative_inclination(t)\n    normal = sp * math.sin(inc)\n    prograde = sp * math.cos(inc) - sp\n    if ascending:\n        normal *= -1  #antinormal at ascending node\n    \n    node = v.control.add_node(time, normal=normal, prograde=prograde)\n    print(\"Executing Plane Change of {} m/s...\".format(node.delta_v))\n    execute_next_node(conn)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1195, "lines_of_code": 33, "inputs": ["conn"], "restricted": false}
{"id": "cdd2b5514489cc018eced76cd3be7230757f695cfb452d63e5c076fbcfff170e", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "hohmann", "description": "Extracted function hohmann from Art_Whaleys_KRPC_Demos/rendezvous.py", "code": "def hohmann(conn):\n    print (\"Plotting Hohmann Transfer Maneuver...\")\n    sc = conn.space_center\n    v = sc.active_vessel\n    t = sc.target_vessel\n    time = sc.ut\n    phase_angle = get_phase_angle(v, t)\n    transfer_time = time_transfer(v, t, time, phase_angle)\n    node = hohmann_transfer(v, t, transfer_time)\n    print (\"Executing transfer injection burn {} m/s...\".format(node.delta_v))\n    execute_next_node(conn)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.get_phase_angle", "Art_Whaleys_KRPC_Demos.rendezvous.hohmann_transfer", "Art_Whaleys_KRPC_Demos.rendezvous.time_transfer"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 420, "lines_of_code": 11, "inputs": ["conn"], "restricted": false}
{"id": "2027c21185d169d63bd5e01e3e2f0a960b26f5c47505dcd418ff96c7a829eafd", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "circularize_at_intercept", "description": "Extracted function circularize_at_intercept from Art_Whaleys_KRPC_Demos/rendezvous.py", "code": "def circularize_at_intercept(conn):\n    print (\"Plotting dV2 Burn to Circularize...\")\n    v = conn.space_center.active_vessel\n    time = conn.space_center.ut\n    node = circularize_at_apoapsis(v, time)\n    print(\"Executing circularization burn of {} m/s...\".format(node.delta_v))\n    execute_next_node(conn)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.circularize_at_apoapsis"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 308, "lines_of_code": 7, "inputs": ["conn"], "restricted": false}
{"id": "08470ab90ae93840a24b4f1e8c934e8d2d2268d96d5e2148f4cb87c793794055", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "get_closer", "description": "Extracted function get_closer from Art_Whaleys_KRPC_Demos/rendezvous.py", "code": "def get_closer(conn):\n    sc = conn.space_center\n    v = sc.active_vessel\n    t = sc.target_vessel\n    ap = v.auto_pilot\n    rf = v.orbit.body.non_rotating_reference_frame\n    ap.reference_frame=rf\n\n    matchv(sc, v, t)\n    while dist(v, t) > 200:\n        close_dist(sc, v, t)\n        \n        matchv(sc, v, t)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.close_dist", "Art_Whaleys_KRPC_Demos.rendezvous.dist", "Art_Whaleys_KRPC_Demos.rendezvous.matchv"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 311, "lines_of_code": 13, "inputs": ["conn"], "restricted": false}
{"id": "518e752afa1bb6ae0489ea1d073549ff95ca2206f44f8e58541a1e13213f3a72", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "get_phase_angle", "description": "returns the relative phase angle for a hohmann transfer", "code": "def get_phase_angle(vessel, target):\n    '''\n    returns the relative phase angle for a hohmann transfer\n    '''\n    vo=vessel.orbit\n    to=target.orbit\n    h=(vo.semi_major_axis+to.semi_major_axis)/2   # SMA of transfer orbit\n    #calculate the percentage of the target orbit that goes by during the half period of transfer orbit\n    p = 1/(2*math.sqrt(math.pow(to.semi_major_axis,3)/math.pow(h,3)))\n    # convert that to an angle in radians\n    a =  (2 * math.pi) - ((2* math.pi) *p)\n    print(\"Transfer Phase Angle is {}.\".format(a))\n    return a\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 550, "lines_of_code": 13, "inputs": ["vessel", "target"], "restricted": false}
{"id": "da30db614aee2baf0dfa627a2fb85e398ada1512a05b3f44fdf370ec0c25c588", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "orbital_progress", "description": "returns the orbital progress in radians, referenced to the planet's origin\nof longitude.", "code": "def orbital_progress(vessel, ut):\n    '''\n    returns the orbital progress in radians, referenced to the planet's origin\n    of longitude.\n    '''\n    lan = vessel.orbit.longitude_of_ascending_node\n    arg_p = vessel.orbit.argument_of_periapsis\n    ma_ut = vessel.orbit.mean_anomaly_at_ut(ut)\n    return clamp_2pi(lan + arg_p + ma_ut)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.clamp_2pi"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 335, "lines_of_code": 9, "inputs": ["vessel", "ut"], "restricted": false}
{"id": "712cdc11d58ce8a10d6a36db5a5c468c647372cc801dc6cc55db10dcc278f020", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "time_transfer", "description": "Performs an iterative search for the next time vessel and target\nhave the given relative phase_angle after ut", "code": "def time_transfer(vessel, target, ut, phase_angle):\n    '''\n    Performs an iterative search for the next time vessel and target\n    have the given relative phase_angle after ut\n    '''\n    print(\"Doing Coarse Search for Transfer Time...\")\n    #coarse unbound search\n    while True:        \n        v_pos = orbital_progress(vessel, ut)\n        t_pos =  orbital_progress(target, ut)\n        angle_error = math.fabs(t_pos - (v_pos - math.pi) - phase_angle)\n        if  angle_error < .01:\n            break\n        ut += 10\n    ut -= 10\n    #fine unbound search\n    print(\"Doing Fine Search for Transfer Time...\")\n    while True:        \n        v_pos = orbital_progress(vessel, ut)\n        t_pos =  orbital_progress(target, ut)\n        angle_error = math.fabs(t_pos - (v_pos - math.pi) - phase_angle)\n        if  angle_error < .001:\n            break\n        ut += 1\n    return ut\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.orbital_progress"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 879, "lines_of_code": 25, "inputs": ["vessel", "target", "ut", "phase_angle"], "restricted": false}
{"id": "6b405dfe74ab551e328863bce8cf997249ce04bf92c6a7c2fae92a38130699bd", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "hohmann_transfer", "description": "Create a maneuver node for a hohmann transfer from vessel orbit to target\norbit at the given time", "code": "def hohmann_transfer(vessel, target, time):\n    '''\n    Create a maneuver node for a hohmann transfer from vessel orbit to target\n    orbit at the given time\n    '''\n    body = vessel.orbit.body\n    GM = body.gravitational_parameter\n    r1  = vessel.orbit.radius_at(time)\n    SMA_i = vessel.orbit.semi_major_axis\n    SMA_t = (vessel.orbit.apoapsis + target.orbit.apoapsis) / 2\n    v1 = math.sqrt(GM * ((2/r1) - (1 / SMA_i)))\n    v2 = math.sqrt(GM * ((2/r1) - (1 / (SMA_t))))\n    dv = v2 - v1\n    return vessel.control.add_node(time, prograde = dv)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 548, "lines_of_code": 14, "inputs": ["vessel", "target", "time"], "restricted": false}
{"id": "9b20c82b9577f8bc8e795a6102f2a5b6cc6f1b6c995bb2709160b7a9f7b43dcf", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "circularize_at_apoapsis", "description": "Create a maneuver node to circularize orbit at given time", "code": "def circularize_at_apoapsis(vessel, ut):\n    '''\n    Create a maneuver node to circularize orbit at given time\n    '''\n    body = vessel.orbit.body\n    GM = body.gravitational_parameter\n    apo  = vessel.orbit.apoapsis\n    SMA = vessel.orbit.semi_major_axis\n    v1 = math.sqrt(GM * ((2 / apo) - (1 / SMA)))\n    v2 = math.sqrt(GM * ((2 / apo) - (1 / (apo))))\n    dv = v2 - v1\n    time = vessel.orbit.time_to_apoapsis + ut\n    return vessel.control.add_node(time, prograde = dv)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 477, "lines_of_code": 13, "inputs": ["vessel", "ut"], "restricted": false}
{"id": "f9bd47103c069ef4b1986eff2ae7c07ee2ecf6d0043e568b3d9ba7cd9341eea6", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "matchv", "description": "function to match active vessel's velocity to target's at the\npoint of closest approach", "code": "def matchv(sc, v, t):\n    '''\n    function to match active vessel's velocity to target's at the\n    point of closest approach\n    '''\n    print (\"Matching Velocites...\")\n\n    # Calculate the length and start of burn\n    m = v.mass\n    isp = v.specific_impulse\n    dv = speed(v, t)\n    F = v.available_thrust\n    G = 9.81\n    burn_time = (m - (m / math.exp(dv / (isp * G)))) / (F / (isp * G))\n\n    ## Orient vessel to negative target relative velocity\n    ap = v.auto_pilot\n    ap.engage()\n    ap.target_direction = target_vminus(v,t)\n    ap.wait()\n\n    #wait for the time to burn\n    burn_start = v.orbit.time_of_closest_approach(t) - (burn_time/1.9)\n    sc.warp_to(burn_start - 10)\n    while sc.ut < burn_start:\n        ap.target_direction = target_vminus(v,t)\n        time.sleep(.5)\n    #burn\n    while speed(v, t) > .1:\n        ap.target_direction = target_vminus(v,t)\n        v.control.throttle = speed(v, t) / 20.0\n        \n    #restore user control    \n    v.control.throttle = 0.0\n    ap.disengage()\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.speed", "Art_Whaleys_KRPC_Demos.rendezvous.target_vminus"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1007, "lines_of_code": 35, "inputs": ["sc", "v", "t"], "restricted": false}
{"id": "8f2744f77aa79d315cdcabc97622bfe55659baddcbcc19987897503dc385d2d4", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "close_dist", "description": "Function to close distance between active and target vessels.\nSets approach speed to 1/200 of separation at time of burn.", "code": "def close_dist(sc, v, t):\n    '''\n    Function to close distance between active and target vessels.\n    Sets approach speed to 1/200 of separation at time of burn.\n    '''\n    print (\"Closing Distance...\")\n\n    # orient vessel to target\n    ap = v.auto_pilot\n    ap.engage()\n    time.sleep(.1)\n    ap.target_direction = target(v, t)\n    time.sleep(.1)\n    ap.wait()\n\n    #calculate and burn\n    targetspeed = dist(v,t) / 200.0\n    while targetspeed - speed(v, t) > .1:\n        ap.target_direction = target(v,t)\n        v.control.throttle = (targetspeed - speed(v, t)) / 20.0\n\n    #restore user control\n    v.control.throttle = 0.0\n    ap.disengage()\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.dist", "Art_Whaleys_KRPC_Demos.rendezvous.speed", "Art_Whaleys_KRPC_Demos.rendezvous.target"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 650, "lines_of_code": 24, "inputs": ["sc", "v", "t"], "restricted": false}
{"id": "0f9d1553ff3acb3f9ac4ebf7913262b4704aa568690699969a8dcfc292c65433", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "clamp_2pi", "description": "clamp radians to a single revolution", "code": "def clamp_2pi(x):\n    '''\n    clamp radians to a single revolution\n    '''\n    while x > (2 * math.pi):\n        x -= (2 * math.pi)\n    return x\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 144, "lines_of_code": 7, "inputs": ["x"], "restricted": false}
{"id": "a7d813d56c93bb91440127fb22b5bd3a6467e4fb41953a361622e9e00085c6b0", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "v3minus", "description": "vector subtraction", "code": "def v3minus(v,t):\n    '''\n    vector subtraction\n    '''\n    a = v[0]-t[0]\n    b = v[1]-t[1]\n    c = v[2]-t[2]\n    return (a,b,c)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 130, "lines_of_code": 8, "inputs": ["v", "t"], "restricted": false}
{"id": "82c9014604b9f70124a5f2ab9a8c94372953edfee9b272c614a12e180a0adde9", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "target", "description": "returns vector to point at target\nin vessel.orbit.body.non_rotating_reference_frame", "code": "def target(v,t):\n    '''\n    returns vector to point at target\n    in vessel.orbit.body.non_rotating_reference_frame\n    '''\n    rf = v.orbit.body.non_rotating_reference_frame\n    return v3minus(t.position(rf), v.position(rf))\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.v3minus"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 227, "lines_of_code": 7, "inputs": ["v", "t"], "restricted": false}
{"id": "1c6103b5aea1da656a9b5f81881e424b4806a257a73d1cd38b3908380d54f035", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "anti_target", "description": "returns vector to point away from target\nin vessel.orbit.body.non_rotating_reference_frame", "code": "def anti_target(v,t):\n    '''\n    returns vector to point away from target\n    in vessel.orbit.body.non_rotating_reference_frame\n    '''\n    rf = v.orbit.body.non_rotating_reference_frame\n    return v3minus(v.position(rf), t.position(rf))\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.v3minus"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 239, "lines_of_code": 7, "inputs": ["v", "t"], "restricted": false}
{"id": "e831913edff2301d6b0dc564d171d2e3062be6568ab5b65e1d1af96d60b99338", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "target_vplus", "description": "returns vector to point at + target velocity\nin vessel.orbit.body.non_rotating_reference_frame", "code": "def target_vplus(v,t):\n    '''\n    returns vector to point at + target velocity\n    in vessel.orbit.body.non_rotating_reference_frame\n    '''\n    rf = v.orbit.body.non_rotating_reference_frame\n    return v3minus(v.velocity(rf), t.velocity(rf))\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.v3minus"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 244, "lines_of_code": 7, "inputs": ["v", "t"], "restricted": false}
{"id": "a95d3e746cff95986f7ea3c6d03a4e9620519754468cd04ccfe521a2acfabcc8", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "target_vminus", "description": "returns vector to point at  - target velocity\nin vessel.orbit.body.non_rotating_reference_frame", "code": "def target_vminus(v,t):\n    '''\n    returns vector to point at  - target velocity\n    in vessel.orbit.body.non_rotating_reference_frame\n    '''\n    rf = v.orbit.body.non_rotating_reference_frame\n    return v3minus(t.velocity(rf), v.velocity(rf))\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.v3minus"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 246, "lines_of_code": 7, "inputs": ["v", "t"], "restricted": false}
{"id": "b2b729384eda0f71cd1bcab7815fa62e34641b92dc0197ea85e7c57f3ea1e687", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "dist", "description": "returns distance (magnitude) between two\npositions", "code": "def dist(v,t):\n    '''\n    returns distance (magnitude) between two\n    positions\n    '''\n    rf = v.orbit.body.non_rotating_reference_frame\n    vec = v3minus(v.position(rf), t.position(rf))\n    a = vec[0] * vec[0]\n    b = vec[1] * vec[1]\n    c = vec[2] * vec[2]\n    return math.sqrt(a+b+c)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.v3minus"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 291, "lines_of_code": 11, "inputs": ["v", "t"], "restricted": false}
{"id": "987cf2507631d0feff74c3751dcb489e61cbc586fd9268bc3626d1fa4e0f83de", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rendezvous.py", "lang": "python", "name": "speed", "description": "returns speed (magnitude) between two\nvelocities", "code": "def speed(v,t):\n    '''\n    returns speed (magnitude) between two\n    velocities\n    '''\n    rf = v.orbit.body.non_rotating_reference_frame\n    vec = v3minus(v.velocity(rf), t.velocity(rf))\n    a = vec[0] * vec[0]\n    b = vec[1] * vec[1]\n    c = vec[2] * vec[2]\n    return math.sqrt(a+b+c)\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rendezvous.v3minus"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 290, "lines_of_code": 11, "inputs": ["v", "t"], "restricted": false}
{"id": "a05f6bfe83af1a8d28a2720cb0f86c2901baee20817e75a0a8629b7a2232d3f0", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "main", "description": "##############################################################################\n##  Main function -  this exists to demonstrate the use of the library.  If \n##  you import this library into your own script, main doesn't get called.\n##############################################################################", "code": "def main():  \n    conn = krpc.connect()\n\n    #Create a waypoint to drive to\n    wp1 = conn.space_center.waypoint_manager.add_waypoint(\n        0.05,-75.0, conn.space_center.active_vessel.orbit.body,\"Waypoint1\")\n\n    #call the rover autopilot\n    rover_go(conn, wp1)\n\n    #remove the waypoint when the function returns\n    wp1.remove()\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rover.rover_go"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 335, "lines_of_code": 12, "restricted": false}
{"id": "9fe01a8e9af862a8e5cfabcfba6ecc7b6d0b19cdd68dfac00ba85a03d262d428", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "rover_go", "description": "Function to drive a rover to the specified waypoint.  Must be called with\nan active KRPC connection and a valid waypoint.   Attempts to bring rover\nto a complete stop and quicksave a file called \"rover_ap\" at a regular \ninterval.  Defaults to 5 minutes.   This and rover speed can be specified\nas optional arguments.  A savetime of 0 turns this feature off.", "code": "def rover_go(conn, waypoint, speed = 10.0, savetime = 300 ):\n    '''\n    Function to drive a rover to the specified waypoint.  Must be called with\n    an active KRPC connection and a valid waypoint.   Attempts to bring rover\n    to a complete stop and quicksave a file called \"rover_ap\" at a regular \n    interval.  Defaults to 5 minutes.   This and rover speed can be specified\n    as optional arguments.  A savetime of 0 turns this feature off.\n    '''\n\n    ## grab hold of the krpc functions we'll need to drive the rover\n    v=conn.space_center.active_vessel  \n    ground_telem=v.flight(v.orbit.body.reference_frame)\n    surf_telem=v.flight(v.surface_reference_frame)\n    target=latlon(waypoint.latitude, waypoint.longitude)\n    \n    autosave.lastsave = time.time()\n    partslist = v.parts.all\n    there_yet = False;\n\n    ## Setup the PID controllers for steering and throttle.   The steering \n    ## setpoint is locked to 0 since we'll be feeding in an error number to\n    ## the update function.   \n    steering= PID(.01,.01,.001)\n    throttle = PID(.5,.01,.001)\n    steering.setpoint(0) \n    throttle.setpoint(speed)\n\n\n    #The main loop that drives to the way point\n    while not there_yet:\n\n        autosave(conn, savetime, partslist)  ##call autosave to see if we should save yet\n        recharge(conn)\n\n    ##  Steering control - handles selecting a bearing, comparing it to \n    ##  current heading and feeding that error in degrees to the PID to\n    ##  get the control correction required.\n        location = latlon(ground_telem.latitude, ground_telem.longitude)\n        target_heading = heading_for_latlon(target, location)\n        course_correct= course_correction(surf_telem.heading, target_heading)\n        steer_correct = steering.update(course_correct)\n        v.control.wheel_steering= steer_correct\n\n        #Throttle control  -  tries to maintain the given speed!\n        v.control.brakes = False\n        throttsetting=   throttle.update(ground_telem.speed)\n        v.control.wheel_throttle = throttsetting\n\n        #Check if we're there to end the loop\n        if distance(target, location, v.orbit.body) < 50:\n            there_yet=True\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rover.autosave", "Art_Whaleys_KRPC_Demos.rover.course_correction", "Art_Whaleys_KRPC_Demos.rover.distance", "Art_Whaleys_KRPC_Demos.rover.heading_for_latlon", "Art_Whaleys_KRPC_Demos.rover.recharge"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 2162, "lines_of_code": 51, "inputs": ["conn", "waypoint", "speed", "savetime"], "restricted": false}
{"id": "69bbe152ce99f3a19a0a18347a8e67b69bdcda66959ace121bc96d8da1d03f02", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "autosave", "description": "##############################################################################\n###  Autosave function.   Saves if the vessel appears stable and isn't already\n###  stopped, pitched greater than 30 degrees, or showing a different part\n###  count than before.\n##############################################################################", "code": "def autosave(conn, savetime, partslist):\n    if savetime == 0:\n        return\n    if time.time() - autosave.lastsave > savetime:\n        v=conn.space_center.active_vessel\n        telem=v.flight(v.orbit.body.reference_frame)\n\n        if safetosave(conn , partslist): \n            v.control.throttle = 0.0  ## Stop the rover then save\n            v.control.brakes = True\n            while telem.speed > 0.01:\n                pass\n            time.sleep(.1)  \n            conn.space_center.save('rover_ap')\n            v.control.brakes = False\n        autosave.lastsave = time.time()\n", "categories": ["function"], "dependencies": ["Art_Whaleys_KRPC_Demos.rover.safetosave"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 581, "lines_of_code": 16, "inputs": ["conn", "savetime", "partslist"], "restricted": false}
{"id": "523285de6777a9d09524512d84c8cebe0c85e4fbcbb95b65222bf0bf0c2160f3", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "safetosave", "description": "# function called by autosave to determine if it's safe to save the file!\n# tries to avoid overwriting a good save with one we take AFTER the rover \n# has crashed or flipped or run into a space tree.", "code": "def safetosave(conn, partslist):\n    v=conn.space_center.active_vessel\n    ground_telem=v.flight(v.orbit.body.reference_frame)\n    surf_telem=v.flight(v.surface_reference_frame)\n\n    if ground_telem.speed < .1: # We might be stuck! \n        print(\"stuck\")\n        return False\n    if surf_telem.pitch > 25 or surf_telem.roll >25: # We might have rolled!\n        print(\"roll\")\n        return False\n    if len(partslist) is not len(v.parts.all): # We might have lost something?\n        print(\"broken\")\n        return False\n    return True  # all good!\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 550, "lines_of_code": 15, "inputs": ["conn", "partslist"], "restricted": false}
{"id": "7fa8ee2d125ab28b0cc92c2fc197cb0d6d150868f169014f3920ffd4c250ef93", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "recharge", "description": "##############################################################################\n##  Battery Charging Function - if the batteries are below 5% - stops rover\n##  and deploys solar panels until charge is above 85% then resumes travel.\n##############################################################################", "code": "def recharge(conn):\n    vessel = conn.space_center.active_vessel\n    telem=vessel.flight(vessel.orbit.body.reference_frame)\n    Max_EC = vessel.resources.max('ElectricCharge')\n    EC = vessel.resources.amount('ElectricCharge')\n    if EC / Max_EC < .05:   #less than 5% charge - Stop the rover\n        vessel.control.wheel_throttle = 0\n        vessel.control.brakes = True\n        while telem.speed > 0.01:\n                pass\n        vessel.control.solar_panels = True\n        while EC / Max_EC < .85:   #less than 85% charge\n            Max_EC = vessel.resources.max('ElectricCharge')\n            EC = vessel.resources.amount('ElectricCharge')\n        vessel.control.solar_panels = False  ##pack up and get moving again\n        vessel.control.brakes = False\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 760, "lines_of_code": 16, "inputs": ["conn"], "restricted": false}
{"id": "9a84313a8158ddc822250bd0549d924583604b647d997930b99e72ea7461996d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "heading_for_latlon", "description": "##############################################################################\n##  Navigation Math Functions\n##############################################################################", "code": "def heading_for_latlon(target, location):\n\n    lat1 = math.radians(location.lat)\n    lat2 = math.radians(target.lat)\n\n    diffLong = math.radians(target.lon - location.lon)\n\n    x = math.sin(diffLong) * math.cos(lat2)\n    y = math.cos(lat1) * math.sin(lat2) - (math.sin(lat1)\n            * math.cos(lat2) * math.cos(diffLong))\n\n    initial_bearing = math.atan2(x, y)\n\n    initial_bearing = math.degrees(initial_bearing)\n    compass_bearing = (initial_bearing + 360) % 360\n\n    return compass_bearing\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 500, "lines_of_code": 17, "inputs": ["target", "location"], "restricted": false}
{"id": "b2b2ce61f08fd084f8a5ca71db3b36b684508595819f5c53995fe56d82e203db", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "distance", "description": "Extracted function distance from Art_Whaleys_KRPC_Demos/rover.py", "code": "def distance(target, location, body):\n  R = body.equatorial_radius # Earth radius in kilometers\n \n  dLat = radians(target.lat - location.lat)\n  dLon = radians(target.lon - location.lon)\n  lat1 = radians(location.lat)\n  lat2 = radians(target.lat)\n \n  a = sin(dLat/2)**2 + cos(lat1)*cos(lat2)*sin(dLon/2)**2\n  c = 2*asin(sqrt(a))\n \n  return R * c\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 345, "lines_of_code": 12, "inputs": ["target", "location", "body"], "restricted": false}
{"id": "0897fe4f93d072bf4ecab95a52c5fa0b04a500c8e6b884309d2120f94f5e1234", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "Art_Whaleys_KRPC_Demos/rover.py", "lang": "python", "name": "course_correction", "description": "Extracted function course_correction from Art_Whaleys_KRPC_Demos/rover.py", "code": "def course_correction(myheading, targetbearing):\n    unadjusted= targetbearing-myheading\n    if unadjusted < -180:\n        return unadjusted +360\n    if unadjusted > 180:\n        return unadjusted -360\n    return unadjusted\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 224, "lines_of_code": 7, "inputs": ["myheading", "targetbearing"], "restricted": false}
{"id": "ee8c2feb5a74e9c5933e2304ab497ef01f7e80a7d8a0536c5c5e324bd3eda9ba", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "total_area", "description": "Extracted function total_area from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "def total_area(orbit):\n    a = orbit.semi_major_axis\n    b = orbit.semi_minor_axis\n    return math.pi * a * b\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 110, "lines_of_code": 4, "inputs": ["orbit"], "restricted": false}
{"id": "488aeebbe007e0c665ec166f022dd28f7fb1aa9879ed0997c288011c4a8f2746", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "area_since_periapsis", "description": "Extracted function area_since_periapsis from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "def area_since_periapsis(orbit, E):\n    a = orbit.semi_major_axis\n    b = orbit.semi_minor_axis\n    return 0.5 * a * b * E\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 123, "lines_of_code": 4, "inputs": ["orbit", "E"], "restricted": false}
{"id": "89c1a2ca380602c65366475b3da99febf82277a4efbfeaea0e7ca6ec5a7c4b3c", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "mean_anomaly_from_true_anomaly", "description": "Extracted function mean_anomaly_from_true_anomaly from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "def mean_anomaly_from_true_anomaly(orbit, theta):\n    e = orbit.eccentricity\n    adj = e + math.cos(theta)\n    hyp = 1 + e*math.cos(theta)\n    return math.acos(adj / hyp)\n", "categories": ["function"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 171, "lines_of_code": 5, "inputs": ["orbit", "theta"], "restricted": false}
{"id": "0a0dc9f8ccabaab1150670fef7a3d9e81b80d8e486f427987e2add0b2cdc1bbf", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "area_between_mean_anomalies", "description": "Extracted function area_between_mean_anomalies from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "def area_between_mean_anomalies(orbit, E0, E1):\n    A0 = area_since_periapsis(orbit, E0)\n    A1 = area_since_periapsis(orbit, E1)\n    return A1 - A0\n", "categories": ["function"], "dependencies": ["examples.ksp-pynet.ksppynet.flight_plan_node.area_since_periapsis"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 149, "lines_of_code": 4, "inputs": ["orbit", "E0", "E1"], "restricted": false}
{"id": "931a600c07ac5e8b8aee25846f53e00420f260825866ba6d894d1dc343688422", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "time_to_ascending_node", "description": "Extracted function time_to_ascending_node from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "def time_to_ascending_node(orbit):\n    A0 = total_area(orbit)\n\n    E = orbit.mean_anomaly\n    Ap = area_since_periapsis(orbit, E)\n\n    theta = orbit.argument_of_periapsis - math.pi\n    En = mean_anomaly_from_true_anomaly(orbit, theta)\n    En += math.pi\n    An = area_since_periapsis(orbit, En)\n\n    frac = (An-Ap)/A0\n    return orbit.period * frac\n", "categories": ["function"], "dependencies": ["examples.ksp-pynet.ksppynet.flight_plan_node.area_since_periapsis", "examples.ksp-pynet.ksppynet.flight_plan_node.mean_anomaly_from_true_anomaly", "examples.ksp-pynet.ksppynet.flight_plan_node.total_area"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 348, "lines_of_code": 13, "inputs": ["orbit"], "restricted": false}
{"id": "d2dd4e6bab2ee4b0ac1996b35f4393e0d9356533375cc9f77e44ade87e9d8029", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "time_to_descending_node", "description": "Extracted function time_to_descending_node from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "def time_to_descending_node(orbit):\n    A0 = total_area(orbit)\n\n    E = orbit.mean_anomaly\n    Ap = area_since_periapsis(orbit, E)\n\n    theta = orbit.argument_of_periapsis - math.pi\n    En = mean_anomaly_from_true_anomaly(orbit, theta)\n    An = area_since_periapsis(orbit, En)\n\n    frac = (An-Ap)/A0\n    return orbit.period * frac\n", "categories": ["function"], "dependencies": ["examples.ksp-pynet.ksppynet.flight_plan_node.area_since_periapsis", "examples.ksp-pynet.ksppynet.flight_plan_node.mean_anomaly_from_true_anomaly", "examples.ksp-pynet.ksppynet.flight_plan_node.total_area"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 331, "lines_of_code": 12, "inputs": ["orbit"], "restricted": false}
{"id": "45de2167078a9fd67b7f77d6b26d6e2002e6595bf5cfda7d32a9c08b041722d0", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.__init__", "description": "Extracted function ManeuverNode.__init__ from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "    def __init__(self, conn, vessel, ut):\n        self.node = None\n        self.conn = conn\n        self.vessel = vessel\n        self.ut = ut\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 142, "lines_of_code": 5, "inputs": ["self", "conn", "vessel", "ut"], "restricted": false}
{"id": "70a96b71e1c714c2c84a748b9481b83d01fdc3efd43806f4abcb650b0414beeb", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.circularize", "description": "Extracted function ManeuverNode.circularize from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "    def circularize(self, at_apoapsis=True):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        mu = orbit.body.gravitational_parameter\n        if at_apoapsis:\n            r = orbit.apoapsis\n        else:\n            r = orbit.periapsis\n        a1 = orbit.semi_major_axis\n        a2 = r\n        v1 = math.sqrt(mu*((2./r)-(1./a1)))\n        v2 = math.sqrt(mu*((2./r)-(1./a2)))\n        delta_v = v2 - v1\n        ut = conn.space_center.ut\n        if at_apoapsis:\n            ut += orbit.time_to_apoapsis\n        else:\n            ut += orbit.time_to_periapsis\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 662, "lines_of_code": 20, "inputs": ["self", "at_apoapsis"], "restricted": false}
{"id": "95724bb8244be42d32bf6c42aac9d0f51cf4786733002b8fc426e7c70d3f1a3c", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.change_apoapsis", "description": "Extracted function ManeuverNode.change_apoapsis from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "    def change_apoapsis(self, new_apoapsis_altitude):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        new_apoapsis = orbit.periapsis - orbit.periapsis_altitude + new_apoapsis_altitude\n        mu = orbit.body.gravitational_parameter\n        ut = conn.space_center.ut + orbit.time_to_periapsis\n        r1 = orbit.periapsis\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        r2 = r1\n        a2 = (r1 + new_apoapsis) / 2\n        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n        delta_v = v2 - v1\n        print(\"new: {}, r1: {}, a1: {}, r2: {}, a2: {}, dV: {}\".format(\n              new_apoapsis, r1, a1, r2 ,a2, delta_v))\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 760, "lines_of_code": 17, "inputs": ["self", "new_apoapsis_altitude"], "restricted": false}
{"id": "768388d811c92269b14ec7155ae3bfd22e7b3d2b7433c5856604c0c8efd63b42", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.change_periapsis", "description": "Extracted function ManeuverNode.change_periapsis from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "    def change_periapsis(self, new_periapsis_altitude):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        new_periapsis = orbit.apoapsis - orbit.apoapsis_altitude + new_periapsis_altitude\n        mu = orbit.body.gravitational_parameter\n        ut = conn.space_center.ut + orbit.time_to_apoapsis\n        r1 = orbit.apoapsis\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        r2 = r1\n        a2 = (r1 + new_periapsis) / 2\n        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n        delta_v = v2 - v1\n        print(\"new: {}, r1: {}, a1: {}, r2: {}, a2: {}, dV: {}\".format(\n              new_periapsis, r1, a1, r2 ,a2, delta_v))\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 762, "lines_of_code": 17, "inputs": ["self", "new_periapsis_altitude"], "restricted": false}
{"id": "a2ee0e5ab5e281d03ab7e2b8f7863ab29064a82cab3984706126d59e235c2b25", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.change_sma", "description": "#    def change_periapsis(self, new_periapsis):\n#        conn = self.conn\n#        vessel = self.vessel\n#        orbit = vessel.orbit\n#        mu = orbit.body.gravitational_parameter\n#        ut = conn.space_center.ut + orbit.time_to_apoapsis\n#        r1 = orbit.apoapsis\n#        a1 = orbit.semi_major_axis\n#        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n#        r2 = r1\n#        a2 = (r1 + new_periapsis) / 2\n#        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n#        delta_v = v2 - v1\n#        self.node = vessel.control.add_node(ut, prograde=delta_v)", "code": "    def change_sma(self, sma, ut):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        mu = orbit.body.gravitational_parameter\n        r1 = orbit.radius\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        r2 = r1\n        a2 = sma\n        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n        delta_v = v2 - v1\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 442, "lines_of_code": 13, "inputs": ["self", "sma", "ut"], "restricted": false}
{"id": "321f0171c0a92546420bf04ea5c6e20c4052c2b39b56cd3e1406ffa5ec578edd", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.hohmann_transfer", "description": "Extracted function ManeuverNode.hohmann_transfer from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "    def hohmann_transfer(self, target):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        mu = orbit.body.gravitational_parameter\n        r1 = orbit.radius\n        r2 = target.orbit.radius\n\n        transfer_time = math.pi * math.sqrt(((r1+r2)**3)/(8*mu))\n        transfer_angle = math.pi * (1 - (1/(2*math.sqrt(2))) * math.sqrt(((r1/r2)+1)**3))\n\n        Mv = orbit.mean_anomaly\n        Mt = target.orbit.mean_anomaly\n        av = orbit.semi_major_axis\n        at = target.orbit.semi_major_axis\n        nv = math.sqrt(mu/(av**3))\n        nt = math.sqrt(mu/(at**3))\n\n        Mt += 2*math.pi\n\n        time_until_transfer = (transfer_angle - Mt + Mv) / (nt - nv)\n\n        print(Mt, Mv, transfer_angle, transfer_angle - Mt + Mv, nt - nv, time_until_transfer)\n\n        ut = conn.space_center.ut + time_until_transfer\n\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        a2 = (target.orbit.radius + r1) / 2\n        v2 = math.sqrt(mu*((2./r1)-(1./a2)))\n        delta_v = v2 - v1\n\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1115, "lines_of_code": 33, "inputs": ["self", "target"], "restricted": false}
{"id": "d11e789fa27fdf64ac3a4757a59f5e567da67c63b684bdac558a3f6966255856", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.change_inclination", "description": "Extracted function ManeuverNode.change_inclination from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "    def change_inclination(self, new_inclination):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        i = new_inclination - orbit.inclination\n        v = orbit.speed\n        normal = v*math.sin(i)\n        prograde = v*math.cos(i) - v\n        ut = conn.space_center.ut + time_to_ascending_node(orbit)\n        self.node = vessel.control.add_node(ut, normal=normal, prograde=prograde)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.flight_plan_node.time_to_ascending_node"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 422, "lines_of_code": 10, "inputs": ["self", "new_inclination"], "restricted": false}
{"id": "b724684bc6691525859421a3fc8d3f687e626666b46bca4af6f7dc4e308b0c30", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode.execute", "description": "Extracted function ManeuverNode.execute from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "    def execute(self, lead_time=15):\n        conn = self.conn\n        vessel = self.vessel\n        node = self.node\n\n        if not node:\n            return True\n\n        self.lead_time = lead_time\n        self.remaining_burn = conn.add_stream(node.remaining_burn_vector, node.reference_frame)\n        self.node_ut = node.ut\n\n        # Calculate burn time using rocket equation\n        F = vessel.available_thrust\n        Isp = vessel.specific_impulse * 9.82\n        m0 = vessel.mass\n        m1 = m0 / math.exp(node.delta_v/Isp)\n        flow_rate = F / Isp\n        self.burn_time = (m0 - m1) / flow_rate\n\n        # Orientate ship\n        ap = vessel.auto_pilot\n        ap.reference_frame = node.reference_frame\n        ap.target_direction = (0,1,0)\n        ap.engage()\n        while True:\n            yield\n            burn_ut = self.node_ut - (self.burn_time/2.)\n            #TODO: check vessel is pointing in the correct direction before warping\n            #      and if the error is large, drop out of warp and reorient the vessel\n            if self.ut() < burn_ut - self.lead_time:\n                self.conn.space_center.warp_to(burn_ut - self.lead_time)\n\n            if self.ut() < burn_ut:\n                continue\n\n            # Burn time remaining\n            try:\n                F = self.vessel.available_thrust\n                Isp = self.vessel.specific_impulse * 9.82\n                m0 = self.vessel.mass\n                m1 = m0 / math.exp(self.remaining_burn()[1]/Isp)\n                flow_rate = F / Isp\n                remaining_burn_time = (m0 - m1) / flow_rate\n            except ZeroDivisionError:\n                continue\n\n            if remaining_burn_time > 2:\n                # Burn at full throttle\n                self.vessel.control.throttle = 1\n                continue\n            elif self.remaining_burn()[1] > 0:\n                # Burn at a throttle setting that maintains a\n                # remaining burn time of t seconds\n                t = 2\n                F = ((m0 - m1) / t) * Isp\n                throttle = F / self.vessel.available_thrust # XXX Divide by zero!\n                self.vessel.control.throttle = max(0.005, throttle)\n                continue\n            else:\n                # Burn complete\n                self.vessel.control.throttle = 0\n                self.node.remove()\n                self.node = None\n                return\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 2388, "lines_of_code": 65, "inputs": ["self", "lead_time"], "restricted": false}
{"id": "77160c329175735e3b477d3370123183aeb392f7d64557053a404394b80a045c", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/flight_plan_node.py", "lang": "python", "name": "ManeuverNode", "description": "Extracted class ManeuverNode from examples/ksp-pynet/ksppynet/flight_plan_node.py", "code": "class ManeuverNode(object):\n    def __init__(self, conn, vessel, ut):\n        self.node = None\n        self.conn = conn\n        self.vessel = vessel\n        self.ut = ut\n\n    def circularize(self, at_apoapsis=True):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        mu = orbit.body.gravitational_parameter\n        if at_apoapsis:\n            r = orbit.apoapsis\n        else:\n            r = orbit.periapsis\n        a1 = orbit.semi_major_axis\n        a2 = r\n        v1 = math.sqrt(mu*((2./r)-(1./a1)))\n        v2 = math.sqrt(mu*((2./r)-(1./a2)))\n        delta_v = v2 - v1\n        ut = conn.space_center.ut\n        if at_apoapsis:\n            ut += orbit.time_to_apoapsis\n        else:\n            ut += orbit.time_to_periapsis\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n\n    def change_apoapsis(self, new_apoapsis_altitude):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        new_apoapsis = orbit.periapsis - orbit.periapsis_altitude + new_apoapsis_altitude\n        mu = orbit.body.gravitational_parameter\n        ut = conn.space_center.ut + orbit.time_to_periapsis\n        r1 = orbit.periapsis\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        r2 = r1\n        a2 = (r1 + new_apoapsis) / 2\n        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n        delta_v = v2 - v1\n        print(\"new: {}, r1: {}, a1: {}, r2: {}, a2: {}, dV: {}\".format(\n              new_apoapsis, r1, a1, r2 ,a2, delta_v))\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n\n    def change_periapsis(self, new_periapsis_altitude):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        new_periapsis = orbit.apoapsis - orbit.apoapsis_altitude + new_periapsis_altitude\n        mu = orbit.body.gravitational_parameter\n        ut = conn.space_center.ut + orbit.time_to_apoapsis\n        r1 = orbit.apoapsis\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        r2 = r1\n        a2 = (r1 + new_periapsis) / 2\n        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n        delta_v = v2 - v1\n        print(\"new: {}, r1: {}, a1: {}, r2: {}, a2: {}, dV: {}\".format(\n              new_periapsis, r1, a1, r2 ,a2, delta_v))\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n\n#    def change_apoapsis(self, new_apoapsis):\n#        conn = self.conn\n#        vessel = self.vessel\n#        orbit = vessel.orbit\n#        mu = orbit.body.gravitational_parameter\n#        ut = conn.space_center.ut + orbit.time_to_periapsis\n#        r1 = orbit.periapsis\n#        a1 = orbit.semi_major_axis\n#        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n#        r2 = r1\n#        a2 = (r1 + new_apoapsis) / 2\n#        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n#        delta_v = v2 - v1\n#        self.node = vessel.control.add_node(ut, prograde=delta_v)\n\n#    def change_periapsis(self, new_periapsis):\n#        conn = self.conn\n#        vessel = self.vessel\n#        orbit = vessel.orbit\n#        mu = orbit.body.gravitational_parameter\n#        ut = conn.space_center.ut + orbit.time_to_apoapsis\n#        r1 = orbit.apoapsis\n#        a1 = orbit.semi_major_axis\n#        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n#        r2 = r1\n#        a2 = (r1 + new_periapsis) / 2\n#        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n#        delta_v = v2 - v1\n#        self.node = vessel.control.add_node(ut, prograde=delta_v)\n\n    def change_sma(self, sma, ut):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        mu = orbit.body.gravitational_parameter\n        r1 = orbit.radius\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        r2 = r1\n        a2 = sma\n        v2 = math.sqrt(mu*((2./r2)-(1./a2)))\n        delta_v = v2 - v1\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n\n    def hohmann_transfer(self, target):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        mu = orbit.body.gravitational_parameter\n        r1 = orbit.radius\n        r2 = target.orbit.radius\n\n        transfer_time = math.pi * math.sqrt(((r1+r2)**3)/(8*mu))\n        transfer_angle = math.pi * (1 - (1/(2*math.sqrt(2))) * math.sqrt(((r1/r2)+1)**3))\n\n        Mv = orbit.mean_anomaly\n        Mt = target.orbit.mean_anomaly\n        av = orbit.semi_major_axis\n        at = target.orbit.semi_major_axis\n        nv = math.sqrt(mu/(av**3))\n        nt = math.sqrt(mu/(at**3))\n\n        Mt += 2*math.pi\n\n        time_until_transfer = (transfer_angle - Mt + Mv) / (nt - nv)\n\n        print(Mt, Mv, transfer_angle, transfer_angle - Mt + Mv, nt - nv, time_until_transfer)\n\n        ut = conn.space_center.ut + time_until_transfer\n\n        a1 = orbit.semi_major_axis\n        v1 = math.sqrt(mu*((2./r1)-(1./a1)))\n        a2 = (target.orbit.radius + r1) / 2\n        v2 = math.sqrt(mu*((2./r1)-(1./a2)))\n        delta_v = v2 - v1\n\n        self.node = vessel.control.add_node(ut, prograde=delta_v)\n\n\n    def change_inclination(self, new_inclination):\n        conn = self.conn\n        vessel = self.vessel\n        orbit = vessel.orbit\n        i = new_inclination - orbit.inclination\n        v = orbit.speed\n        normal = v*math.sin(i)\n        prograde = v*math.cos(i) - v\n        ut = conn.space_center.ut + time_to_ascending_node(orbit)\n        self.node = vessel.control.add_node(ut, normal=normal, prograde=prograde)\n\n    @asyncio.coroutine\n    def execute(self, lead_time=15):\n        conn = self.conn\n        vessel = self.vessel\n        node = self.node\n\n        if not node:\n            return True\n\n        self.lead_time = lead_time\n        self.remaining_burn = conn.add_stream(node.remaining_burn_vector, node.reference_frame)\n        self.node_ut = node.ut\n\n        # Calculate burn time using rocket equation\n        F = vessel.available_thrust\n        Isp = vessel.specific_impulse * 9.82\n        m0 = vessel.mass\n        m1 = m0 / math.exp(node.delta_v/Isp)\n        flow_rate = F / Isp\n        self.burn_time = (m0 - m1) / flow_rate\n\n        # Orientate ship\n        ap = vessel.auto_pilot\n        ap.reference_frame = node.reference_frame\n        ap.target_direction = (0,1,0)\n        ap.engage()\n        while True:\n            yield\n            burn_ut = self.node_ut - (self.burn_time/2.)\n            #TODO: check vessel is pointing in the correct direction before warping\n            #      and if the error is large, drop out of warp and reorient the vessel\n            if self.ut() < burn_ut - self.lead_time:\n                self.conn.space_center.warp_to(burn_ut - self.lead_time)\n\n            if self.ut() < burn_ut:\n                continue\n\n            # Burn time remaining\n            try:\n                F = self.vessel.available_thrust\n                Isp = self.vessel.specific_impulse * 9.82\n                m0 = self.vessel.mass\n                m1 = m0 / math.exp(self.remaining_burn()[1]/Isp)\n                flow_rate = F / Isp\n                remaining_burn_time = (m0 - m1) / flow_rate\n            except ZeroDivisionError:\n                continue\n\n            if remaining_burn_time > 2:\n                # Burn at full throttle\n                self.vessel.control.throttle = 1\n                continue\n            elif self.remaining_burn()[1] > 0:\n                # Burn at a throttle setting that maintains a\n                # remaining burn time of t seconds\n                t = 2\n                F = ((m0 - m1) / t) * Isp\n                throttle = F / self.vessel.available_thrust # XXX Divide by zero!\n                self.vessel.control.throttle = max(0.005, throttle)\n                continue\n            else:\n                # Burn complete\n                self.vessel.control.throttle = 0\n                self.node.remove()\n                self.node = None\n                return\n", "categories": ["class"], "dependencies": ["examples.ksp-pynet.ksppynet.flight_plan_node.time_to_ascending_node"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 7853, "lines_of_code": 220, "restricted": false}
{"id": "bf70ea182dd56eff4963f38bfa3f4a10aa8a06d545245e954019c9ad01136453", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.__init__", "description": "    # Main thread", "code": "    def __init__(self):\n        print(\"Setting up message queues and event loop\")\n        self.requests = queue.Queue()\n        self.replies = queue.Queue()\n        self.fp = None\n\n        self.methods = {\n            \"connect\" : self.D_connect,\n            \"disconnect\" : self.D_disconnect,\n            \"plan\" : self.D_plan,\n            \"orbital\" : self.D_orbital,\n            \"maneuver\" : self.D_maneuver,\n        }\n        if testing_ui_on:\n            self.methods = {\n                \"orbital\" : self.D_test_orbital,\n            }\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 536, "lines_of_code": 17, "inputs": ["self"], "restricted": false}
{"id": "034187c05ac6948ba9dc21f1b139c3257ead7940e6fec68c7430c737b609c0e6", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.default_method", "description": "Extracted function PynetHandler.default_method from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def default_method(self, *args, **kwargs):\n        if not hasattr(self, \"test_counter\"):\n            self.test_counter = 0\n        self.test_counter += 1\n        self.message(\"Sleep for {}\".format(self.test_counter),\n                     self.test_counter)\n        return self.test_counter\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 294, "lines_of_code": 7, "inputs": ["self", "args", "kwargs"], "restricted": false}
{"id": "e8c99db1f8bb9eb48b0210ebc29cf9debf000fa0832a60d4516cf9659711ace3", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.D_test_orbital", "description": "Extracted function PynetHandler.D_test_orbital from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def D_test_orbital(self, on):\n        self.test_counter += 1\n        pm = PynetMessage(\"orbital_notify\")\n        pm.set_result({\"body_name\": \"Earth\",\n                       \"body_radius\" : 500000,\n                       \"real_apoapsis\" : 500000 + 10000 * self.test_counter,\n                       \"real_periapsis\" : 400000})\n        self.replies.put(pm)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 358, "lines_of_code": 8, "inputs": ["self", "on"], "restricted": false}
{"id": "7d0f1f575cb638376defbda184384f5c2fac7c175253aaf5851b71f70b8117b3", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.D_maneuver", "description": "Extracted function PynetHandler.D_maneuver from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def D_maneuver(self, **kwargs):\n        node = self.fp.get_node()\n        mfns = { \"apoapsis\" : node.change_apoapsis,\n                 \"periapsis\" : node.change_periapsis }\n        for k, v in kwargs.items():\n            self.fp.msg(\"Changing {} to {}\".format(k, v))\n            mfns[k](v)\n            self.loop.create_task(node.execute())\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 344, "lines_of_code": 8, "inputs": ["self", "kwargs"], "restricted": false}
{"id": "3cf54b0c42cfbc0f1039f0f0b01a93681577cb077cc52d2ab9bf3d7162f76457", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.send_orbital_params", "description": "Extracted function PynetHandler.send_orbital_params from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def send_orbital_params(self):\n        self.sending_orbital = True\n        while self.sending_orbital:\n            yield from asyncio.sleep(0.2)\n            pm = PynetMessage(\"orbital_notify\")\n            pm.set_result({\"body_name\" : self.fp.vessel.orbit.body.name,\n                           \"body_radius\" : self.fp.vessel.orbit.body.equatorial_radius,\n                           \"real_apoapsis\" : self.fp.attr[\"real_apoapsis\"](),\n                           \"real_periapsis\" : self.fp.attr[\"real_periapsis\"]()})\n            self.replies.put(pm)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 550, "lines_of_code": 10, "inputs": ["self"], "restricted": false}
{"id": "a3c90be05a1e79cf46405e010d01ff7849b28b2db71fd4d2caacf895e251de14", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.D_orbital", "description": "Extracted function PynetHandler.D_orbital from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def D_orbital(self, on):\n        if on:\n            self.loop.create_task(self.send_orbital_params())\n        else:\n            self.sending_orbital = False\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 161, "lines_of_code": 5, "inputs": ["self", "on"], "restricted": false}
{"id": "201989dec24af5007034069c25378344b1bb638a9dd528cd02d8bcf3ef24fdd5", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.D_plan", "description": "Extracted function PynetHandler.D_plan from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def D_plan(self, heading=0, target_altitude=75000,\n               apoapsis=90000, periapsis=90000):\n        self.fp.set_autostaging()\n\n        self.fp.add_sequence(\"pre_launch\", heading=heading)\n        self.fp.add_sequence(\"launch\", altitude=target_altitude)\n        self.fp.add_sequence(\"orbit\", apoapsis=apoapsis, periapsis=periapsis)\n        self.fp.add_sequence(\"quit\")\n        self.fp.launch()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 404, "lines_of_code": 9, "inputs": ["self", "heading", "target_altitude", "apoapsis", "periapsis"], "restricted": false}
{"id": "d1cbdd8bef45e81061af95658717818e23b604c1fabd958605d427c294a52528", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.D_disconnect", "description": "Extracted function PynetHandler.D_disconnect from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def D_disconnect(self):\n        self.disconnect(self)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "8e2d10b81384e800a9040297a70c4deef03e2ba1fdae1b7340c32237b65192cb", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.D_connect", "description": "Extracted function PynetHandler.D_connect from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def D_connect(self, ip=None, port=None):\n        if self.fp:\n            raise PynetException(\"Already connected\")\n        conn = krpc.connect(name=\"{}.{}\".format(\"KSP-PyNet\", os.getpid()))\n        vessel = conn.space_center.active_vessel\n        self.fp = flight_plan.FlightPlan(conn, vessel, self.message)\n        return \"Connected with IP {}, PORT {}\".format(ip, port)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetException"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 376, "lines_of_code": 7, "inputs": ["self", "ip", "port"], "restricted": false}
{"id": "5bc408981fa20fb09357a917c00c91b7c6a74b42259dce0d5570068681e191d4", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.message", "description": "Extracted function PynetHandler.message from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def message(self, msg, duration=10):\n        pm = PynetMessage(\"message\")\n        pm.set_result({\"msg\" : msg, \"duration\" : duration})\n        self.replies.put(pm)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 167, "lines_of_code": 4, "inputs": ["self", "msg", "duration"], "restricted": false}
{"id": "3c3dc965922fc4218779a1402296cfc2e462d32cace090f665931eb179905497", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.debug", "description": "Extracted function PynetHandler.debug from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def debug(self, msg):\n        pm = PynetMessage(\"debug\")\n        pm.set_result({\"msg\" : msg})\n        self.replies.put(pm)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 127, "lines_of_code": 4, "inputs": ["self", "msg"], "restricted": false}
{"id": "7c30d54e82968b635eb02f1538ee2aab31e04fee44c041ec52c1e9f901d81787", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.disconnect", "description": "Extracted function PynetHandler.disconnect from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def disconnect(self):\n        if self.fp:\n            self.fp.close()\n            self.fp = None\n        self.replies.put(PynetMessage(\"disconnect\"))\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 154, "lines_of_code": 5, "inputs": ["self"], "restricted": false}
{"id": "99455be75c94dabe1867b8d17acfda114c4c37f2bcd4127a23e9d3808f390d2d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.dispatch", "description": "Extracted function PynetHandler.dispatch from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def dispatch(self, req, *args, **kwargs):\n        try:\n            if req in self.methods:\n                result = self.methods[req](*args, **kwargs)\n            else:\n                result = self.default_method(*args, **kwargs)\n        except Exception as e:\n            result = {\"error\" : str(traceback.format_exc()) }\n        if not isinstance(result, dict):\n            result = {\"result\" : result }\n        return result\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 433, "lines_of_code": 11, "inputs": ["self", "req", "args", "kwargs"], "restricted": false}
{"id": "0856f5e7555eb94b69572a7d630b50c7793e5f3503e610fbd5ef25ad7f23cf8e", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.request_handler", "description": "Extracted function PynetHandler.request_handler from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def request_handler(self):\n        print(\"Started request handler\")\n        while True:\n            try:\n                msg = self.requests.get(False) # Don't block\n            except queue.Empty:\n                yield\n            else:\n                print(\"Got request\")\n                msg.result = yield from self.dispatch(msg.req, *msg.args, **msg.kwargs)\n                print(\"Sending reply: {}\".format(msg.result))\n                self.replies.put(msg)\n                if msg.req == \"disconnect\":\n                    print(\"Disconnecting PyNet\")\n                    self.loop.stop()\n                    return\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 624, "lines_of_code": 16, "inputs": ["self"], "restricted": false}
{"id": "dd34f37bbe26bf3b02dff0d6ff56383999fdf13d7f756955c721ed20ea95080b", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.exception_handler", "description": "Extracted function PynetHandler.exception_handler from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def exception_handler(self, loop, context):\n        print(context[\"message\"])\n        if (not \"exception\" in context\n            or not isinstance(context[\"exception\"], ConnectionResetError)):\n            self.loop.default_exception_handler(context)\n            self.debug(\"Hit exception:\\n{}\".format(context[\"message\"]))\n        self.loop.stop()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 351, "lines_of_code": 7, "inputs": ["self", "loop", "context"], "restricted": false}
{"id": "32f4fd8ffbbe70365ca9401bd34b8a367bca86d99e36d5f9be64b409e8db78bb", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.run", "description": "Extracted function PynetHandler.run from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def run(self, loop):\n        self.fp = None\n        asyncio.set_event_loop(loop)\n        self.loop = asyncio.get_event_loop()\n        print(\"Pynet running\")\n        # Create a task to handle incoming requests then wait for\n        # all tasks to complete.\n        self.loop.set_exception_handler(self.exception_handler)\n\n        # Start the request handler\n        self.loop.create_task(self.request_handler())\n\n        pending = asyncio.Task.all_tasks()\n        try:\n            self.loop.run_until_complete(asyncio.gather(*pending))\n        except RuntimeError:\n            print(\"Pynet Loop stopped, disconnected\")\n\n        self.disconnect()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 649, "lines_of_code": 19, "inputs": ["self", "loop"], "restricted": false}
{"id": "2fea87b43465de107bdbc26911c072f22d797f1ae21306c19f56001790b62790", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.start_thread", "description": "    # Main thread", "code": "    def start_thread(self):\n        loop = asyncio.get_event_loop()\n        self.t = Thread(target=self.run, args=(loop,))\n        self.t.start()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 146, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "08c80325c86aa1aec6feb79994d04303af4d1dab7eb7f7fb87c53da8f608ca6f", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.join", "description": "    # Main thread", "code": "    def join(self):\n        if self.t:\n            self.t.join()\n        return\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 80, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "00ef2ff88f7af77a26807ba34e63afdce57401ee184917cc0ab35159bd68f76d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.put", "description": "    # Main thread", "code": "    def put(self, msg):\n        self.requests.put(msg)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 55, "lines_of_code": 2, "inputs": ["self", "msg"], "restricted": false}
{"id": "834e5fe39e90852778918a0a75cc0afacd5bdc8175ba3dacdbdadeda7c06f3fb", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler.iter_results", "description": "    # Main thread", "code": "    def iter_results(self):\n        empty = False\n        while not empty:\n            try:\n                item = self.replies.get(False)\n                yield item\n            except queue.Empty:\n                empty = True\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 227, "lines_of_code": 8, "inputs": ["self"], "restricted": false}
{"id": "bc20c169302d7bdcc9bb3c9cad1953a3052454d12e4541eb18e318723a795baf", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetMessage.__init__", "description": "Extracted function PynetMessage.__init__ from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def __init__(self, req, *args, **kwargs):\n        self.req = req\n        self.args = args\n        self.kwargs = kwargs\n        self.result = None\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 150, "lines_of_code": 5, "inputs": ["self", "req", "args", "kwargs"], "restricted": false}
{"id": "50fbd57b16f9c35bf7e8b3cfb6faafbc34bca57140b5ad1d2a5eb696b00a7a00", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetMessage.set_result", "description": "Extracted function PynetMessage.set_result from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def set_result(self, result_dict):\n        self.result = result_dict\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 73, "lines_of_code": 2, "inputs": ["self", "result_dict"], "restricted": false}
{"id": "91288c96f40ea77741115dd76ed556ad323a2bab2b4b410e6ec7bcfec58a6a23", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "Pynet.__init__", "description": "Extracted function Pynet.__init__ from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def __init__(self):\n        self.pynet_handler = None\n        self.callbacks = {}\n        self.default_callback = None\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 123, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "d1d197c19f0088b17b8da485cc5a91555c13418dfed62e2af0ba71ec08967c1e", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "Pynet.connect", "description": "Extracted function Pynet.connect from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def connect(self, connection_callback,\n                ip=None, port=None,\n                default_callback=None):\n        self.callbacks = {}\n        if not self.pynet_handler:\n            self.pynet_handler = PynetHandler()\n            print(\"starting Pynet thread\")\n            self.pynet_handler.start_thread()\n        self.default_callback = default_callback\n        self.register(\"connect\", connection_callback)\n        self.register(\"disconnect\", connection_callback)\n        self.send_async(\"connect\", ip=ip, port=port)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetHandler"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 532, "lines_of_code": 12, "inputs": ["self", "connection_callback", "ip", "port", "default_callback"], "restricted": false}
{"id": "3e8e4263c731f9ca0b5cd4f0efb01ef13b8f84ad5869a79834f934dd897f509c", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "Pynet.disconnect", "description": "Extracted function Pynet.disconnect from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def disconnect(self):\n        if self.pynet_handler:\n            self.send_async(\"disconnect\")\n            self.pynet_handler.join()\n            # Drain the queue of replies before fully disconnecting.\n            self.recv_async()\n            self.pynet_handler = None\n            self.default_callback = None\n            self.callbacks = {}\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 347, "lines_of_code": 9, "inputs": ["self"], "restricted": false}
{"id": "e6cf73ea6a4833a80d486f25f7d65f347cd3fbb5217d2e61db6a315d1c95dbde", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "Pynet.register", "description": "Extracted function Pynet.register from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def register(self, req, callback):\n        self.callbacks[req] = callback\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 78, "lines_of_code": 2, "inputs": ["self", "req", "callback"], "restricted": false}
{"id": "4c06e320800077a5d607757656cccab0a0d084abcdcd9475bf0b330745eec170", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "Pynet.recv_async", "description": "Extracted function Pynet.recv_async from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def recv_async(self):\n        if self.pynet_handler:\n            for res in self.pynet_handler.iter_results():\n                if res.req in self.callbacks:\n                    self.callbacks[res.req](res.req, res.result)\n                elif self.default_callback:\n                    self.default_callback(res.req, res.result)\n                else:\n                    print(\"Ignoring response: {}: {}\".format(res.req, res.result))\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 438, "lines_of_code": 9, "inputs": ["self"], "restricted": false}
{"id": "0188b551c59342c95e5af6b0c513b520c88c97672c70b36cf0c16ad1f8b7cbc8", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "Pynet.send_async", "description": "Extracted function Pynet.send_async from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "    def send_async(self, req, *args, **kwargs):\n        print(\"send async: {}\".format(req))\n        self.pynet_handler.put(PynetMessage(req, *args, **kwargs))\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 159, "lines_of_code": 3, "inputs": ["self", "req", "args", "kwargs"], "restricted": false}
{"id": "7b61a292f2ada9727c45925a5ebef889b5326618003c641d785c98c7b20bd7cc", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetException", "description": "Extracted class PynetException from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "class PynetException(Exception):\n    pass\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 42, "lines_of_code": 2, "restricted": false}
{"id": "c81f5775fb71bb72025f20a595e1b97790a1fabb7a80e8583ba39065f6a4378d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetHandler", "description": "Extracted class PynetHandler from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "class PynetHandler(object):\n    # Main thread\n    def __init__(self):\n        print(\"Setting up message queues and event loop\")\n        self.requests = queue.Queue()\n        self.replies = queue.Queue()\n        self.fp = None\n\n        self.methods = {\n            \"connect\" : self.D_connect,\n            \"disconnect\" : self.D_disconnect,\n            \"plan\" : self.D_plan,\n            \"orbital\" : self.D_orbital,\n            \"maneuver\" : self.D_maneuver,\n        }\n        if testing_ui_on:\n            self.methods = {\n                \"orbital\" : self.D_test_orbital,\n            }\n\n    def default_method(self, *args, **kwargs):\n        if not hasattr(self, \"test_counter\"):\n            self.test_counter = 0\n        self.test_counter += 1\n        self.message(\"Sleep for {}\".format(self.test_counter),\n                     self.test_counter)\n        return self.test_counter\n\n\n    def D_test_orbital(self, on):\n        self.test_counter += 1\n        pm = PynetMessage(\"orbital_notify\")\n        pm.set_result({\"body_name\": \"Earth\",\n                       \"body_radius\" : 500000,\n                       \"real_apoapsis\" : 500000 + 10000 * self.test_counter,\n                       \"real_periapsis\" : 400000})\n        self.replies.put(pm)\n\n    def D_maneuver(self, **kwargs):\n        node = self.fp.get_node()\n        mfns = { \"apoapsis\" : node.change_apoapsis,\n                 \"periapsis\" : node.change_periapsis }\n        for k, v in kwargs.items():\n            self.fp.msg(\"Changing {} to {}\".format(k, v))\n            mfns[k](v)\n            self.loop.create_task(node.execute())\n\n    @asyncio.coroutine\n    def send_orbital_params(self):\n        self.sending_orbital = True\n        while self.sending_orbital:\n            yield from asyncio.sleep(0.2)\n            pm = PynetMessage(\"orbital_notify\")\n            pm.set_result({\"body_name\" : self.fp.vessel.orbit.body.name,\n                           \"body_radius\" : self.fp.vessel.orbit.body.equatorial_radius,\n                           \"real_apoapsis\" : self.fp.attr[\"real_apoapsis\"](),\n                           \"real_periapsis\" : self.fp.attr[\"real_periapsis\"]()})\n            self.replies.put(pm)\n\n\n    def D_orbital(self, on):\n        if on:\n            self.loop.create_task(self.send_orbital_params())\n        else:\n            self.sending_orbital = False\n\n\n    def D_plan(self, heading=0, target_altitude=75000,\n               apoapsis=90000, periapsis=90000):\n        self.fp.set_autostaging()\n\n        self.fp.add_sequence(\"pre_launch\", heading=heading)\n        self.fp.add_sequence(\"launch\", altitude=target_altitude)\n        self.fp.add_sequence(\"orbit\", apoapsis=apoapsis, periapsis=periapsis)\n        self.fp.add_sequence(\"quit\")\n        self.fp.launch()\n\n    def D_disconnect(self):\n        self.disconnect(self)\n\n    def D_connect(self, ip=None, port=None):\n        if self.fp:\n            raise PynetException(\"Already connected\")\n        conn = krpc.connect(name=\"{}.{}\".format(\"KSP-PyNet\", os.getpid()))\n        vessel = conn.space_center.active_vessel\n        self.fp = flight_plan.FlightPlan(conn, vessel, self.message)\n        return \"Connected with IP {}, PORT {}\".format(ip, port)\n\n    def message(self, msg, duration=10):\n        pm = PynetMessage(\"message\")\n        pm.set_result({\"msg\" : msg, \"duration\" : duration})\n        self.replies.put(pm)\n\n    def debug(self, msg):\n        pm = PynetMessage(\"debug\")\n        pm.set_result({\"msg\" : msg})\n        self.replies.put(pm)\n\n    def disconnect(self):\n        if self.fp:\n            self.fp.close()\n            self.fp = None\n        self.replies.put(PynetMessage(\"disconnect\"))\n\n    @asyncio.coroutine\n    def dispatch(self, req, *args, **kwargs):\n        try:\n            if req in self.methods:\n                result = self.methods[req](*args, **kwargs)\n            else:\n                result = self.default_method(*args, **kwargs)\n        except Exception as e:\n            result = {\"error\" : str(traceback.format_exc()) }\n        if not isinstance(result, dict):\n            result = {\"result\" : result }\n        return result\n\n    @asyncio.coroutine\n    def request_handler(self):\n        print(\"Started request handler\")\n        while True:\n            try:\n                msg = self.requests.get(False) # Don't block\n            except queue.Empty:\n                yield\n            else:\n                print(\"Got request\")\n                msg.result = yield from self.dispatch(msg.req, *msg.args, **msg.kwargs)\n                print(\"Sending reply: {}\".format(msg.result))\n                self.replies.put(msg)\n                if msg.req == \"disconnect\":\n                    print(\"Disconnecting PyNet\")\n                    self.loop.stop()\n                    return\n\n    def exception_handler(self, loop, context):\n        print(context[\"message\"])\n        if (not \"exception\" in context\n            or not isinstance(context[\"exception\"], ConnectionResetError)):\n            self.loop.default_exception_handler(context)\n            self.debug(\"Hit exception:\\n{}\".format(context[\"message\"]))\n        self.loop.stop()\n\n    def run(self, loop):\n        self.fp = None\n        asyncio.set_event_loop(loop)\n        self.loop = asyncio.get_event_loop()\n        print(\"Pynet running\")\n        # Create a task to handle incoming requests then wait for\n        # all tasks to complete.\n        self.loop.set_exception_handler(self.exception_handler)\n\n        # Start the request handler\n        self.loop.create_task(self.request_handler())\n\n        pending = asyncio.Task.all_tasks()\n        try:\n            self.loop.run_until_complete(asyncio.gather(*pending))\n        except RuntimeError:\n            print(\"Pynet Loop stopped, disconnected\")\n\n        self.disconnect()\n\n    # Main thread\n    def start_thread(self):\n        loop = asyncio.get_event_loop()\n        self.t = Thread(target=self.run, args=(loop,))\n        self.t.start()\n\n    # Main thread\n    def join(self):\n        if self.t:\n            self.t.join()\n        return\n\n    # Main thread\n    def put(self, msg):\n        self.requests.put(msg)\n\n    # Main thread\n    def iter_results(self):\n        empty = False\n        while not empty:\n            try:\n                item = self.replies.get(False)\n                yield item\n            except queue.Empty:\n                empty = True\n", "categories": ["class"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetException", "examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 6303, "lines_of_code": 188, "restricted": false}
{"id": "3ea7b9e28cc2ce1d2f415a7e9664cd36dad7681c42e599b7ce2bf07df0ffd6c6", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "PynetMessage", "description": "Extracted class PynetMessage from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "class PynetMessage(object):\n    def __init__(self, req, *args, **kwargs):\n        self.req = req\n        self.args = args\n        self.kwargs = kwargs\n        self.result = None\n\n    def set_result(self, result_dict):\n        self.result = result_dict\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 252, "lines_of_code": 9, "restricted": false}
{"id": "13a91b3e009a5b8d45d8fcf8e7b4bfc73a3a362d6d4bfcd6c36a49551204cc11", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/ksppynet/ksppynet.py", "lang": "python", "name": "Pynet", "description": "Extracted class Pynet from examples/ksp-pynet/ksppynet/ksppynet.py", "code": "class Pynet(object):\n    def __init__(self):\n        self.pynet_handler = None\n        self.callbacks = {}\n        self.default_callback = None\n\n    def connect(self, connection_callback,\n                ip=None, port=None,\n                default_callback=None):\n        self.callbacks = {}\n        if not self.pynet_handler:\n            self.pynet_handler = PynetHandler()\n            print(\"starting Pynet thread\")\n            self.pynet_handler.start_thread()\n        self.default_callback = default_callback\n        self.register(\"connect\", connection_callback)\n        self.register(\"disconnect\", connection_callback)\n        self.send_async(\"connect\", ip=ip, port=port)\n\n    def disconnect(self):\n        if self.pynet_handler:\n            self.send_async(\"disconnect\")\n            self.pynet_handler.join()\n            # Drain the queue of replies before fully disconnecting.\n            self.recv_async()\n            self.pynet_handler = None\n            self.default_callback = None\n            self.callbacks = {}\n\n\n    def register(self, req, callback):\n        self.callbacks[req] = callback\n\n    def recv_async(self):\n        if self.pynet_handler:\n            for res in self.pynet_handler.iter_results():\n                if res.req in self.callbacks:\n                    self.callbacks[res.req](res.req, res.result)\n                elif self.default_callback:\n                    self.default_callback(res.req, res.result)\n                else:\n                    print(\"Ignoring response: {}: {}\".format(res.req, res.result))\n\n    def send_async(self, req, *args, **kwargs):\n        print(\"send async: {}\".format(req))\n        self.pynet_handler.put(PynetMessage(req, *args, **kwargs))\n", "categories": ["class"], "dependencies": ["examples.ksp-pynet.ksppynet.ksppynet.PynetHandler", "examples.ksp-pynet.ksppynet.ksppynet.PynetMessage"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1704, "lines_of_code": 46, "restricted": false}
{"id": "1e086eac66ea817a48e32a5004e8bb749e142eaab30fe2f176e2dc7ec32c31b7", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayManeuver.__init__", "description": "Extracted function DisplayManeuver.__init__ from examples/ksp-pynet/main.py", "code": "    def __init__(self, **kwargs):\n        super(DisplayManeuver, self).__init__(**kwargs)\n\n        self.maneuvers = {\"apoapsis\" : \"120000\",\n                          \"periapsis\": \"100000\"}\n\n\n        self.dropdown = DropDown()\n        self.input = FloatInput(size=(200, 30),\n                                multiline=False,\n                                size_hint=(None, None))\n\n        for m in self.maneuvers.keys():\n            btn = Button(text=m, size_hint_y=None, height=30)\n\n            # Pass the text of the button as the data of the selection.\n            btn.bind(on_release=lambda btn: self.dropdown.select(btn.text))\n            self.dropdown.add_widget(btn)\n\n        self.mainbutton = Button(text='Maneuver',\n                                 size=(160, 50),\n                                 size_hint=(None, None))\n\n        self.mainbutton.bind(on_release=self.dropdown.open)\n\n        def dropdown_action(instance, m):\n            self.input.text = self.maneuvers[m]\n            self.mainbutton.text = m\n\n        self.dropdown.bind(on_select=dropdown_action)\n\n        self.go_button = Button(text='Go',\n                                size=(160, 50),\n                                size_hint=(None, None))\n        self.go_button.bind(on_press=self.go)\n\n        self.add_widget(self.mainbutton)\n        self.add_widget(self.input)\n        self.add_widget(self.go_button)\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.main.FloatInput"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1386, "lines_of_code": 39, "inputs": ["self", "kwargs"], "restricted": false}
{"id": "c1b212f8ae1177600fe662ccb3afbb646c524e37cdda761b6efd006f2a8131dc", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayManeuver.go", "description": "Extracted function DisplayManeuver.go from examples/ksp-pynet/main.py", "code": "    def go(self, *args):\n        kwargs = {self.mainbutton.text : float(self.input.text)}\n        app = App.get_running_app()\n        app.pynet.send_async(\"maneuver\", **kwargs)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 177, "lines_of_code": 4, "inputs": ["self", "args"], "restricted": false}
{"id": "40e0e0b67c11c24d0c6a51f5e27372cc90ea156b8181388907bdb580ad84a10a", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.__init__", "description": "Extracted function Viewer.__init__ from examples/ksp-pynet/main.py", "code": "    def __init__(self, **kwargs):\n        super(Viewer, self).__init__(**kwargs)\n        with self.canvas:\n            Color(0.0, 0.1, 0.9, 0.8)\n            self.orbit = Ellipse()\n            Color(0.1, 0.1, 0.2, 1)\n            self.orbit_inner = Ellipse()\n            Color(0.2, 0.3, 0.1, 1)\n            self.body = Ellipse()\n        self.bind(pos=self.update, size=self.update)\n        self.real_apoapsis = 1000000\n        self.real_periapsis = 400000\n        self.real_radius = 50000\n        self.rescale()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 510, "lines_of_code": 14, "inputs": ["self", "kwargs"], "restricted": false}
{"id": "e920c2bef360284bd3b575165316d0d2085ba3a9b30086f07205842eb3409314", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.rescale", "description": "Extracted function Viewer.rescale from examples/ksp-pynet/main.py", "code": "    def rescale(self):\n        # Put the body in the middle, with the apoapsis near the edge of the\n        # screen.\n        try:\n            factor1 = self.width / (float(max(self.real_apoapsis, self.real_radius)) * 2)\n            factor2 = self.height / (float(max(math.sqrt(self.real_apoapsis *\n                                                         self.real_periapsis),\n                                               self.real_radius)) * 2)\n            factor = min(factor1, factor2)\n            factor *= 0.9\n            self.radius = self.real_radius * factor\n            self.apoapsis = self.real_apoapsis * factor\n            self.periapsis = self.real_periapsis * factor\n        except:\n            # if we cant' rescale, don't\n            print(traceback.format_exc())\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 783, "lines_of_code": 16, "inputs": ["self"], "restricted": false}
{"id": "e522562282942a872a7a1d365011a53cae34d943c6604f2328afd8f71a493a8d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.update", "description": "Extracted function Viewer.update from examples/ksp-pynet/main.py", "code": "    def update(self, *args):\n        self.rescale()\n        self.body.pos = self.body_pos()\n        self.body.size = self.body_size()\n        self.orbit.pos = self.orbit_pos()\n        self.orbit.size = self.orbit_size()\n        self.orbit_inner.pos = (self.orbit.pos[0] + 2, self.orbit.pos[1] + 2)\n        self.orbit_inner.size = (self.orbit.size[0] - 4, self.orbit.size[1] - 4)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 379, "lines_of_code": 8, "inputs": ["self", "args"], "restricted": false}
{"id": "f6630a3d24a542d693fe95d8fc4cc4d5fd59e50a874a8fffa9a95a9d8caa1522", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.center", "description": "Extracted function Viewer.center from examples/ksp-pynet/main.py", "code": "    def center(self):\n        return(self.width/2.0, self.height/2.0)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 70, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "d8492fe366847163c2682c49d8290c7674a484d68dd4ec47f6eb396dfc95efc7", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer._x", "description": "Extracted function Viewer._x from examples/ksp-pynet/main.py", "code": "    def _x(self):\n        return math.sqrt((self.apoapsis * self.periapsis))\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 77, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "73322c00782effe811908998ac57f319534b4a400b81f35c4a25597a438fe3dd", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.body_pos", "description": "Extracted function Viewer.body_pos from examples/ksp-pynet/main.py", "code": "    def body_pos(self):\n        return (self.center[0] - self.radius, self.center[1] - self.radius)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 100, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "b085b92d4c0a6b7e231cb07fb3393ba2254194a6cf85764fe89cb3315d31b505", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.body_size", "description": "Extracted function Viewer.body_size from examples/ksp-pynet/main.py", "code": "    def body_size(self):\n        return (2*self.radius, 2*self.radius)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 71, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "cd76bba04eb341821baa124859de6fba39e31c77959a52b28d1421a1000d44f3", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.orbit_pos", "description": "Extracted function Viewer.orbit_pos from examples/ksp-pynet/main.py", "code": "    def orbit_pos(self):\n        return (self.center[0] - self.periapsis, self.center[1] - self._x)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 100, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "903b47cf7ba15e74f9305540346f8ea89f46e8184878ca860b720565f6779ad7", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.orbit_size", "description": "Extracted function Viewer.orbit_size from examples/ksp-pynet/main.py", "code": "    def orbit_size(self):\n        return (self.apoapsis + self.periapsis, 2 * self._x)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 87, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "fb16f825831ffb8c0fef026cc97192c28b08825f5dacc832e08e1d6bc187764c", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.update_params", "description": "Extracted function Viewer.update_params from examples/ksp-pynet/main.py", "code": "    def update_params(self, msgid, odict):\n        self.real_apoapsis = odict[\"real_apoapsis\"]\n        self.real_periapsis = odict[\"real_periapsis\"]\n        self.real_radius = odict[\"body_radius\"]\n        self.body_name = odict[\"body_name\"]\n        self.update()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 263, "lines_of_code": 6, "inputs": ["self", "msgid", "odict"], "restricted": false}
{"id": "2e65cd5031fea1cf262471279c0cacb84a821b463e919a4337b3de52220f0ac2", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer.register", "description": "Extracted function Viewer.register from examples/ksp-pynet/main.py", "code": "    def register(self, app, on):\n        app.pynet.register(\"orbital_notify\", self.update_params)\n        app.pynet.send_async(\"orbital\", on)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 142, "lines_of_code": 3, "inputs": ["self", "app", "on"], "restricted": false}
{"id": "5ba50f47c5a1254b7a5ca3b0e4633740bec8e2466cbbe3b97c54f8c5c583be50", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Menu.__init__", "description": "Extracted function Menu.__init__ from examples/ksp-pynet/main.py", "code": "    def __init__(self, **kwargs):\n        super(Menu, self).__init__(**kwargs)\n        self.active_widget = None\n        self.message_buffer = [{}]\n        Clock.schedule_interval(self.update_msg, 1.0)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 202, "lines_of_code": 5, "inputs": ["self", "kwargs"], "restricted": false}
{"id": "133f51bfba1017c00548eddaf6d0fed6427d9d1733e004045e6740f96f8177cd", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Menu.active", "description": "Extracted function Menu.active from examples/ksp-pynet/main.py", "code": "    def active(self, enable):\n        if enable and not self.active_widget:\n            self.active_widget = MenuActive()\n            self.connection.background_color = (0.5,1,0.5,0.8)\n            self.dynamic.add_widget(self.active_widget)\n        elif not enable and self.active_widget:\n            self.connection.background_color = (1,0.1,0.1,1)\n            self.dynamic.remove_widget(self.active_widget)\n            self.active_widget = None\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.main.MenuActive"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 447, "lines_of_code": 9, "inputs": ["self", "enable"], "restricted": false}
{"id": "bd034ea4a34de5ce9528a728060034f1f32a2f706dda884a62f76af04cfea617", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Menu.update_msg", "description": "Extracted function Menu.update_msg from examples/ksp-pynet/main.py", "code": "    def update_msg(self, dt):\n        try:\n            self.message_buffer.pop(0)\n            out = \"\\n\".join([m for m in self.message_buffer if m]).strip()\n            self.alerts.text = out\n        except:\n            self.alerts.text = \"\"\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 242, "lines_of_code": 7, "inputs": ["self", "dt"], "restricted": false}
{"id": "8b5f6457f4fe4ffb5418bd8dc90daa9f673d4ca1f68a92a23eb20fcc57bfa71d", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Menu.add_msg", "description": "Extracted function Menu.add_msg from examples/ksp-pynet/main.py", "code": "    def add_msg(self, msg, duration=5):\n        extra = duration - len(self.message_buffer) + 1\n        if extra > 0:\n            self.message_buffer = self.message_buffer + [\"\"] * extra\n        self.message_buffer[duration] = \"\\n\".join([self.message_buffer[duration], msg]).strip()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 283, "lines_of_code": 5, "inputs": ["self", "msg", "duration"], "restricted": false}
{"id": "61325135d5aca29d3744adffa7e68b24185ebc92b85f2016be1ce63adaaa1d7a", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "FloatInput.insert_text", "description": "Extracted function FloatInput.insert_text from examples/ksp-pynet/main.py", "code": "    def insert_text(self, substring, from_undo=False):\n        pat = self.pat\n        if '.' in self.text:\n            s = re.sub(pat, '', substring)\n        else:\n            s = '.'.join([re.sub(pat, '', s) for s in substring.split('.', 1)])\n        return super(FloatInput, self).insert_text(s, from_undo=from_undo)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 319, "lines_of_code": 7, "inputs": ["self", "substring", "from_undo"], "restricted": false}
{"id": "3ef910194ee6cecbeb17fe2a9879e781c580832d5ad175b377efe50eafa1b795", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayConnection.go", "description": "Extracted function DisplayConnection.go from examples/ksp-pynet/main.py", "code": "    def go(self, app):\n        info = { k: self.ids[k] for k in (\"ip\", \"port\")}\n        if self.connected_state == str(True):\n            app.disconnect()\n        else:\n            app.connect(**info)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 201, "lines_of_code": 6, "inputs": ["self", "app"], "restricted": false}
{"id": "ae47b04aa61a6ab526cdae24ff07c23c1ed688bc0dc5b890903f6951e3e44f26", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayConnection.set_connected", "description": "Extracted function DisplayConnection.set_connected from examples/ksp-pynet/main.py", "code": "    def set_connected(self, on):\n        self.connected_state = str(on)\n        if on:\n            self.connected.text = \"Disconnect\"\n            self.connected.background_color = (1,0.1,0.1,1)\n        else:\n            self.connected.text = \"Connect\"\n            self.connected.background_color = (0.5,1,0.5,0.8)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 314, "lines_of_code": 8, "inputs": ["self", "on"], "restricted": false}
{"id": "646808c6281b24dd1b4c743fec02cce4c629a93a32649f2b8e5a636e5c520344", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayFlightPlan.go", "description": "Extracted function DisplayFlightPlan.go from examples/ksp-pynet/main.py", "code": "    def go(self, app):\n        info = { k: float(self.ids[k].state) for k in (\"heading\", \"target_altitude\",\n                                                       \"apoapsis\", \"periapsis\")}\n        app.pynet.send_async(\"plan\", **info)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 234, "lines_of_code": 4, "inputs": ["self", "app"], "restricted": false}
{"id": "dc8326e042eb2dbbcc4bc0b009d30ca3a160bad673bfbd6aa535b332b39f507b", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp.connection_handler", "description": "Extracted function KpConsoleApp.connection_handler from examples/ksp-pynet/main.py", "code": "    def connection_handler(self, msgid, msg_dict):\n        if msgid == \"connect\" and \"error\" not in msg_dict:\n            self.console.display.dconn.set_connected(True)\n            self.console.menu.active(True)\n        else:\n            self.console.display.dconn.set_connected(False)\n            self.console.menu.active(False)\n        print(\"{}: {}\".format(msgid, msg_dict))\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 378, "lines_of_code": 8, "inputs": ["self", "msgid", "msg_dict"], "restricted": false}
{"id": "46aa5c66d937f31b8c8944ee9eb08ad2079d21411db8cf2f01fcdeed15c429bc", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp.screen", "description": "Extracted function KpConsoleApp.screen from examples/ksp-pynet/main.py", "code": "    def screen(self):\n        return self.console.display.sm\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 61, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "6a9ddfc0bb96a20980eb5c0ac5de9b3c178353b8545f62e1e27b2bae9e15aaba", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp.default_recv_msg_handler", "description": "Extracted function KpConsoleApp.default_recv_msg_handler from examples/ksp-pynet/main.py", "code": "    def default_recv_msg_handler(self, msgid, msg_dict):\n        if msgid == \"message\" and \"msg\" in msg_dict:\n            self.console.menu.add_msg(**msg_dict)\n        else:\n            print(\"Unhandled response: {}: {}\".format(msgid, msg_dict))\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 246, "lines_of_code": 5, "inputs": ["self", "msgid", "msg_dict"], "restricted": false}
{"id": "63ce99fd66f735f43c9af1a97173d8ed78cb72ba679b899ee7232f1a7a4754c7", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp.pynet_response_handler", "description": "Extracted function KpConsoleApp.pynet_response_handler from examples/ksp-pynet/main.py", "code": "    def pynet_response_handler(self, dt):\n        self.pynet.recv_async()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 74, "lines_of_code": 2, "inputs": ["self", "dt"], "restricted": false}
{"id": "e0fb20cf435e5cdd49598a75fa3331499812036cf7fd545d4ae923129030ce1a", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp.disconnect", "description": "Extracted function KpConsoleApp.disconnect from examples/ksp-pynet/main.py", "code": "    def disconnect(self):\n        self.pynet.disconnect()\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "9f2f1ad212cb9b134b8dd337763e6eb162b6616696ad2eaa88f286936937da12", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp.connect", "description": "Extracted function KpConsoleApp.connect from examples/ksp-pynet/main.py", "code": "    def connect(self, **kwargs):\n        self.pynet.connect(self.connection_handler,\n                           default_callback=self.default_recv_msg_handler,\n                           **kwargs)\n        self.console.menu.add_msg(\"Connecting...\")\n        Clock.schedule_interval(self.pynet_response_handler, 1.0 / 60.0)\n", "categories": ["method"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 321, "lines_of_code": 6, "inputs": ["self", "kwargs"], "restricted": false}
{"id": "30e3d492b771cc6f64e710328e3a8e1e3b43e95e95ed16f60bfd3469f2fc3f1a", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp.build", "description": "Extracted function KpConsoleApp.build from examples/ksp-pynet/main.py", "code": "    def build(self):\n        self.pynet = ksppynet.Pynet()\n        self.console = Console()\n        return self.console\n", "categories": ["method"], "dependencies": ["examples.ksp-pynet.main.Console"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 120, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "463fa993265c47f3cc06f601efe4ca21403d43241435e66606dbb9b59dc977ef", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "MenuActive", "description": "Extracted class MenuActive from examples/ksp-pynet/main.py", "code": "class MenuActive(ScrollView):\n    pass\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 39, "lines_of_code": 2, "restricted": false}
{"id": "5838de6b209365105f726c1086ce3908603cae1a3bd5235256b69f5f7870b591", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayManeuver", "description": "Extracted class DisplayManeuver from examples/ksp-pynet/main.py", "code": "class DisplayManeuver(GridLayout):\n    def __init__(self, **kwargs):\n        super(DisplayManeuver, self).__init__(**kwargs)\n\n        self.maneuvers = {\"apoapsis\" : \"120000\",\n                          \"periapsis\": \"100000\"}\n\n\n        self.dropdown = DropDown()\n        self.input = FloatInput(size=(200, 30),\n                                multiline=False,\n                                size_hint=(None, None))\n\n        for m in self.maneuvers.keys():\n            btn = Button(text=m, size_hint_y=None, height=30)\n\n            # Pass the text of the button as the data of the selection.\n            btn.bind(on_release=lambda btn: self.dropdown.select(btn.text))\n            self.dropdown.add_widget(btn)\n\n        self.mainbutton = Button(text='Maneuver',\n                                 size=(160, 50),\n                                 size_hint=(None, None))\n\n        self.mainbutton.bind(on_release=self.dropdown.open)\n\n        def dropdown_action(instance, m):\n            self.input.text = self.maneuvers[m]\n            self.mainbutton.text = m\n\n        self.dropdown.bind(on_select=dropdown_action)\n\n        self.go_button = Button(text='Go',\n                                size=(160, 50),\n                                size_hint=(None, None))\n        self.go_button.bind(on_press=self.go)\n\n        self.add_widget(self.mainbutton)\n        self.add_widget(self.input)\n        self.add_widget(self.go_button)\n\n    def go(self, *args):\n        kwargs = {self.mainbutton.text : float(self.input.text)}\n        app = App.get_running_app()\n        app.pynet.send_async(\"maneuver\", **kwargs)\n", "categories": ["class"], "dependencies": ["examples.ksp-pynet.main.FloatInput"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1599, "lines_of_code": 45, "restricted": false}
{"id": "9f02eb94b74dbfbff613648e660caaa2a24f4eea6f4148203ab05cd05fb146f1", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Viewer", "description": "Extracted class Viewer from examples/ksp-pynet/main.py", "code": "class Viewer(Widget):\n    body_name = StringProperty()\n\n    def __init__(self, **kwargs):\n        super(Viewer, self).__init__(**kwargs)\n        with self.canvas:\n            Color(0.0, 0.1, 0.9, 0.8)\n            self.orbit = Ellipse()\n            Color(0.1, 0.1, 0.2, 1)\n            self.orbit_inner = Ellipse()\n            Color(0.2, 0.3, 0.1, 1)\n            self.body = Ellipse()\n        self.bind(pos=self.update, size=self.update)\n        self.real_apoapsis = 1000000\n        self.real_periapsis = 400000\n        self.real_radius = 50000\n        self.rescale()\n\n    def rescale(self):\n        # Put the body in the middle, with the apoapsis near the edge of the\n        # screen.\n        try:\n            factor1 = self.width / (float(max(self.real_apoapsis, self.real_radius)) * 2)\n            factor2 = self.height / (float(max(math.sqrt(self.real_apoapsis *\n                                                         self.real_periapsis),\n                                               self.real_radius)) * 2)\n            factor = min(factor1, factor2)\n            factor *= 0.9\n            self.radius = self.real_radius * factor\n            self.apoapsis = self.real_apoapsis * factor\n            self.periapsis = self.real_periapsis * factor\n        except:\n            # if we cant' rescale, don't\n            print(traceback.format_exc())\n\n\n    def update(self, *args):\n        self.rescale()\n        self.body.pos = self.body_pos()\n        self.body.size = self.body_size()\n        self.orbit.pos = self.orbit_pos()\n        self.orbit.size = self.orbit_size()\n        self.orbit_inner.pos = (self.orbit.pos[0] + 2, self.orbit.pos[1] + 2)\n        self.orbit_inner.size = (self.orbit.size[0] - 4, self.orbit.size[1] - 4)\n\n    @property\n    def center(self):\n        return(self.width/2.0, self.height/2.0)\n\n    @property\n    def _x(self):\n        return math.sqrt((self.apoapsis * self.periapsis))\n\n    def body_pos(self):\n        return (self.center[0] - self.radius, self.center[1] - self.radius)\n\n    def body_size(self):\n        return (2*self.radius, 2*self.radius)\n\n    def orbit_pos(self):\n        return (self.center[0] - self.periapsis, self.center[1] - self._x)\n\n    def orbit_size(self):\n        return (self.apoapsis + self.periapsis, 2 * self._x)\n\n    def update_params(self, msgid, odict):\n        self.real_apoapsis = odict[\"real_apoapsis\"]\n        self.real_periapsis = odict[\"real_periapsis\"]\n        self.real_radius = odict[\"body_radius\"]\n        self.body_name = odict[\"body_name\"]\n        self.update()\n\n    def register(self, app, on):\n        app.pynet.register(\"orbital_notify\", self.update_params)\n        app.pynet.send_async(\"orbital\", on)\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 2677, "lines_of_code": 75, "restricted": false}
{"id": "e5eda138768688c68c53301a94456f434d3e348ceda6e7ce02321eb3dc538e30", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Menu", "description": "Extracted class Menu from examples/ksp-pynet/main.py", "code": "class Menu(BoxLayout):\n    connection = ObjectProperty()\n    dynamic = ObjectProperty()\n    alerts = ObjectProperty()\n\n    def __init__(self, **kwargs):\n        super(Menu, self).__init__(**kwargs)\n        self.active_widget = None\n        self.message_buffer = [{}]\n        Clock.schedule_interval(self.update_msg, 1.0)\n\n    def active(self, enable):\n        if enable and not self.active_widget:\n            self.active_widget = MenuActive()\n            self.connection.background_color = (0.5,1,0.5,0.8)\n            self.dynamic.add_widget(self.active_widget)\n        elif not enable and self.active_widget:\n            self.connection.background_color = (1,0.1,0.1,1)\n            self.dynamic.remove_widget(self.active_widget)\n            self.active_widget = None\n\n    def update_msg(self, dt):\n        try:\n            self.message_buffer.pop(0)\n            out = \"\\n\".join([m for m in self.message_buffer if m]).strip()\n            self.alerts.text = out\n        except:\n            self.alerts.text = \"\"\n\n    def add_msg(self, msg, duration=5):\n        extra = duration - len(self.message_buffer) + 1\n        if extra > 0:\n            self.message_buffer = self.message_buffer + [\"\"] * extra\n        self.message_buffer[duration] = \"\\n\".join([self.message_buffer[duration], msg]).strip()\n", "categories": ["class"], "dependencies": ["examples.ksp-pynet.main.MenuActive"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1296, "lines_of_code": 34, "restricted": false}
{"id": "5d08705414cecaf206aee80dcfac13ef43a9865e38a47dfb3348db9050105190", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "FloatInput", "description": "Extracted class FloatInput from examples/ksp-pynet/main.py", "code": "class FloatInput(TextInput):\n    pat = re.compile('[^0-9]')\n    def insert_text(self, substring, from_undo=False):\n        pat = self.pat\n        if '.' in self.text:\n            s = re.sub(pat, '', substring)\n        else:\n            s = '.'.join([re.sub(pat, '', s) for s in substring.split('.', 1)])\n        return super(FloatInput, self).insert_text(s, from_undo=from_undo)\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 379, "lines_of_code": 9, "restricted": false}
{"id": "32cb6f9124c0eea6bee2a0fdf2a84df4c91e75f66301e35cfd157452e43f2a69", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayConnection", "description": "Extracted class DisplayConnection from examples/ksp-pynet/main.py", "code": "class DisplayConnection(GridLayout):\n    connected = ObjectProperty()\n    connected_state = ObjectProperty()\n    def go(self, app):\n        info = { k: self.ids[k] for k in (\"ip\", \"port\")}\n        if self.connected_state == str(True):\n            app.disconnect()\n        else:\n            app.connect(**info)\n\n    def set_connected(self, on):\n        self.connected_state = str(on)\n        if on:\n            self.connected.text = \"Disconnect\"\n            self.connected.background_color = (1,0.1,0.1,1)\n        else:\n            self.connected.text = \"Connect\"\n            self.connected.background_color = (0.5,1,0.5,0.8)\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 625, "lines_of_code": 18, "restricted": false}
{"id": "8339e23ce75b2f232d877d9e643d7c67828a8de553238581565e93fea84dc84b", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayFlightPlan", "description": "Extracted class DisplayFlightPlan from examples/ksp-pynet/main.py", "code": "class DisplayFlightPlan(GridLayout):\n    def go(self, app):\n        info = { k: float(self.ids[k].state) for k in (\"heading\", \"target_altitude\",\n                                                       \"apoapsis\", \"periapsis\")}\n        app.pynet.send_async(\"plan\", **info)\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 271, "lines_of_code": 5, "restricted": false}
{"id": "a6e1b0407f357f5be93334a5abde15b7b2f541616c501eaec10d725bfda58db3", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayState", "description": "Extracted class DisplayState from examples/ksp-pynet/main.py", "code": "class DisplayState(BoxLayout):\n    pass\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 40, "lines_of_code": 2, "restricted": false}
{"id": "a2bfce012c499ca4a614922f5c55fe2be079a05f1e23c09adf28353d390acb71", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "DisplayDiagnostics", "description": "Extracted class DisplayDiagnostics from examples/ksp-pynet/main.py", "code": "class DisplayDiagnostics(BoxLayout):\n    pass\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 46, "lines_of_code": 2, "restricted": false}
{"id": "b5964573436991e8fedd54e9b8dd9b4d466aee9414678bdd3c56cb4c365803db", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Display", "description": "Extracted class Display from examples/ksp-pynet/main.py", "code": "class Display(RelativeLayout):\n    sm = ObjectProperty()\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 57, "lines_of_code": 2, "restricted": false}
{"id": "c8e7c8134d0855b00925ccd70195811019c492abe64e271c3d04c12805af63f4", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "Console", "description": "Extracted class Console from examples/ksp-pynet/main.py", "code": "class Console(BoxLayout):\n    display = ObjectProperty()\n    menu = ObjectProperty()\n", "categories": ["class"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 85, "lines_of_code": 3, "restricted": false}
{"id": "47ca8996323f984038e53e4b7939a75c8b631c5886c286544018e3de997042b5", "repo": "https://github.com/krpc/krpc-library", "commit": "4724ce14b40cb147665b64d4207770bb91d31204", "path": "examples/ksp-pynet/main.py", "lang": "python", "name": "KpConsoleApp", "description": "Extracted class KpConsoleApp from examples/ksp-pynet/main.py", "code": "class KpConsoleApp(App):\n    def connection_handler(self, msgid, msg_dict):\n        if msgid == \"connect\" and \"error\" not in msg_dict:\n            self.console.display.dconn.set_connected(True)\n            self.console.menu.active(True)\n        else:\n            self.console.display.dconn.set_connected(False)\n            self.console.menu.active(False)\n        print(\"{}: {}\".format(msgid, msg_dict))\n\n    @property\n    def screen(self):\n        return self.console.display.sm\n\n    def default_recv_msg_handler(self, msgid, msg_dict):\n        if msgid == \"message\" and \"msg\" in msg_dict:\n            self.console.menu.add_msg(**msg_dict)\n        else:\n            print(\"Unhandled response: {}: {}\".format(msgid, msg_dict))\n\n    def pynet_response_handler(self, dt):\n        self.pynet.recv_async()\n\n    def disconnect(self):\n        self.pynet.disconnect()\n\n    def connect(self, **kwargs):\n        self.pynet.connect(self.connection_handler,\n                           default_callback=self.default_recv_msg_handler,\n                           **kwargs)\n        self.console.menu.add_msg(\"Connecting...\")\n        Clock.schedule_interval(self.pynet_response_handler, 1.0 / 60.0)\n\n    def build(self):\n        self.pynet = ksppynet.Pynet()\n        self.console = Console()\n        return self.console\n", "categories": ["class"], "dependencies": ["examples.ksp-pynet.main.Console"], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T04:19:01Z", "size_bytes": 1303, "lines_of_code": 37, "restricted": false}
{"id": "0818cbf50fb67b4fc6ff24bc7d8ecc70703d6d3c59c23a29cedcff8b7e3d924b", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "demo.py", "lang": "python", "name": "launch", "description": "Extracted function launch from demo.py", "code": "def launch(connection):\n    # Setup heading, control and throttle\n    vessel = connection.space_center.active_vessel\n    vessel.auto_pilot.target_pitch_and_heading(90, 90)\n    vessel.auto_pilot.sas = True\n    vessel.control.throttle = 1\n    time.sleep(1)\n\n    # Launch\n    print(\"Launch\")\n    vessel.control.activate_next_stage()\n\n    # Thrust until half fuel is remaining, then move to the next stage\n    fuel_amount = connection.get_call(vessel.resources.amount, name=\"LiquidFuel\")\n    max_fuel_capacity = vessel.resources.max(\"LiquidFuel\")\n    monitor_fuel_expression = connection.krpc.Expression.less_than(\n        connection.krpc.Expression.call(fuel_amount),\n        connection.krpc.Expression.constant_float(10)\n    )\n    fuel_event = connection.krpc.add_event(monitor_fuel_expression)\n    with fuel_event.condition:\n        fuel_event.wait()\n    # At half fuel\n    vessel.control.throttle = 0\n    time.sleep(1)\n    vessel.control.activate_next_stage()\n\n    # Wait until 500m and deploy the parachutes\n    vessel.auto_pilot.sas = False\n    altitude = connection.get_call(getattr, vessel.flight(), \"mean_altitude\")\n    parachute_altitude = connection.krpc.Expression.less_than(\n        connection.krpc.Expression.call(altitude),\n        connection.krpc.Expression.constant_double(500)\n    )\n    altitude_event = connection.krpc.add_event(parachute_altitude)\n    with altitude_event.condition:\n        altitude_event.wait()\n    print(f\"Altitude: {vessel.flight().mean_altitude}\")\n    vessel.control.activate_next_stage()\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:13Z", "size_bytes": 1526, "lines_of_code": 39, "inputs": ["connection"], "restricted": false}
{"id": "723128a36fc9c309c5907ca775b243c1120b198424dc48da21d285c8b18d28a7", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "helpers.py", "lang": "python", "name": "get_thrust_to_weight_ratio", "description": "Gets the thrust-to-weight ratio of a given vessel.\nThrust-to-weight = Thrust / (mass * gravity) > 1\n:params conn: A krpc connection\n:params vessel: Vessel object\n:return: Thrust to weight ratio as a double", "code": "def get_thrust_to_weight_ratio(conn, vessel):\n    \"\"\"\n    Gets the thrust-to-weight ratio of a given vessel.\n    Thrust-to-weight = Thrust / (mass * gravity) > 1\n    :params conn: A krpc connection\n    :params vessel: Vessel object\n    :return: Thrust to weight ratio as a double\n    \"\"\"\n    thrust = vessel.available_thrust\n    mass = vessel.mass\n    gravity = conn.space_center.bodies[\"Kerbin\"].surface_gravity\n    ratio = thrust / (mass * gravity)\n    print(f\"Thrust: {thrust} | Mass: {mass} | Gravity: {gravity} | Ratio: {ratio}\")\n    return ratio\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:13Z", "size_bytes": 552, "lines_of_code": 14, "inputs": ["conn", "vessel"], "restricted": false}
{"id": "11439c561dfdcd74243327c0ee8074feb48ab795c325f482768078ed1d276b41", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "helpers.py", "lang": "python", "name": "get_estimated_delta_v", "description": "Gets the estimated delta-v of a given vessel. This is a rough approxmation\nand may be less accurate the larger the vessel.\nhttps://wiki.kerbalspaceprogram.com/wiki/Cheat_sheet\nΔv = Isp * g0   * ln(total_mass/dry_mass)\nFor example:\n   = 400 * 9.81 * ln(3.72/1.72)\n   = 400 * 9.81 * ln(2.16)\n   = 400 * 9.81 * 0.771 = 3026.97 m/s\n:params conn: A krpc connection\n:params vessel: Vessel object\n:params sea_level_impulse: Whether to use specific impulse at Kerbin sea-level\nor specific impulse in a vacuum.\n:returns: A float of the estimated delta v", "code": "def get_estimated_delta_v(conn, vessel, sea_level_impulse=True):\n    \"\"\"\n    Gets the estimated delta-v of a given vessel. This is a rough approxmation\n    and may be less accurate the larger the vessel.\n    https://wiki.kerbalspaceprogram.com/wiki/Cheat_sheet\n    Δv = Isp * g0   * ln(total_mass/dry_mass)\n    For example:\n       = 400 * 9.81 * ln(3.72/1.72)\n       = 400 * 9.81 * ln(2.16)\n       = 400 * 9.81 * 0.771 = 3026.97 m/s\n    :params conn: A krpc connection\n    :params vessel: Vessel object\n    :params sea_level_impulse: Whether to use specific impulse at Kerbin sea-level\n    or specific impulse in a vacuum.\n    :returns: A float of the estimated delta v\n    \"\"\"\n    print(\"Calculating delta-v\")\n    kerbin_gravity = conn.space_center.bodies[\"Kerbin\"].surface_gravity\n    number_of_stages = vessel.control.current_stage\n    sum_delta_v = 0\n    total_mass = 0\n    previous_stage_total_mass_sum = 0\n    # Iterate through each part in the stage in reverse-stage order, so we\n    # can accumulate the mass as we go.\n    for stage in range(-2, number_of_stages):\n        engine_list = []\n        stage_delta_v = 0\n        stage_total_mass_sum = 0\n        stage_dry_mass_sum = 0\n        # For each part in the current stage\n        for stage_part in vessel.parts.in_decouple_stage(stage):\n            # Accumulate the mass so far\n            stage_total_mass_sum = stage_total_mass_sum + stage_part.mass / 1000\n            stage_dry_mass_sum = stage_dry_mass_sum + stage_part.dry_mass / 1000\n            # Sum up the total mass\n            total_mass = total_mass + stage_part.mass / 1000\n            if stage_part.engine:\n                engine_list.append(stage_part)\n        # After adding up the mass for parts in the stage, work out the delta v\n        # for this stage\n        for engine_part in engine_list:\n            if sea_level_impulse:\n                engine_impulse = engine_part.engine.kerbin_sea_level_specific_impulse\n            else:\n                engine_impulse = engine_part.engine.vacuum_specific_impulse\n            stage_delta_v = (\n                engine_impulse\n                * kerbin_gravity\n                * math.log(\n                    total_mass / (stage_dry_mass_sum + previous_stage_total_mass_sum)\n                )\n            )\n        # Sum the stage's delta-v\n        sum_delta_v = sum_delta_v + stage_delta_v\n        if len(vessel.parts.in_decouple_stage(stage)):\n            previous_stage_total_mass_sum = (\n                previous_stage_total_mass_sum + stage_total_mass_sum\n            )\n    return sum_delta_v\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:13Z", "size_bytes": 2570, "lines_of_code": 59, "inputs": ["conn", "vessel", "sea_level_impulse"], "restricted": false}
{"id": "429fed8d971c786e5ac0e090229c99e01eb67c5d1a6b38c37545ad992fa32760", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "helpers.py", "lang": "python", "name": "_auto_stage_thread", "description": "Automatically activate the next stage once the current stage's fuel is\nempty. Will skip past stages that don't have fuel (e.g. separation-only\nstages)", "code": "def _auto_stage_thread(connection, vessel):\n    \"\"\"\n    Automatically activate the next stage once the current stage's fuel is\n    empty. Will skip past stages that don't have fuel (e.g. separation-only\n    stages)\n    \"\"\"\n    while auto_stage_enabled:\n        fuel_in_current_stage = vessel.resources_in_decouple_stage(\n            stage=vessel.control.current_stage - 1, cumulative=False\n        )\n        if not fuel_in_current_stage.names:\n            print(\"No fuel in this stage - moving to next stage\")\n            vessel.control.activate_next_stage()\n        else:\n            print(f\"Fuel types in this stage: {fuel_in_current_stage.names}\")\n            fuel_in_current_stage_fuel_amount = connection.add_stream(\n                fuel_in_current_stage.amount, name=fuel_in_current_stage.names[0]\n            )\n            while fuel_in_current_stage_fuel_amount() > 0.1:\n                if auto_stage_enabled:\n                    pass\n                else:\n                    break\n\n            if auto_stage_enabled:\n                print(f\"{fuel_in_current_stage.names} empty - moving to next stage\")\n                vessel.control.activate_next_stage()\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:13Z", "size_bytes": 1165, "lines_of_code": 27, "inputs": ["connection", "vessel"], "restricted": false}
{"id": "8f6f54db01d87f2e61f8550f238fc9f4187b3e8094b115d7867775b43618015d", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "helpers.py", "lang": "python", "name": "enable_auto_stage", "description": "Enable auto staging. Starts a new thread to monitor the fuel in the current\nstage, and moves to the next stage when there's no fuel.", "code": "def enable_auto_stage(connection, vessel):\n    \"\"\"\n    Enable auto staging. Starts a new thread to monitor the fuel in the current\n    stage, and moves to the next stage when there's no fuel.\n    \"\"\"\n    global auto_stage_enabled\n    auto_stage_enabled = True\n    auto_stage_thread = threading.Thread(\n        target=_auto_stage_thread,\n        args=[connection, vessel],\n    )\n    auto_stage_thread.should_abort_immediately = True\n    auto_stage_thread.start()\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:13Z", "size_bytes": 462, "lines_of_code": 13, "inputs": ["connection", "vessel"], "restricted": false}
{"id": "a36ef73e9779d8c65e6e75cdfeb15cae86a860fb88c05e918b00adc97804ed51", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "helpers.py", "lang": "python", "name": "disable_auto_stage", "description": "Stop auto staging.", "code": "def disable_auto_stage():\n    \"\"\"\n    Stop auto staging.\n    \"\"\"\n    global auto_stage_enabled\n    auto_stage_enabled = False\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:13Z", "size_bytes": 126, "lines_of_code": 6, "restricted": false}
{"id": "11a6312073141dd1f9af6eb2f3c151e9dee7c4fc04b40e74184f9d0ca8f0d54f", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "mun.py", "lang": "python", "name": "kerbin_to_mun", "description": "Takes a given vessel currently in orbit with Kerbin and moves to orbit with\nthe Mun.\n:params connection: A krpc connection\n:params vessel: A vessel object\n:parmas target_orbit_altitude: A double of the target orbit altitude", "code": "def kerbin_to_mun(connection, vessel, target_orbit_altitude):\n    \"\"\"\n    Takes a given vessel currently in orbit with Kerbin and moves to orbit with\n    the Mun.\n    :params connection: A krpc connection\n    :params vessel: A vessel object\n    :parmas target_orbit_altitude: A double of the target orbit altitude\n    \"\"\"\n    start_time = datetime.now()\n    ut = connection.add_stream(getattr, connection.space_center, \"ut\")\n\n    # Target the Mun\n    connection.space_center.target_body = connection.space_center.bodies[\"Mun\"]\n\n    # Creates a manuever node, initially at the current position. If it doesn't\n    # encounter the Mun's sphere of influence, move the node further on in the\n    # orbit. Repeat this process until the manuever encounters the Mun.\n    # For estimated delta-v, see:\n    # https://wiki.kerbalspaceprogram.com/wiki/Cheat_sheet#Maps\n    estimated_mun_encounter_delta_v = 860\n    mun_node = vessel.control.add_node(\n        connection.space_center.ut,\n        prograde=estimated_mun_encounter_delta_v,\n    )\n    universal_time_increment_counter = 100\n    time_to_soi_change = float(\"nan\")\n    while math.isnan(time_to_soi_change):\n        # Returns float \"nan\" if there is no sphere of influence change\n        time_to_soi_change = mun_node.orbit.time_to_soi_change\n        if math.isnan(time_to_soi_change):\n            # Increment counter further into the future.\n            mun_node.ut += universal_time_increment_counter\n\n    # Face the direction of the manuever mun_node\n    vessel.auto_pilot.disengage()\n    vessel.auto_pilot.sas = True\n    vessel.control.rcs = True\n    # There seems to be a race condition of some sort where SAS pilot mode\n    # gets enabled, but doesn't switch to maneuver mode. Workaround here\n    # is just to keep trying until we've switched to maneuever mode.\n    while vessel.auto_pilot.sas_mode != vessel.auto_pilot.sas_mode.maneuver:\n        time.sleep(1)\n        vessel.auto_pilot.sas_mode = vessel.auto_pilot.sas_mode.maneuver\n\n    # Warp to manuever\n    time_to_mun_manuever = connection.add_stream(getattr, mun_node, \"time_to\")\n    print(f\"Manuever in {time_to_mun_manuever()} seconds\")\n    lead_time = 45\n    connection.space_center.warp_to((ut() + time_to_mun_manuever()) - lead_time)\n\n    while time_to_mun_manuever() >= 30:\n        pass\n\n    # Start burning in the direction of the manuever mun_node\n    print(\"Starting burn for Mun\")\n    while mun_node.remaining_delta_v > 5:\n        vessel.control.throttle = 1\n\n    # Finished burn\n    print(\"Manuever complete\")\n    vessel.control.throttle = 0\n    mun_node.remove()\n    # vessel.control.rcs = False\n    # vessel.auto_pilot.sas = False\n\n    # Warp to the Mun's periapsis\n    # First warp to the SOI change\n    time_to_mun_soi_change = connection.add_stream(\n        getattr, vessel.orbit, \"time_to_soi_change\"\n    )\n    buffer_time = 10\n    connection.space_center.warp_to((ut() + time_to_mun_soi_change()) + buffer_time)\n\n    # Face retrograde\n    while vessel.auto_pilot.sas_mode != vessel.auto_pilot.sas_mode.retrograde:\n        time.sleep(1)\n        vessel.auto_pilot.sas_mode = vessel.auto_pilot.sas_mode.retrograde\n\n    # Now warp to the Mun's periapsis\n    time_to_periapsis = connection.add_stream(\n        getattr, vessel.orbit, \"time_to_periapsis\"\n    )\n    lead_time = 75\n    connection.space_center.warp_to((ut() + time_to_periapsis()) - lead_time)\n\n    while time_to_periapsis() > 60:\n        pass\n\n    # Circularise the orbit by burning retrograde.\n    # The apoapsis readings start off as a minus value, and then switch to a\n    # positive, so we do two checks here. First check for when the apoapsis\n    # switches, and then compare against the higher value.\n    periapsis = connection.add_stream(getattr, vessel.orbit, \"periapsis_altitude\")\n    apoapsis = connection.add_stream(getattr, vessel.orbit, \"apoapsis_altitude\")\n\n    while periapsis() > apoapsis() * 0.99:\n        vessel.control.throttle = 1\n\n    # Apoapsis reading has switched\n    # The throttle is based on how close we are to the periapsis - i.e. increase\n    # the throttle the closer to the periapsis we are, decrease throttle the\n    # further away we are.\n    vessel.control.throttle = 0\n    while periapsis() < apoapsis() * 0.99:\n        max_time_to_periapsis = 30\n        min_time_to_periapsis = 20\n\n        # Adjust the throttle based on how close to the periapsis we are.\n        adjusted_throttle = 1 - (time_to_periapsis() - min_time_to_periapsis) / (\n            max_time_to_periapsis - min_time_to_periapsis\n        )\n        vessel.control.throttle = adjusted_throttle\n\n    # In stable orbit\n    vessel.control.rcs = False\n    vessel.auto_pilot.sas = False\n    vessel.control.throttle = 0\n    vessel.auto_pilot.disengage()\n\n    duration = datetime.now() - start_time\n    print(f\"Orbit achieved in {duration}\")\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:13Z", "size_bytes": 4821, "lines_of_code": 121, "inputs": ["connection", "vessel", "target_orbit_altitude"], "restricted": false}
{"id": "790a1ed319c5d037d1b4cc57eae3ba1cbef4abe857b32126d1166eaa91b34603", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "orbit.py", "lang": "python", "name": "launch", "description": "Launch a given vessel into orbit at a given target altitude.\n:params connection: A krpc connection\n:params vessel: A vessel object\n:params heading: The heading of the orbit\n:params target_altitude: The target apoapsis and periapsis altitude in meters", "code": "def launch(connection, vessel, heading, target_altitude):\n    \"\"\"\n    Launch a given vessel into orbit at a given target altitude.\n    :params connection: A krpc connection\n    :params vessel: A vessel object\n    :params heading: The heading of the orbit\n    :params target_altitude: The target apoapsis and periapsis altitude in meters\n    \"\"\"\n    # Set up telemetry streams\n    altitude = connection.add_stream(getattr, vessel.flight(), \"mean_altitude\")\n    apoapsis = connection.add_stream(getattr, vessel.orbit, \"apoapsis_altitude\")\n    periapsis = connection.add_stream(getattr, vessel.orbit, \"periapsis_altitude\")\n    time_to_apoapsis = connection.add_stream(getattr, vessel.orbit, \"time_to_apoapsis\")\n\n    # Setup heading, control and throttle\n    vessel.auto_pilot.engage()\n    vessel.auto_pilot.target_pitch_and_heading(90, heading)\n    vessel.control.throttle = 1\n\n    # Countdown...\n    print(\"3...\")\n    time.sleep(1)\n    print(\"2...\")\n    time.sleep(1)\n    print(\"1...\")\n    time.sleep(1)\n    print(\"Launch!\")\n    vessel.control.activate_next_stage()\n    start_time = datetime.now()\n\n    # When fuel is empty in the current stage, automatically move to the next\n    # one\n    helpers.enable_auto_stage(connection, vessel)\n\n    running = True\n    while running:\n        # Start gravity turn - we start pointing up (90 degrees) and gradually\n        # pitch until we're at 45 degrees.\n        min_altitude = 0\n        max_altitude = 10000\n        start_pitch = 90\n        end_pitch = 45\n        if apoapsis() < target_altitude and int(vessel.auto_pilot.target_pitch) != end_pitch:\n            adjusted_pitch = start_pitch - ((altitude() - min_altitude) / (\n                max_altitude - min_altitude\n            )) * end_pitch\n\n            vessel.auto_pilot.target_pitch = adjusted_pitch\n\n        # Approaching the target apoapsis altitude\n        if apoapsis() > target_altitude * 0.9:\n            print(f\"Approaching target apoapsis: {apoapsis()} / {target_altitude}\")\n            # Get rid of the solid boosters if they're still in use, as we're\n            # approaching the apoapsis\n            fuel_in_current_stage = vessel.resources_in_decouple_stage(\n                stage=vessel.control.current_stage - 1, cumulative=False\n            )\n            if \"SolidFuel\" in fuel_in_current_stage.names:\n                vessel.control.activate_next_stage()\n                solid_fuel_separated = True\n                print(\"Near target apoapsis - separating solid fuel boosters early\")\n            break\n\n    # Reduce throttle and boost until we reach the target orbit altitude\n    vessel.control.throttle = 0.25\n    while apoapsis() < target_altitude:\n        pass\n\n    # Reached target apoapsis - shut down engines\n    print(f\"Reached target apoapsis: {apoapsis()} / {target_altitude}\")\n    vessel.control.throttle = 0\n    vessel.auto_pilot.target_pitch = 0\n\n    # Circularise the orbit.\n    starting_periapsis = periapsis()\n    max_apoapsis = apoapsis() * 0.7\n    while periapsis() < apoapsis() * 0.99:\n        max_time_to_apoapsis = 25\n        min_time_to_apoapsis = 15\n\n        if time_to_apoapsis() <= max_time_to_apoapsis:\n            # Adjust the throttle - start at full throttle and gradually reduce\n            # as the periapsis matches the apoapsis.\n            adjusted_throttle = 1 - (periapsis() - starting_periapsis) / (\n                max_apoapsis - starting_periapsis\n            )\n            if adjusted_throttle > 0.1:\n                vessel.control.throttle = adjusted_throttle\n\n\n            # Adjust pitch based on how close we are to the apoapsis - i.e., pitch\n            # up by 10 degrees if we're close to the apoapsis, and pitch down by 10\n            # degrees the further away we are.\n            # Pitching up will \"move\" the apoapsis further away, while pitching down\n            # will \"move\" the apoapsis closer to us.\n            adjusted_pitch = -10 + (1 - (time_to_apoapsis() - min_time_to_apoapsis) / (\n                max_time_to_apoapsis - min_time_to_apoapsis\n            )) * 20\n\n            vessel.auto_pilot.target_pitch = adjusted_pitch\n\n    # In stable orbit\n    vessel.control.throttle = 0\n    vessel.control.rcs = False\n    vessel.auto_pilot.disengage()\n    helpers.disable_auto_stage()\n    launch_duration = datetime.now() - start_time\n    print(f\"Stable orbit achieved in {launch_duration}\")\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:14Z", "size_bytes": 4359, "lines_of_code": 108, "inputs": ["connection", "vessel", "heading", "target_altitude"], "restricted": false}
{"id": "eee0df09874b4d5a5943027d6cab8404ee7bd0546bf997f3ee54a9a2711cfa0a", "repo": "https://github.com/AlanCunningham/krpc-scripts", "commit": "c1a363faaaad84b17e19151692f930c887b2281e", "path": "orbit.py", "lang": "python", "name": "CONST_BLOCK", "description": "Top-level constants: HEADING_NORTH, HEADING_EAST, HEADING_SOUTH, HEADING_WEST", "code": "HEADING_NORTH = 0\nHEADING_EAST = 90\nHEADING_SOUTH = 180\nHEADING_WEST = 270\n", "categories": ["const"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T04:58:14Z", "size_bytes": 75, "lines_of_code": 4, "restricted": false}
{"id": "1fcfc3ca08ea31fcebc6b35e5447d732ff2d562e49a7d07df1b2d2c5319d9827", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "munTransfer.py", "lang": "python", "name": "engage", "description": "Extracted function engage from munTransfer.py", "code": "def engage(vessel, space_center, connection):\n    vessel.control.rcs = True\n    fairings = vessel.parts.fairings\n    for fairing in fairings:\n        fairing.jettison()\n    vessel.control.antennas = True  # Deploy antennas\n\n\n    destSemiMajor = space_center.bodies[\"Mun\"].orbit.semi_major_axis\n    hohmannSemiMajor = destSemiMajor / 2\n    neededPhase = 2 * math.pi * (1 / (2 * (destSemiMajor ** 3 / hohmannSemiMajor ** 3) ** (1 / 2)))\n    optimalPhaseAngle = 180 - neededPhase * 180 / math.pi  # In degrees; for mun, mun should be ahead of vessel\n\n    # Get current phase angle\n    phaseAngle = 1080  # Random default value\n    vessel.auto_pilot.engage()\n    vessel.auto_pilot.reference_frame = vessel.orbital_reference_frame\n    vessel.auto_pilot.target_direction = (0.0, 1.0, 0.0)  # Point pro-grade\n\n    angleDec = False  # Whether or not phase angle is decreasing; used to make sure mun is ahead of vessel\n    prevPhase = 0\n    while abs(phaseAngle - optimalPhaseAngle) > 1 or not angleDec:\n        bodyRadius = space_center.bodies[\"Mun\"].orbit.radius\n        vesselRadius = vessel.orbit.radius\n\n        sleep(1)\n\n        bodyPos = space_center.bodies[\"Mun\"].orbit.position_at(space_center.ut, space_center.bodies[\"Mun\"].reference_frame)\n        vesselPos = vessel.orbit.position_at(space_center.ut, space_center.bodies[\"Mun\"].reference_frame)\n\n        bodyVesselDistance = ((bodyPos[0] - vesselPos[0])**2 + (bodyPos[1] - vesselPos[1])**2 + (bodyPos[2] - vesselPos[2])**2)**(1/2)\n\n        try:\n            phaseAngle = math.acos((bodyRadius**2 + vesselRadius**2 - bodyVesselDistance**2) / (2 * bodyRadius * vesselRadius))\n        except:\n            print(\"Domain error! Cannot calculate. Standby...\")\n            continue  # Domain error\n        phaseAngle = phaseAngle * 180 / math.pi\n\n        if prevPhase - phaseAngle > 0:\n            angleDec = True\n            if abs(phaseAngle - optimalPhaseAngle) > 20:\n                space_center.rails_warp_factor = 2\n            else:\n                space_center.rails_warp_factor = 0\n        else:\n            angleDec = False\n            space_center.rails_warp_factor = 4\n\n\n        prevPhase = phaseAngle\n\n        print(\"Phase:\", phaseAngle)\n\n\n    # Use vis-viva to calculate deltaV required to raise orbit to that of the moon\n    GM = vessel.orbit.body.gravitational_parameter# Get gravitation parameter (GM) for Kerbin\n    r = vessel.orbit.radius\n    a = vessel.orbit.semi_major_axis\n\n    initialV = (GM * ((2/r) - (1/a)))**(1/2)\n\n    a = (space_center.bodies[\"Mun\"].orbit.radius + vessel.orbit.radius) / 2\n\n    finalV = (GM * ((2/r) - (1/a)))**(1/2)\n\n    deltaV = finalV - initialV\n    print(\"Maneuver Now With DeltaV:\", deltaV)\n\n    actualDeltaV = 0\n    vessel.control.throttle = 1.0\n    while(deltaV > actualDeltaV):  # Complete maneuver node with <= 2% inaccuracy\n        sleep(0.15)\n        r = vessel.orbit.radius\n        a = vessel.orbit.semi_major_axis\n        actualDeltaV = (GM * ((2/r) - (1/a)))**(1/2) - initialV\n        print(\"DeltaV so far: \", actualDeltaV, \"out of needed\", deltaV)\n    vessel.control.throttle = 0\n    vessel.auto_pilot.disengage()\n\n    print(\"We should have a mun encounter!\")\n    print()\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 3177, "lines_of_code": 82, "inputs": ["vessel", "space_center", "connection"], "restricted": false}
{"id": "8c45b789a873cc7a086035fb76be81371e6c0bfefc6c30e34e231df53b513ec9", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "orbitMun.py", "lang": "python", "name": "engage", "description": "Extracted function engage from orbitMun.py", "code": "def engage(vessel, space_center, connection):\n    vessel.control.rcs = True\n    vessel.control.antennas = True\n    vessel.auto_pilot.engage()\n    vessel.auto_pilot.reference_frame = vessel.surface_velocity_reference_frame\n    vessel.auto_pilot.target_direction = (0.0, -1.0, 0.0)  # Point retro-grade surface\n\n    vessel.auto_pilot.wait()  # Wait until pointing retro-grade\n    time_to_warp = vessel.orbit.time_to_periapsis\n    space_center.warp_to(space_center.ut + time_to_warp - 30)  # 30 seconds from periapsis\n\n    vessel.auto_pilot.wait()\n    print(\"Fire engine...\")\n    # Stream surface velocity\n    flight = vessel.flight(vessel.orbit.body.reference_frame)\n    surfaceSpeed = connection.add_stream(getattr, flight, 'speed')\n\n    while surfaceSpeed() > 1.0:\n        vessel.control.throttle = 1 - (0.95 / 1.01**surfaceSpeed())\n\n        error = (vessel.auto_pilot.pitch_error**2 + vessel.auto_pilot.heading_error**2)**(1/2)\n        if error > 3:\n            vessel.control.throttle = 0\n            while error > 1.2:\n                error = (vessel.auto_pilot.pitch_error ** 2 + vessel.auto_pilot.heading_error ** 2) ** (1 / 2)\n                print(\"Direction error:\", vessel.auto_pilot.error)\n                sleep(0.25)\n\n    vessel.control.throttle = 0\n    print(\"Prepared for landing...\")\n    print()", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 1309, "lines_of_code": 31, "inputs": ["vessel", "space_center", "connection"], "restricted": false}
{"id": "b3e7df1e3644e7100bad7ef9d63617e355806524326cb5ee9db0f9c02de80dc2", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "stageMonitor.py", "lang": "python", "name": "monitor", "description": "Extracted function monitor from stageMonitor.py", "code": "def monitor(vessel):\n    sleep(3)\n    while True:\n        resources = vessel.resources_in_decouple_stage(vessel.control.current_stage - 1, False)\n\n        solidFuel = resources.amount(\"SolidFuel\")\n        liquidFuel = resources.amount(\"LiquidFuel\")\n\n        if solidFuel == 0 and liquidFuel == 0:\n            vessel.control.activate_next_stage()  # Activates stage when fuel depleted\n            print()\n            print(\"Stage decoupled!\")\n            print()\n\n        sleep(0.2)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 482, "lines_of_code": 15, "inputs": ["vessel"], "restricted": false}
{"id": "5b5b0f1667d3cd31ed91bf02d202421792f0e21fb5dde136c7a5d32f034c5a1e", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "entryBurn", "description": "T30 Reliant Engine: Burns 8.68 oxidizer and 7.11 fuel per second at max throttle\nTotal fuel weight is 2 tons and fuel lasts approx. 25.32 seconds\nMass lost at a rate of 0.078945 tons per second - used in calculation of force of gravity\nand subsequently work needed to land", "code": "def entryBurn(vessel, space_center):\n    \"\"\"T30 Reliant Engine: Burns 8.68 oxidizer and 7.11 fuel per second at max throttle\n    Total fuel weight is 2 tons and fuel lasts approx. 25.32 seconds\n    Mass lost at a rate of 0.078945 tons per second - used in calculation of force of gravity\n    and subsequently work needed to land\"\"\"\n\n    fuel_mass_burn_rate = 0.078945  # Full throttle\n    print(vessel.flight().terminal_velocity)\n    t.sleep(5)\n    terminal_velocity = 320\n\n    # Calculate work needed to land the vessel\n    time = 0\n    mass = vessel.mass\n    gravity_acceleration = vessel.orbit.body.surface_gravity  # Approximation but fine for heights close to the surface\n\n    f_grav = mass * gravity_acceleration  # Force of gravity acting on vessel as a function of time\n    f_thrust = vessel.available_thrust  # Force of max available thrust\n\n    f_net = f_thrust - f_grav  # Net force if object thrusts as a function of time (up defined as positive)\n\n    '''Run simulation to determine if it will land'''\n\n    t_vals = []\n    acceleration_vals = []\n\n    while vessel.available_thrust == 0:\n        pass\n    initial_ut = space_center.ut\n\n\n\n    while vessel.available_thrust > 0:\n\n        time = 0\n        mass = vessel.mass\n        gravity_acceleration = vessel.orbit.body.surface_gravity  # Approximation but fine for heights close to the surface\n\n        f_grav = mass * gravity_acceleration  # Force of gravity acting on vessel as a function of time\n        f_thrust = vessel.available_thrust  # Force of max available thrust\n\n        curr_ut = space_center.ut\n\n        f_net = f_thrust - f_grav  # Net force if object thrusts as a function of time (up defined as positive)\n\n        print(\"Force of Gravity:\\t\", f_grav)\n        print(\"Thrust:\\t\", f_thrust)\n        print(\"Net force:\\t\", f_net)\n        print(\"Acceleration:\\t\", f_net/mass)\n        print(\"Time:\\t\", curr_ut-initial_ut)\n        print(\"Mass:\\t\", mass)\n        print()\n\n        #t_vals.append(curr_ut - initial_ut)\n        #acceleration_vals.append(f_net/mass)\n\n        #t.sleep(0.02)\n\n    '''with open(\"acceleration.csv\", 'w+') as file:\n        for i in range(len(t_vals)):\n            line = str(t_vals[i]) + \",\" + str(acceleration_vals[i]) + \"\\n\"\n            file.write(line)'''\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 2255, "lines_of_code": 62, "inputs": ["vessel", "space_center"], "restricted": false}
{"id": "1dad763abdaf447ac3dac0171024015c3464e3e576da82d7df2aee7a6034844c", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "begin_landing", "description": "Extracted function begin_landing from startLanding.py", "code": "def begin_landing(vessel, space_center, connection):\n    deployed = False\n    hybrid_frame = space_center.ReferenceFrame.create_hybrid(vessel.reference_frame, rotation=vessel.orbit.body.non_rotating_reference_frame)\n    #height_prediction = connection.drawing.add_text(\"Height Prediction: Null\", hybrid_frame, (-2,0,0), (1.57,3.14,3.14,0))\n    #time_prediction = connection.drawing.add_text(\"Time Prediction: Null\", hybrid_frame, (-1,0,2),(1.57,3.14,3.14,0))\n    #velocity_prediction = connection.drawing.add_text(\"Velocity Prediction: Null\", hybrid_frame, (-3,0,2), (1.57,3.14,3.14,0))\n    # Start of script\n    # TODO: Provide very slight corrections to cancel all horizontal velocity/add guidance\n\n    # Get current body\n    current_body = vessel.orbit.body\n\n    landing_reference_frame = space_center.ReferenceFrame.create_hybrid(\n        position=current_body.reference_frame, rotation=vessel.surface_reference_frame)\n    flight = vessel.flight(landing_reference_frame)\n\n    while True:\n        # Finds initial time to begin burn\n        #print(\"Mass\", vessel.mass)\n        time = velocity_intercept(vessel, -flight.velocity[0])\n        #print(\"Initial height:\", flight.surface_altitude)\n        height = height_intercept(vessel, time, -flight.velocity[0], flight.surface_altitude)\n        print(\"Predicted final height:\", height, \"with \", time, \"second burn\")\n        temp = \"Height Prediction: \" + str(height)\n        #height_prediction.content = temp\n        temp = \"Time Prediction: \" + str(time)\n        #time_prediction.content = temp\n\n        if height < 1000 and time < 9 and not deployed:\n            deployed = True\n            vessel.control.legs = True\n\n        if height < 8:\n            break\n\n    # Fire engine at max throttle\n    initial_time_prediction = time\n    print(\"FIRING ENGINE\")\n    vessel.control.throttle = 1\n    t.sleep(0.1)\n    initial_time = space_center.ut\n    new_time = time\n    # Run calculations in an attempt to keep vessel on track for landing\n    #while abs(flight.surface_altitude) > 700:\n    #    pass\n    while abs(flight.velocity[0]) > 1:\n\n        if flight.surface_altitude < 30:\n            print(\"Disengaging autopilot for final touchdown...\")\n            #vessel.auto_pilot.reference_frame = vessel.surface_reference_frame\n            #vessel.auto_pilot.engage()\n            #vessel.auto_pilot.target_pitch_and_heading(90, 90)\n            vessel.auto_pilot.disengage()\n\n        time = velocity_intercept(vessel, -flight.velocity[0], 0.01, vessel.control.throttle)\n        height = height_intercept(vessel, time, -flight.velocity[0], flight.surface_altitude, vessel.control.throttle)\n        temp = \"Height Prediction: \" + str(height)\n        #height_prediction.content = temp\n        temp = \"Time Prediction: \" + str(time)\n        #time_prediction.content = temp\n\n        if height > 3.5:\n            vessel.control.throttle -= 0.005\n        elif height < 0.5:\n            vessel.control.throttle += 0.004\n\n        if time < 9 and not deployed:\n            print(\"Deploying landing legs...\")\n            deployed = True\n            vessel.control.legs = True\n\n    vessel.auto_pilot.engage()\n    vessel.auto_pilot.target_pitch_and_heading(90, 90)  # Attempt to make rocket stand up straight\n    vessel.control.throttle = 0\n    print(\"Time to burn:\", space_center.ut - initial_time)\n    print(\"Expected:\", initial_time_prediction)\n    print()\n    print(\"Final height:\", flight.surface_altitude)\n    print(\"Landed! Exiting...\")\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 3476, "lines_of_code": 79, "inputs": ["vessel", "space_center", "connection"], "restricted": false}
{"id": "43d135a3b4e5a8d81fd6cb27746dd8def85598a49b8f628b443290247385d425", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "velocity_intercept", "description": "Finds how long it will take for velocity to equal zero\nOnly considers times between 0 and 92 seconds", "code": "def velocity_intercept(vessel, initial_velocity, tolerance=0.01, thrust_multiplier=1):\n    \"\"\"Finds how long it will take for velocity to equal zero\n    Only considers times between 0 and 92 seconds\"\"\"\n    current_body = vessel.orbit.body\n    initial_t = t.time()\n    if initial_velocity > 0:\n        initial_velocity *= -1\n    time = 10\n    thrust = thrust_multiplier * determine_surface_isp_ratio(current_body, vessel.flight(current_body.reference_frame), vessel.parts.engines) * (vessel.max_vacuum_thrust/1000)\n    # TODO: Adjust for current direction of vessel (not needed for nearly vertical entry)\n    # Adjust for direction of retrograde\n    direction = vessel.flight(vessel.surface_reference_frame).direction\n    #print(direction)\n    multiplier = direction[0] #abs(direction[1] / (direction[0] ** 2 + direction[1] ** 2 + direction[2] ** 2) ** 0.5)\n    #print(\"Multiplier:\", multiplier)\n    thrust = thrust * abs(multiplier)\n\n    gravity_accel = current_body.surface_gravity\n    mass = vessel.mass/1000\n    mass_burn_rate = approximate_mass_burn_rate(vessel)\n\n    velocity = 1\n\n    # Perform binary search on velocity function to find time to burn\n    upper_bound = 92\n    lower_bound = 0\n    num_iterations = 0\n    while abs(velocity) > tolerance and time > 0.0001 and time < 91.99:\n        velocity = (-thrust / mass_burn_rate) * log(mass - mass_burn_rate * time) \\\n                   - gravity_accel * time + initial_velocity + (thrust / mass_burn_rate) * log(mass)\n\n        num_iterations += 1\n\n        if velocity < 0:\n            lower_bound = time\n            time = (time + upper_bound) / 2\n        elif velocity > 0:\n            upper_bound = time\n            time = (time + lower_bound) / 2\n\n    if num_iterations == 0:\n        print(\"Big issues!\")  # we don't have issues anymore, redundant\n        print(velocity)\n        print(time)\n        print(thrust_multiplier)\n        print()\n    return time\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 1919, "lines_of_code": 47, "inputs": ["vessel", "initial_velocity", "tolerance", "thrust_multiplier"], "restricted": false}
{"id": "74c96acfb9923c1a6d7dfa03101b178ac7671acaae81645324217b386e561e1a", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "height_intercept", "description": "Gets the predicted final height of the vessel if the burn began now and ran for 'time' seconds", "code": "def height_intercept(vessel, time, initial_velocity, current_height, thrust_multiplier = 1):\n    \"\"\"Gets the predicted final height of the vessel if the burn began now and ran for 'time' seconds\"\"\"\n    current_body = vessel.orbit.body\n\n    thrust = thrust_multiplier * determine_surface_isp_ratio(current_body, vessel.flight(current_body.reference_frame), vessel.parts.engines) * (vessel.max_vacuum_thrust/1000)\n\n    # Adjust for direction of retrograde\n    direction = vessel.flight(vessel.surface_reference_frame).direction\n    multiplier = direction[0]\n    #print(\"Multiplier:\", multiplier)\n    thrust = thrust * abs(multiplier)\n\n    gravity_accel = current_body.surface_gravity\n    mass = vessel.mass/1000\n    mass_burn_rate = approximate_mass_burn_rate(vessel)\n\n    if initial_velocity > 0:\n        initial_velocity *= -1\n\n    final_height = (-1 / mass_burn_rate**2) * (\n        mass_burn_rate * initial_velocity * (mass - mass_burn_rate * time) + thrust * log(mass) * (mass - mass_burn_rate * time)\n        + gravity_accel * (((mass - mass_burn_rate * time)**2) / 2 - mass * (mass - mass_burn_rate * time))\n        - thrust * (mass * log(mass - mass_burn_rate * time) - mass_burn_rate * time * log(mass - mass_burn_rate * time) - mass + mass_burn_rate * time)\n    ) + current_height + (1/mass_burn_rate**2) * (\n        mass_burn_rate * initial_velocity * mass + thrust * log(mass) * mass\n        + gravity_accel * ((mass**2) / 2 - mass**2)\n        - thrust * (mass * log(mass) - mass)\n    )\n\n    return final_height\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 1522, "lines_of_code": 30, "inputs": ["vessel", "time", "initial_velocity", "current_height", "thrust_multiplier"], "restricted": false}
{"id": "ad73e124fd9cb137d53bd01f437219f6a812d875b71db7f25733d716e95ebcc7", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "velocity_function", "description": "velocity function as function of time", "code": "def velocity_function(vessel, initial_velocity, time, thrust):\n    \"\"\"velocity function as function of time\"\"\"\n    current_body = vessel.orbit.body\n\n    if initial_velocity > 0:\n        initial_velocity *= -1\n\n    gravity_accel = current_body.surface_gravity\n    mass = vessel.mass/1000\n    mass_burn_rate = approximate_mass_burn_rate(vessel)\n    try:\n        velocity = (-thrust / mass_burn_rate) * log(mass - mass_burn_rate * time) \\\n                   - gravity_accel * time + initial_velocity + (thrust / mass_burn_rate) * log(mass)\n    except:\n        velocity = 0\n    return velocity\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 590, "lines_of_code": 16, "inputs": ["vessel", "initial_velocity", "time", "thrust"], "restricted": false}
{"id": "1e43a3d63b1c91308fefc2270eefb5a2b56195557eccb8e3c4c97490fd50995a", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "height_function", "description": "height function as a function of time", "code": "def height_function(vessel, time, initial_velocity, current_height, thrust):\n    \"\"\"height function as a function of time\"\"\"\n    current_body = vessel.orbit.body\n\n    gravity_accel = current_body.surface_gravity\n    mass = vessel.mass / 1000\n    mass_burn_rate = approximate_mass_burn_rate(vessel)\n\n    if initial_velocity > 0:\n        initial_velocity *= -1\n\n    final_height = (-1 / mass_burn_rate ** 2) * (\n            mass_burn_rate * initial_velocity * (mass - mass_burn_rate * time) + thrust * log(mass) * (\n                mass - mass_burn_rate * time)\n            + gravity_accel * (((mass - mass_burn_rate * time) ** 2) / 2 - mass * (mass - mass_burn_rate * time))\n            - thrust * (mass * log(mass - mass_burn_rate * time) - mass_burn_rate * time * log(\n        mass - mass_burn_rate * time) - mass + mass_burn_rate * time)\n    ) + current_height + (1 / mass_burn_rate ** 2) * (\n                           mass_burn_rate * initial_velocity * mass + thrust * log(mass) * mass\n                           + gravity_accel * ((mass ** 2) / 2 - mass ** 2)\n                           - thrust * (mass * log(mass) - mass)\n                   )\n    #print(\"Height: \", final_height)\n    return final_height\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 1212, "lines_of_code": 24, "inputs": ["vessel", "time", "initial_velocity", "current_height", "thrust"], "restricted": false}
{"id": "1d030a1261eeab1d713ecc24ca20488e1e043ab9f93e241dc73f4fd674a895a0", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "approximate_mass_burn_rate", "description": "how fast the vessel burns mass\nonly calculates for reliant, terrier, and swivel engines currently", "code": "def approximate_mass_burn_rate(vessel):\n    \"\"\"how fast the vessel burns mass\n    only calculates for reliant, terrier, and swivel engines currently\"\"\"\n    mass_burn_rate = 0\n\n    engines = vessel.parts.engines\n    for engine in engines:\n        if engine.active or engine.available_thrust > 0:\n            if engine.part.name == \"liquidEngine\":\n                # Reliant Engine\n                mass_burn_rate += 0.078926\n            elif engine.part.name == \"liquidEngine3.v2\" or engine.part.name == \"liquidEngine3\":\n                # Terrier Engine\n                mass_burn_rate += 0.017734\n            elif engine.part.name == \"liquidEngine2\":\n                # Swivel Engine\n                mass_burn_rate += 0.068512\n    return mass_burn_rate\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 749, "lines_of_code": 18, "inputs": ["vessel"], "restricted": false}
{"id": "a13dad05d0b51f29364e3d1769bf1ea6daf951ddad745610f1a6fb57bb97d286", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "startLanding.py", "lang": "python", "name": "determine_surface_isp_ratio", "description": "Determines ratio of specific impulse at surface level to specific impulse in a vacuum for active engines", "code": "def determine_surface_isp_ratio(body, flight, engines):\n    \"\"\"Determines ratio of specific impulse at surface level to specific impulse in a vacuum for active engines\"\"\"\n\n    engine = None\n    isp = 0\n    for e in engines:\n        if e.active or e.available_thrust > 0:\n            engine = e\n\n    # Uses up to sixth order polynomial to approximate isp as function of pressure (very good approximation in most cases)\n    if body.has_atmosphere:\n        pressure = body.pressure_at(0) / 101325  # Convert from pascals to atm\n        if engine.part.name == \"liquidEngine\":\n            # Reliant Engine\n            isp = 0  # TODO: Find approximate isp function experimentally\n        elif engine.part.name == \"liquidEngine3.v2\" or engine.part.name == \"liquidEngine3\":\n            # Terrier Engine\n            if pressure < 3:\n                isp = -1.8606 * pressure**6 + 25.868 * pressure**5 - 133.61 * pressure**4 + 300.47 * pressure**3 - 202.47 * pressure**2 - 246.61 * pressure + 344.87\n            else:\n                isp = 0\n\n        elif engine.part.name == \"liquidEngine2\":\n            # Swivel Engine\n            isp = -0.8236 * pressure**3 + 8.534 * pressure**2 - 77.194 * pressure + 320.14\n\n        return isp / engine.vacuum_specific_impulse  # No wiggle room needed because of drag\n    else:\n        return 0.99  # Will get vacuum isp with no atmosphere, so ratio is 1 (0.99 to give a little wiggle room on landing)", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 1429, "lines_of_code": 29, "inputs": ["body", "flight", "engines"], "restricted": false}
{"id": "682c87e2cf0366c3dde39737bd8d7447aa4ec0a00b954b5fc6447ab8c652c003", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "targetLandingSite.py", "lang": "python", "name": "predict_impact_coordinates", "description": "# Predict landing trajectory", "code": "def predict_impact_coordinates(connection, spacecenter, vessel, flight):\n    acceleration = vessel.orbit.body.surface_gravity\n    velocity0_z, velocity0_y, velocity0_x = flight.velocity\n    height0 = flight.surface_altitude\n    lat0 = flight.latitude\n    long0 = flight.longitude\n\n    # Determines difference between current latitude, longitude and the impact latitude, longitude\n    # Uses trigonometry (factoring in height of vessel, etc)\n\n    #TEST: Draw vector to launch pad\n    print(lat0, long0)\n    a = flight.elevation - flight.surface_altitude + vessel.orbit.body.equatorial_radius\n    b = vessel.orbit.body.surface_height(-0.09716857406266075, -74.55768875892863) + vessel.orbit.body.equatorial_radius\n\n    height_difference = vessel.orbit.body.surface_height(-0.09716857406266075, -74.55768875892863) - flight.elevation + flight.surface_altitude\n    latitude_difference = (flight.latitude - (-0.09716857406266075)) * math.pi / 180\n    longitude_difference = (flight.longitude - (-74.55768875892863)) * math.pi / 180\n\n    north_distance = (a**2 + b**2 - 2*a*b*math.cos(latitude_difference))**(1/2)\n    east_distance = (a**2 + b**2 - 2*a*b*math.cos(longitude_difference))**(1/2)\n\n    print(east_distance)\n    print(north_distance)\n    print(height_difference)\n    to_launch_pad = connection.drawing.add_line((0,0,0), (height_difference-height_difference, -north_distance, -east_distance), vessel.surface_reference_frame)\n    to_launch_pad.thickness = 3\n\n    while True:\n        a = -flight.elevation + vessel.orbit.body.equatorial_radius\n        b = -vessel.orbit.body.surface_height(-0.09716857406266075,\n                                             -74.55768875892863) + vessel.orbit.body.equatorial_radius\n\n        height_difference = vessel.orbit.body.surface_height(-0.09716857406266075, -74.55768875892863) - flight.elevation - flight.surface_altitude\n        latitude_difference = (flight.latitude - (-0.09716857406266075)) * math.pi / 180\n        longitude_difference = (flight.longitude - (-74.55768875892863)) * math.pi / 180\n\n        #If the vessel is over the sea\n        if flight.elevation < 0:\n            height_difference += flight.elevation\n\n        north_distance = (a ** 2 + b ** 2 - 2 * a * b * math.cos(latitude_difference)) ** (1 / 2)\n        east_distance = (a ** 2 + b ** 2 - 2 * a * b * math.cos(longitude_difference)) ** (1 / 2)\n\n        if latitude_difference > 0:\n            north_distance *= -1\n        if longitude_difference > 0:\n            east_distance *= -1\n        if height_difference > 0:\n            height_difference += 8\n        else:\n            height_difference += 8\n        print(vessel.orbit.body.surface_height(-0.09716857406266075, -74.55768875892863))\n        print(-flight.elevation)\n        print(-flight.surface_altitude)\n        print(to_launch_pad.end)\n        print()\n        to_launch_pad.end = (height_difference, north_distance, east_distance)\n        time.sleep(0.01)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 2938, "lines_of_code": 59, "inputs": ["connection", "spacecenter", "vessel", "flight"], "restricted": false}
{"id": "aceb905074a620ccfe30b3557527029b4087df56cab76f34cfab8ddea529d6b4", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "testingTools.py", "lang": "python", "name": "determine_mass_burn_rate", "description": "Extracted function determine_mass_burn_rate from testingTools.py", "code": "def determine_mass_burn_rate(space_center, vessel):\n    times = []\n    masses = []\n    initial_time = space_center.ut\n    print(\"Started.\")\n    while vessel.thrust > 0:\n        times.append(space_center.ut - initial_time)\n        masses.append(vessel.mass)\n        t.sleep(0.05)\n        print(\"Thrust:\", vessel.thrust)\n\n    # Write to csv\n    filename = vessel.parts.engines[0].part.name + \"_burn_rate.csv\"\n    with open(filename, 'w+') as file:\n        for i in range(len(times)):\n            line = str(times[i]) + \",\" + str(masses[i]) + \"\\n\"\n            file.write(line)\n            print(\"Line\", i, \"written.\")\n    print(\"Mass burn rate determined. Use produced csv.\")\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 673, "lines_of_code": 19, "inputs": ["space_center", "vessel"], "restricted": false}
{"id": "60ad1af216842e86d4af2bad55432982b2a9028e50418d376516216a58818e51", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "testingTools.py", "lang": "python", "name": "isp_vs_pressure", "description": "Extracted function isp_vs_pressure from testingTools.py", "code": "def isp_vs_pressure(space_center, vessel, flight):\n\n    current_body = vessel.orbit.body\n    atmospheric_pressures = []\n    isps = []\n\n    # Get the engine to investigate\n    engine = vessel.parts.engines[0]\n    engine_name = engine.part.name\n    vessel.control.throttle = 0.01\n    while len(vessel.parts.engines) > 0:\n        atmospheric_pressures.append(current_body.pressure_at(flight.mean_altitude))\n        isps.append(engine.specific_impulse)\n        t.sleep(0.02)\n    vessel.control.throttle = 0\n\n    filename = engine_name + \"_isp_vs_pressure\"\n    with open(filename, 'w+') as file:\n        for i in range(len(isps)):\n            line = str(atmospheric_pressures[i]) + \",\" + str(isps[i]) + \"\\n\"\n            file.write(line)\n    print(\"ISP curve created successfully for\", engine_name)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 793, "lines_of_code": 22, "inputs": ["space_center", "vessel", "flight"], "restricted": false}
{"id": "cc6cd8a7b23e04deb41e7723512be5583be035df82224d4dcb6deb56c4bf932e", "repo": "https://github.com/alexlabbane/kRPC-mun-mission", "commit": "b4d08523742b9dbc82d9f072d32bf4da97838a62", "path": "toLKO.py", "lang": "python", "name": "engage", "description": "Sends vessel to orbit 75 x 70km in prep for transfer burn", "code": "def engage(vessel, space_center, connection, ascentProfileConstant=1.25):\n    \"\"\"Sends vessel to orbit 75 x 70km in prep for transfer burn\"\"\"\n    vessel.control.rcs = True\n\n    vessel.control.throttle = 1\n\n    apoapsisStream = connection.add_stream(getattr, vessel.orbit, 'apoapsis_altitude')\n\n    vessel.auto_pilot.engage()\n    vessel.auto_pilot.target_heading = 90\n\n    # Get to proper apoapsis/complete gravity turn\n    while apoapsisStream() < 75000:\n        # Collect values\n        targetPitch = 90 - ((90/(75000**ascentProfileConstant))*(apoapsisStream()**ascentProfileConstant))\n        print(\"Current target pitch:\", targetPitch, \"with apoapsis\", apoapsisStream())\n\n        # Set autopilot\n        vessel.auto_pilot.target_pitch = targetPitch\n\n        sleep(0.1)\n\n    vessel.control.throttle = 0\n    timeToApoapsisStream = connection.add_stream(getattr, vessel.orbit, 'time_to_apoapsis')\n    periapsisStream = connection.add_stream(getattr, vessel.orbit, 'periapsis_altitude')\n    # Now, wait and perform circularization burn\n    while(timeToApoapsisStream() > 22):\n        if(timeToApoapsisStream() > 60):\n            space_center.rails_warp_factor = 4\n        else:\n            space_center.rails_warp_factor = 0\n\n        sleep(0.5)\n\n    vessel.control.throttle = 0.5\n    lastUT = space_center.ut\n    lastTimeToAp = timeToApoapsisStream()\n    while(periapsisStream() < 70500):\n        sleep(0.2)\n        timeToAp = timeToApoapsisStream()\n        UT = space_center.ut\n        deltaTimeToAp = (timeToAp - lastTimeToAp) / (space_center.ut - lastUT)\n\n        print(\"Estimated change in time to apoapsis per second:\", deltaTimeToAp)\n\n        if deltaTimeToAp < -0.3:\n            vessel.control.throttle += 0.03\n        elif deltaTimeToAp < -0.1:\n            vessel.control.throttle += 0.01\n\n        if deltaTimeToAp > 0.2:\n            vessel.control.throttle -= 0.03\n        elif deltaTimeToAp > 0:\n            vessel.control.throttle -= 0.01\n\n        lastTimeToAp = timeToApoapsisStream()\n        lastUT = space_center.ut\n\n    vessel.control.throttle = 0\n    print(\"Apoapsis: \", apoapsisStream())\n    print(\"Periapsis: \", periapsisStream())\n    print(\"Orbit achieved!\")\n    print()\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:00:48Z", "size_bytes": 2189, "lines_of_code": 63, "inputs": ["vessel", "space_center", "connection", "ascentProfileConstant"], "restricted": false}
{"id": "b27a282bd7708931b18afb65422ffd2493d0f721f2e8c44d549f5e8ad4b22e81", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.setGains", "description": "Extracted function flightControl.setGains from FlightControl.py", "code": "    def setGains(self, Pgain, Igain, Dgain):\n        self.pid.setPgain(Pgain)\n        self.pid.setIgain(Igain)\n        self.pid.setDgain(Dgain)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 144, "lines_of_code": 4, "inputs": ["self", "Pgain", "Igain", "Dgain"], "restricted": false}
{"id": "860348a936cc1f2ef03080a57c2ec3a788ccc7a20724000a8910805ecd842fdf", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.__init__", "description": "Extracted function flightControl.__init__ from FlightControl.py", "code": "    def __init__(self, pidController, conn):\n        self.pid = pidController\n        self.vessel = conn.space_center.active_vessel\n        self.vessel.control.sas = True\n        self.vessel.control.rcs = True\n        self.flightInfo = self.vessel.flight()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 257, "lines_of_code": 6, "inputs": ["self", "pidController", "conn"], "restricted": false}
{"id": "621d1574a537a621f72fd36d57c181e5dfa373c14167c6f845d952f85786e15d", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.resetPID", "description": "Extracted function flightControl.resetPID from FlightControl.py", "code": "    def resetPID(self):\n        self.pid.resetPID()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 52, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "c4727588644bc042ca16a733fa6f2daf3a4f25de9f281ac077da6cd6fdcfc493", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.beginLaunch", "description": "Extracted function flightControl.beginLaunch from FlightControl.py", "code": "    def beginLaunch(self):\n        self.vessel.control.activate_next_stage()\n        for i in range(5):\n           # time.sleep(1)\n            print(\"T minus - {}\".format(5-i))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 177, "lines_of_code": 5, "inputs": ["self"], "restricted": false}
{"id": "7c3afeb60594a7003b7f82c9a24e0a0c7891c432f5cd7821bf4334dce79e9a0b", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.control", "description": "Extracted function flightControl.control from FlightControl.py", "code": "    def control(self, dt, error, prevError):\n        prop = self.pid.proportional(error)\n        integral = self.pid.integral(error, dt)\n        deriv = self.pid.derivative(dt, error, prevError)\n        return self.pid.sum(prop, integral, deriv)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 246, "lines_of_code": 5, "inputs": ["self", "dt", "error", "prevError"], "restricted": false}
{"id": "44a0bcd98be74ffda6932a8b47f762354d43a09e0c56100c04e29542e88577fa", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl", "description": "Extracted class flightControl from FlightControl.py", "code": "class flightControl:\n\n    prefAltitude = 0\n    pid = None\n    flightInfo = None\n    vessel = None\n    makeZeroWhenNegative = lambda x : x(not x<0)\n    timeToAlt = lambda h,a : math.sqrt((2*h)/a)\n    summationForPID = lambda PIDCon, dt, error, prevError : PIDCon.proportional(error) + PIDCon.derivative(dt, error, prevError) + PIDCon.integral(error, dt)\n\n    '''WAYPOINTS ARE LISTS OF TUPLES [(LONG, LAT, ALT)]'''\n    wayPoint = []\n    pidControllers = []\n\n    def setGains(self, Pgain, Igain, Dgain):\n        self.pid.setPgain(Pgain)\n        self.pid.setIgain(Igain)\n        self.pid.setDgain(Dgain)\n\n    def __init__(self, pidController, conn):\n        self.pid = pidController\n        self.vessel = conn.space_center.active_vessel\n        self.vessel.control.sas = True\n        self.vessel.control.rcs = True\n        self.flightInfo = self.vessel.flight()\n\n    def resetPID(self):\n        self.pid.resetPID()\n\n    def beginLaunch(self):\n        self.vessel.control.activate_next_stage()\n        for i in range(5):\n           # time.sleep(1)\n            print(\"T minus - {}\".format(5-i))\n\n    def control(self, dt, error, prevError):\n        prop = self.pid.proportional(error)\n        integral = self.pid.integral(error, dt)\n        deriv = self.pid.derivative(dt, error, prevError)\n        return self.pid.sum(prop, integral, deriv)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 1336, "lines_of_code": 40, "restricted": false}
{"id": "b6970b2b965903b016f0e8971516d48aa6d5afc131d8a0ba3ad5f39236ba05c8", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation.__init__", "description": "Extracted function InertialNavigation.__init__ from InertialNavigation.py", "code": "    def __init__(self):\n        pass\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 37, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "d8c31a0903f554b8acfb64914a4b0d5f8fe203725b6cad2b3253114550981938", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation.distanceBetweenCoordinates", "description": "Extracted function InertialNavigation.distanceBetweenCoordinates from InertialNavigation.py", "code": "    def distanceBetweenCoordinates(self, coor1, coor2, bodyRadius):\n        lat1 = coor1[0]\n        long1 = coor1[1]\n        lat2 = coor2[0]\n        long2 = coor2[1]\n        d=float(lat2-lat1)\n        latDistanceRadians = self.toRadians(d)\n        d=float(long2-long1)\n        longDistanceRadians = self.toRadians(d)\n\n        a = (\n            self.sinSqr(float(latDistanceRadians/2)) +\n            math.cos(self.toRadians(lat1)) * math.cos(self.toRadians(lat2)) *\n            self.sinSqr(longDistanceRadians)\n        )\n\n        c = (\n            2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n        )\n\n        distanceKM = bodyRadius * c\n\n        return distanceKM*1000\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 671, "lines_of_code": 23, "inputs": ["self", "coor1", "coor2", "bodyRadius"], "restricted": false}
{"id": "423fdfe06ef3c88f70a67232d850ea102be19123ea6f9619b6095cdc25439980", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation.getInformationFromAcceleration", "description": "Extracted function InertialNavigation.getInformationFromAcceleration from InertialNavigation.py", "code": "    def getInformationFromAcceleration(self, acc, dt):\n        info = [acc,0,0]\n        info[1] = acc*dt\n        info[2] = 0.5*acc*dt*dt\n\n        return tuple(info)", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 164, "lines_of_code": 6, "inputs": ["self", "acc", "dt"], "restricted": false}
{"id": "73a5d0074c4061c60b03b99c5d55806d4a39b40b0497c9d5443eb3fd976fb1ac", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation", "description": "Extracted class InertialNavigation from InertialNavigation.py", "code": "class InertialNavigation:\n\n    toRadians = lambda self, theta : theta * (math.pi/180)\n    toDegrees = lambda self, theta : theta * (180/math.pi)\n    binaryStep = lambda self, x : (\n        (2*(not x < 0))-1\n    )\n    sinSqr = lambda x : math.sin(x) * math.sin(x)\n\n    def __init__(self):\n        pass\n\n    '''\n    HAVERSINE FORMULA\n    https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula\n    '''\n    def distanceBetweenCoordinates(self, coor1, coor2, bodyRadius):\n        lat1 = coor1[0]\n        long1 = coor1[1]\n        lat2 = coor2[0]\n        long2 = coor2[1]\n        d=float(lat2-lat1)\n        latDistanceRadians = self.toRadians(d)\n        d=float(long2-long1)\n        longDistanceRadians = self.toRadians(d)\n\n        a = (\n            self.sinSqr(float(latDistanceRadians/2)) +\n            math.cos(self.toRadians(lat1)) * math.cos(self.toRadians(lat2)) *\n            self.sinSqr(longDistanceRadians)\n        )\n\n        c = (\n            2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n        )\n\n        distanceKM = bodyRadius * c\n\n        return distanceKM*1000\n\n    def getInformationFromAcceleration(self, acc, dt):\n        info = [acc,0,0]\n        info[1] = acc*dt\n        info[2] = 0.5*acc*dt*dt\n\n        return tuple(info)", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 1297, "lines_of_code": 46, "restricted": false}
{"id": "4dc4b81dbff3237096f7bba453bfaeaea76c9be2970f52685a6fbfc0b6729028", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getPgain", "description": "Extracted function PIDCon.getPgain from PID.py", "code": "    def getPgain(self):\n        return self.Pgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "58790f9854c2da6fd75b4b66ac66fcf78acfb1bedf991b8cab22a282489e6773", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getIgain", "description": "Extracted function PIDCon.getIgain from PID.py", "code": "    def getIgain(self):\n        return self.Igain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "52dee0aa882d3c3303750ec14ddac17daecbb5ee69947f786a4a97cd87495f05", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getDgain", "description": "Extracted function PIDCon.getDgain from PID.py", "code": "    def getDgain(self):\n        return self.Dgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "20092cc32b00178ecc44aa3d5bcaf2912fae80c055907e16b24c7323d74245b5", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getMaxI", "description": "Extracted function PIDCon.getMaxI from PID.py", "code": "    def getMaxI(self):\n        return self.maxI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 48, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "d17dcfae075e3a1e80fcd1289e395d6d64c42b670b3fa1dd6805d9a386d196d2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getLowI", "description": "Extracted function PIDCon.getLowI from PID.py", "code": "    def getLowI(self):\n        return self.lowI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 48, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "ce764ad5fd41708942e4aa4ffa502cc8a641ecad99c0a2804e4c6c3f5cef1707", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.setPgain", "description": "Extracted function PIDCon.setPgain from PID.py", "code": "    def setPgain(self, Pgain):\n        self.Pgain = Pgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self", "Pgain"], "restricted": false}
{"id": "1e1162d3f24692fc13ee6d512902483fe45f65f3a8e09458feafccca0ddbf5b7", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.setIgain", "description": "Extracted function PIDCon.setIgain from PID.py", "code": "    def setIgain(self, Igain):\n        self.Igain = Igain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self", "Igain"], "restricted": false}
{"id": "294c9ceddfa8ce4d9dcb44c977378a401d7e8c2a8ffd7c6470cb71e328ed2473", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.setDgain", "description": "Extracted function PIDCon.setDgain from PID.py", "code": "    def setDgain(self, Dgain):\n        self.Dgain = Dgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self", "Dgain"], "restricted": false}
{"id": "1859efd5600227dd695e64f120ed70c9d7440ab00b4eddf0923bf02330c8ded2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getMaxI", "description": "Extracted function PIDCon.getMaxI from PID.py", "code": "    def getMaxI(self, maxI):\n        self.maxI = maxI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 54, "lines_of_code": 2, "inputs": ["self", "maxI"], "restricted": false}
{"id": "eb69225d06e5f4852f1619fc7a7a8437fe04d824a16a17b27fa3ea4c2391930d", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getLowI", "description": "Extracted function PIDCon.getLowI from PID.py", "code": "    def getLowI(self, lowI):\n        self.lowI = lowI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 54, "lines_of_code": 2, "inputs": ["self", "lowI"], "restricted": false}
{"id": "09288264baddc5e317553abf1dc8b9ecca80b046e8fa958b93ac581d89c1176c", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.__init__", "description": "Extracted function PIDCon.__init__ from PID.py", "code": "    def __init__(self, PGain, IGain, DGain, MaxI, LowI):\n        self.Pgain = PGain\n        self.Igain = IGain\n        self.Dgain = DGain\n    \n        self.maxI = MaxI\n        self.lowI = LowI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 193, "lines_of_code": 7, "inputs": ["self", "PGain", "IGain", "DGain", "MaxI", "LowI"], "restricted": false}
{"id": "0791b5396ce3cc1191caaf28b18a49481d6cc1a58d2acb2bf8e031abd22d2bf2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.resetPID", "description": "Extracted function PIDCon.resetPID from PID.py", "code": "    def resetPID(self):\n        self.Integral = 0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "e734ab073aad47c6f62ab3892494df7b92467fd8b7131ca8a901bf449d006bb2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.derivative", "description": "Extracted function PIDCon.derivative from PID.py", "code": "    def derivative(self, dt, error, prevError):\n        return ((error - prevError)/dt)*self.Dgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 99, "lines_of_code": 2, "inputs": ["self", "dt", "error", "prevError"], "restricted": false}
{"id": "79c35cd2da847744192073e63d030572fd89c60aaecc6d72f1d0b52128312138", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.integral", "description": "Extracted function PIDCon.integral from PID.py", "code": "    def integral(self, error, dt):\n\n        #prevent a glitch in the matrix\n        if self.Igain == 0:\n            return self.Integral\n\n        self.Integral = (self.Integral + error*dt)*self.Igain\n        if(self.Integral >= self.maxI):\n            self.Integral = self.maxI\n            return self.Integral\n        elif(self.Integral <= self.lowI):\n            self.Integral = self.lowI\n            return self.Integral\n        else:\n            return self.Integral\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 471, "lines_of_code": 15, "inputs": ["self", "error", "dt"], "restricted": false}
{"id": "6d49bad64ea772e4ec3a1f14683f68c4abf069eb337cdb7a39149a129109abcb", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.proportional", "description": "Extracted function PIDCon.proportional from PID.py", "code": "    def proportional(self, error):\n        return error*self.Pgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 67, "lines_of_code": 2, "inputs": ["self", "error"], "restricted": false}
{"id": "eb1962d8ed7598b12a556a492000f208fb6ba43d30ac3762ed6558ffe6b057fb", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.sum", "description": "Extracted function PIDCon.sum from PID.py", "code": "    def sum(self, prop, integral, derived):\n        return prop + integral + derived", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 84, "lines_of_code": 2, "inputs": ["self", "prop", "integral", "derived"], "restricted": false}
{"id": "8709c326ba86a4e21015167b73d756225ea344f874dce46c588175d9bf6a73c4", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon", "description": "Extracted class PIDCon from PID.py", "code": "class PIDCon:\n\n    Pgain = 0.0\n    Igain = 0.0\n    Dgain = 0.0\n\n    Integral = 0\n    maxI = 1.0\n    lowI = -1.0\n\n    '''GETTERS'''\n    def getPgain(self):\n        return self.Pgain\n\n    def getIgain(self):\n        return self.Igain\n\n    def getDgain(self):\n        return self.Dgain\n    \n    def getMaxI(self):\n        return self.maxI\n\n    def getLowI(self):\n        return self.lowI\n\n    '''SETTERS'''\n    def setPgain(self, Pgain):\n        self.Pgain = Pgain\n\n    def setIgain(self, Igain):\n        self.Igain = Igain\n        \n    def setDgain(self, Dgain):\n        self.Dgain = Dgain\n\n    def getMaxI(self, maxI):\n        self.maxI = maxI\n\n    def getLowI(self, lowI):\n        self.lowI = lowI\n\n\n    '''CONSTRUCTOR'''\n    def __init__(self, PGain, IGain, DGain, MaxI, LowI):\n        self.Pgain = PGain\n        self.Igain = IGain\n        self.Dgain = DGain\n    \n        self.maxI = MaxI\n        self.lowI = LowI\n\n    def resetPID(self):\n        self.Integral = 0\n\n    '''PID Functions'''\n    def derivative(self, dt, error, prevError):\n        return ((error - prevError)/dt)*self.Dgain\n        \n    def integral(self, error, dt):\n\n        #prevent a glitch in the matrix\n        if self.Igain == 0:\n            return self.Integral\n\n        self.Integral = (self.Integral + error*dt)*self.Igain\n        if(self.Integral >= self.maxI):\n            self.Integral = self.maxI\n            return self.Integral\n        elif(self.Integral <= self.lowI):\n            self.Integral = self.lowI\n            return self.Integral\n        else:\n            return self.Integral\n\n    def proportional(self, error):\n        return error*self.Pgain\n\n    def sum(self, prop, integral, derived):\n        return prop + integral + derived", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 1723, "lines_of_code": 80, "restricted": false}
{"id": "cc36fced72ddafb6cc3a83c9f8cb7dc012bf2dba09cff978487d088b57957b37", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "extend_fins", "description": "Extracted function extend_fins from landing.py", "code": "def extend_fins(vessel):\n    for part in vessel.parts.all:\n        if part.name == 'Grid Fin M Titanium':\n            for module in part.modules:\n                if module.events == ['Extend Fins']:\n                    module.trigger_event('Extend Fins')\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 255, "lines_of_code": 6, "inputs": ["vessel"], "restricted": false}
{"id": "45045eb3b825c19a6e11a6ae5bc8ce59a8782963f235d9eeab191807a4da4433", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "retract_fins", "description": "Extracted function retract_fins from landing.py", "code": "def retract_fins(vessel):\n    for part in vessel.parts.all:\n        if part.name == 'Grid Fin M Titanium':\n            for module in part.modules:\n                if module.events == ['Retract Fins']:\n                    module.trigger_event('Retract Fins')\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 258, "lines_of_code": 6, "inputs": ["vessel"], "restricted": false}
{"id": "807e294de9bee0b2554444114d7297b1679096f2651c84419942559d801426a7", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "calc_thrust", "description": "Extracted function calc_thrust from landing.py", "code": "def calc_thrust(Fvac, A, h):\n    return Fvac - (106000*A)*2.718**(-0.0002*h)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 77, "lines_of_code": 2, "inputs": ["Fvac", "A", "h"], "restricted": false}
{"id": "6d25091d4be66c41e6cde7e3a91949f77106aaad00b0eea8531c304d5e119e84", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "ca", "description": "Calculates acceleration", "code": "def ca(thrust, mass, d=0, g=g):\n    \"\"\"\n    Calculates acceleration\n    \"\"\"\n    return thrust/mass - d - g\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 107, "lines_of_code": 5, "inputs": ["thrust", "mass", "d", "g"], "restricted": false}
{"id": "b84504db50b3a98e54ad1df4fc55ae7b5eb59a0624e39709b623d794f3facf13", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "sb_alt", "description": "Calculates the altitude at which to start the suicide burn", "code": "def sb_alt(v_speed, mass, Fvac=Fvac, wl=wl, A=A, target=0):\n    \"\"\"\n    Calculates the altitude at which to start the suicide burn\n    \"\"\"\n\n    h = altitude()\n    thrust = calc_thrust(Fvac, A, h)\n    d = drag()[0]/mass/2.3\n\n    while h >= 0 and v_speed >= 0:\n        target += v_speed\n        accel = ca(thrust, mass, d=-d, g=g)\n        v_speed -= accel\n        mass -= wl\n        h -= v_speed\n        thrust = calc_thrust(Fvac, A, h)\n\n    target -= h/2\n\n    return target\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 473, "lines_of_code": 20, "inputs": ["v_speed", "mass", "Fvac", "wl", "A", "target"], "restricted": false}
{"id": "1f35c1cd7db7b5931d8ddc0104b1babb3b35bd96acbd79cdc2a95660b2bf527d", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.__init__", "description": "Extracted function PID.__init__ from simple_pid.py", "code": "    def __init__(self, P=1.0, I=0.1, D=0.01):   \n        self.Kp = P    #P controls reaction to the instantaneous error\n        self.Ki = I    #I controls reaction to the history of error\n        self.Kd = D    #D prevents overshoot by considering rate of change\n        self.P = 0.0\n        self.I = 0.0\n        self.D = 0.0\n        self.SetPoint = 0.0  #Target value for controller\n        self.ClampI = 1.0  #clamps i_term to prevent 'windup.'\n        self.LastTime = time.time()\n        self.LastMeasure = 0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 514, "lines_of_code": 11, "inputs": ["self", "P", "I", "D"], "restricted": false}
{"id": "aa4487aeccfbfa074f9a8e861c6e1cd9b634dd9d30a3e59b66666dbb53972fd0", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.update", "description": "Extracted function PID.update from simple_pid.py", "code": "    def update(self,measure):\n        now = time.time()\n        change_in_time = now - self.LastTime\n        if not change_in_time:\n            change_in_time = 1.0   #avoid potential divide by zero if PID just created.\n       \n        error = self.SetPoint - measure\n        self.P = error\n        self.I += self.clamp_i(error)\n        self.D = (measure - self.LastMeasure) / (change_in_time)\n        self.LastMeasure = measure  # store data for next update\n        self.lastTime = now\n\n        return (self.Kp * self.P) + (self.Ki * self.I) - (self.Kd * self.D)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 564, "lines_of_code": 14, "inputs": ["self", "measure"], "restricted": false}
{"id": "7855e114ed7a187d6fe14fee00e5c173ded4dcbdd563418689039f269106f2e8", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.clamp_i", "description": "Extracted function PID.clamp_i from simple_pid.py", "code": "    def clamp_i(self, i):   \n        if i > self.ClampI:\n            return self.ClampI\n        elif i < -self.ClampI:\n            return -self.ClampI\n        else:\n            return i\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 186, "lines_of_code": 7, "inputs": ["self", "i"], "restricted": false}
{"id": "80b2e68ea26e215b7c7964c639ad09abb24d481706138a2cdb270e7c9ace1b5f", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.setpoint", "description": "Extracted function PID.setpoint from simple_pid.py", "code": "    def setpoint(self, value):\n        self.SetPoint = value\n        self.I = 0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 82, "lines_of_code": 3, "inputs": ["self", "value"], "restricted": false}
{"id": "65096f07d9099977cb2ea4efbf9b2adbdaf7393e37526696e004b37343df9366", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID", "description": "Generic PID Controller Class\nBased on the PID recipe at :\nhttp://code.activestate.com/recipes/577231-discrete-pid-controller/\nand the code and discussions in the blog at:\nhttp://brettbeauregard.com/blog/2011/04/\nimproving-the-beginners-pid-introduction/\nAn instance is created with the format\nyour_pid=PID(P=.0001, I=0.00001, D=0.000001)\nFinding the right values for those three gain numbers is called 'tuning' and\nthat's beyond the scope of this doc string!  \nUse your_pid.setpoint(X) to set the target output value of the controller. \n\n\nRegularly call your_pid.update(Y), passing it the input data that the\ncontroller should respond to.\noutput_data = your_pid.update(input_data)", "code": "class PID(object):\n    '''\n    Generic PID Controller Class\n    Based on the PID recipe at :\n    http://code.activestate.com/recipes/577231-discrete-pid-controller/\n    and the code and discussions in the blog at:\n    http://brettbeauregard.com/blog/2011/04/\n    improving-the-beginners-pid-introduction/\n    An instance is created with the format\n    your_pid=PID(P=.0001, I=0.00001, D=0.000001)\n    Finding the right values for those three gain numbers is called 'tuning' and\n    that's beyond the scope of this doc string!  \n    Use your_pid.setpoint(X) to set the target output value of the controller. \n\n\n    Regularly call your_pid.update(Y), passing it the input data that the\n    controller should respond to.\n    output_data = your_pid.update(input_data)\n    '''\n    def __init__(self, P=1.0, I=0.1, D=0.01):   \n        self.Kp = P    #P controls reaction to the instantaneous error\n        self.Ki = I    #I controls reaction to the history of error\n        self.Kd = D    #D prevents overshoot by considering rate of change\n        self.P = 0.0\n        self.I = 0.0\n        self.D = 0.0\n        self.SetPoint = 0.0  #Target value for controller\n        self.ClampI = 1.0  #clamps i_term to prevent 'windup.'\n        self.LastTime = time.time()\n        self.LastMeasure = 0.0\n                \n    def update(self,measure):\n        now = time.time()\n        change_in_time = now - self.LastTime\n        if not change_in_time:\n            change_in_time = 1.0   #avoid potential divide by zero if PID just created.\n       \n        error = self.SetPoint - measure\n        self.P = error\n        self.I += self.clamp_i(error)\n        self.D = (measure - self.LastMeasure) / (change_in_time)\n        self.LastMeasure = measure  # store data for next update\n        self.lastTime = now\n\n        return (self.Kp * self.P) + (self.Ki * self.I) - (self.Kd * self.D)\n\n    def clamp_i(self, i):   \n        if i > self.ClampI:\n            return self.ClampI\n        elif i < -self.ClampI:\n            return -self.ClampI\n        else:\n            return i\n        \n    def setpoint(self, value):\n        self.SetPoint = value\n        self.I = 0.0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 2145, "lines_of_code": 57, "restricted": false}
{"id": "c457e86c3e6e3fa27216fffeb8f1e8cf74495db6392e36d8464406bdaadd91fa", "repo": "https://github.com/whatdamath/KerbalSpaceProgram", "commit": "7416b2cbeea86f78eb4a45dcd24dc11e631835b5", "path": "kerbal4.py", "lang": "python", "name": "CONST_BLOCK", "description": "Top-level constants: F", "code": "F = vessel.available_thrust\n", "categories": ["const"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T16:32:39Z", "size_bytes": 28, "lines_of_code": 1, "restricted": false}
{"id": "1a79e0e991adb95343683f4227c788f8a818722e139e318f90993059df65d1e1", "repo": "https://github.com/whatdamath/KerbalSpaceProgram", "commit": "7416b2cbeea86f78eb4a45dcd24dc11e631835b5", "path": "kerbal5.py", "lang": "python", "name": "CONST_BLOCK", "description": "Top-level constants: F", "code": "F = vessel.available_thrust\n", "categories": ["const"], "dependencies": [], "license": "MIT", "license_url": "https://opensource.org/licenses/MIT", "created_at": "2025-11-01T16:32:39Z", "size_bytes": 28, "lines_of_code": 1, "restricted": false}
{"id": "05543cd9db1ed69f253e95282ba4939ea2b147fcab3c1744890212bc782a4f34", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "normalized_angle", "description": "Extracted function normalized_angle from Kmath.py", "code": "def normalized_angle(angle):\n    angle=angle+180\n    angle=angle%360\n    angle=angle-180\n    return angle\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 106, "lines_of_code": 5, "inputs": ["angle"], "restricted": false}
{"id": "d959e887943c993b6dc399c57ba59d74be3c54a87b1459b2409642e4189bfa67", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "normalized_rad", "description": "Extracted function normalized_rad from Kmath.py", "code": "def normalized_rad(rad):\n    rad=rad+math.pi\n    rad=rad%(2*math.pi)\n    rad=rad-math.pi\n    return rad\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 104, "lines_of_code": 5, "inputs": ["rad"], "restricted": false}
{"id": "4454506c8bde060a74affca6db3789227cd5c772826726077c846bbc1431d2df", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Kfilter.__init__", "description": "Extracted function Kfilter.__init__ from Kmath.py", "code": "    def __init__(self,over_threshold=1,count_threshold=5):\n        self.old_value=0\n        self.over_count=0\n        self.over_threshold=0\n        self.count_threshold=5\n        self.count_threshold=count_threshold\n        self.over_threshold=over_threshold\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 259, "lines_of_code": 7, "inputs": ["self", "over_threshold", "count_threshold"], "restricted": false}
{"id": "570e8ffb381fd814cd46c00eaebd70e148ccac10f612febbd9a8bf50fdc4efda", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Kfilter.filter", "description": "Extracted function Kfilter.filter from Kmath.py", "code": "    def filter(self,value):\n        if abs(value-self.old_value)<0.5:\n            self.over_count=0\n            self.old_value=value\n        else:\n            self.over_count=self.over_count+1\n    \n        if self.over_count>=self.count_threshold:\n            self.old_value=value\n            self.over_count=0\n        return self.old_value\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 341, "lines_of_code": 11, "inputs": ["self", "value"], "restricted": false}
{"id": "ce78caf5ba7d0b69abde2572f0558a89589efbd255f8a476316899de49e2a9fe", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "OverMin.__init__", "description": "Extracted function OverMin.__init__ from Kmath.py", "code": "    def __init__(self,count_threshold=5):\n        self.min_value=1e20\n        self.over_count=0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 96, "lines_of_code": 3, "inputs": ["self", "count_threshold"], "restricted": false}
{"id": "5b2e5132c45dbf39a954f34d467cf96ce86ae8a24708478d38b20a698b8f905d", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "OverMin.update", "description": "Extracted function OverMin.update from Kmath.py", "code": "    def update(self,value):\n        if value<self.min_value:\n            self.over_count=0            \n            self.min_value=value\n        else:\n            self.over_count=self.over_count+1\n        return self.over_count\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 227, "lines_of_code": 7, "inputs": ["self", "value"], "restricted": false}
{"id": "6f699288c7a118768ab96e99ba7e406ddfabfb7ac348f88dbf0aa059b98d3866", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__init__", "description": "Extracted function Vector3.__init__ from Kmath.py", "code": "    def __init__(self,x,y,z):\n        self.x=x\n        self.y=y\n        self.z=z\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 81, "lines_of_code": 4, "inputs": ["self", "x", "y", "z"], "restricted": false}
{"id": "25c84f4310016bbc1f5c4d65148cbde4592b2d30aacb25535f34b22545a795ee", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__str__", "description": "Extracted function Vector3.__str__ from Kmath.py", "code": "    def __str__(self):\n        return \"(\"+str(self.x)+\" \"+str(self.y)+\" \"+str(self.z)+\")\"\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 90, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "7e9139276f8ac5370b64c809657d54e677d821d28b943a07f99cd4f2ccf79682", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.tuple3", "description": "Extracted function Vector3.tuple3 from Kmath.py", "code": "    def tuple3(self):\n        return (self.x,self.y,self.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 60, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "b610b249c8c7ef21b02115ab794d9ec23f5b7964ec07a61a864df272b0f2c081", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.mag", "description": "Extracted function Vector3.mag from Kmath.py", "code": "    def mag(self):\n        return math.sqrt(Vector3.Dot(self,self))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 68, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "65d273fb06e8e1868d41fac2cbefa3c747a1a2248b42f639b23c40025f3c186b", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.unit_vector", "description": "Extracted function Vector3.unit_vector from Kmath.py", "code": "    def unit_vector(self):\n        if self.mag()<1e-16:\n            return Vector3(0.0,0.0,0.0)\n        return self/self.mag()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 127, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "f526b86420a7d9b50940263cdd69271553e4bea3bd00af3bebf887917d90cbe9", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.pitch_yaw", "description": "    #x轴:上 y轴：北 z轴：东", "code": "    def pitch_yaw(self):\n        x=self.x\n        y=self.y\n        z=self.z\n        v1=Vector3(x,y,z)\n        pitch=90.0-Vector3.Angle(Vector3(1.0,0.0,0.0),v1)*180/math.pi\n        v2=Vector3(0.0,y,z)\n        if v2.mag()==0.0:\n            return(0,0)\n        yaw=Vector3.Angle(Vector3(0.0,1,0.0),v2)*180/math.pi\n        yawsig=Vector3.Cross(Vector3(0.0,1.0,0.0),v2)\n        if yawsig.x<0:\n            yaw=360-yaw\n        return(pitch,yaw)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 438, "lines_of_code": 14, "inputs": ["self"], "restricted": false}
{"id": "0a52e6c6be2be31ae2be7a95296ddc2bf04591051eec048a84ebb8f0454bfadc", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__add__", "description": "Extracted function Vector3.__add__ from Kmath.py", "code": "    def __add__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 120, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "9ec17bd7abd743523cada8ad5a0bfacf255bf82a070d4dbd5037a1981477a25a", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__radd__", "description": "Extracted function Vector3.__radd__ from Kmath.py", "code": "    def __radd__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 121, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "f785bfe7ac90a8c68ac93d8b963b95419c98c13b95d96662a2f5f4a8acea51cc", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__sub__", "description": "Extracted function Vector3.__sub__ from Kmath.py", "code": "    def __sub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 120, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "c729ac4ccf8eda051fcebdb4e47a2e7f2945e9199bc4ce02b3c3aab427532d31", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__rsub__", "description": "Extracted function Vector3.__rsub__ from Kmath.py", "code": "    def __rsub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 121, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "6059e51bfc1f2d15556ea337b0054809b99288a7539e15f3899bee97b2c7d39f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__mul__", "description": "    #数乘", "code": "    def __mul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 114, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "e418d3a40a0d074d1721599ba98845eb223ed61c32a881dfa3c26b6e12252773", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__rmul__", "description": "Extracted function Vector3.__rmul__ from Kmath.py", "code": "    def __rmul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 115, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "af92dc0584ae8be56fa12283dc9acd0987ef17e657350bef47492762a85a8fee", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__truediv__", "description": "    #数除", "code": "    def __truediv__(self,b):\n        return Vector3(self.x/b,\n                  self.y/b,\n                  self.z/b)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 118, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "bca9eed8a76a837e1a334532ea402a11c917a7c6f6c44ebc81f652725328b31f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Tuple3", "description": "Extracted function Vector3.Tuple3 from Kmath.py", "code": "    def Tuple3(t3):\n        return Vector3(t3[0],t3[1],t3[2])\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 62, "lines_of_code": 2, "inputs": ["t3"], "restricted": false}
{"id": "397c32b558e5d70a7b93081ba1d5d2cf211dad3ddcf998a0b125f300d314b1be", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Dot", "description": "Extracted function Vector3.Dot from Kmath.py", "code": "    def Dot(a,b):\n        return (a.x*b.x+a.y*b.y+a.z*b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 59, "lines_of_code": 2, "inputs": ["a", "b"], "restricted": false}
{"id": "cdf657aeddea25269cfe6256b76896d7b425eeb668616059ed3a9fbb7d1ded59", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Cross", "description": "Extracted function Vector3.Cross from Kmath.py", "code": "    def Cross(a,b):\n        x=a.y*b.z-a.z*b.y\n        y=a.z*b.x-a.x*b.z\n        z=a.x*b.y-a.y*b.x\n        return Vector3(x,y,z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 128, "lines_of_code": 5, "inputs": ["a", "b"], "restricted": false}
{"id": "6f5a10e66767ee6cfd7ade216de118d28a3862b1f57627e00e03a762529f6036", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Angle", "description": "Extracted function Vector3.Angle from Kmath.py", "code": "    def Angle(a,b):\n        return math.acos(max(min(Vector3.Dot(a,b)/(a.mag()*b.mag()),1),-1))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 96, "lines_of_code": 2, "inputs": ["a", "b"], "restricted": false}
{"id": "21d4065afac105e0f1c770a79a00d912f681b27924e539ea22a9473bb878bebc", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.__init__", "description": "Extracted function Quaternion.__init__ from Kmath.py", "code": "    def __init__(self, w, x, y, z):\n        mag = x*x + y*y + z*z + w*w;\n        self.w = w/mag\n        self.x = x/mag\n        self.y = y/mag\n        self.z = z/mag\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 165, "lines_of_code": 6, "inputs": ["self", "w", "x", "y", "z"], "restricted": false}
{"id": "6923ff4d1f28b0b7cacf6ad25efc5a550a2fa1772283e4ec85062002d0380870", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.__str__", "description": "Extracted function Quaternion.__str__ from Kmath.py", "code": "    def __str__(self):\n        return \"(\"+str(self.w)+\" \"+str(self.x)+\"i \"+str(self.y)+\"j \"+str(self.z)+\"k )\"        \n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 118, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "d337b3d88384d082e6035291c27d346734cb1a884a08523d9b7e18df8914841e", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.__mul__", "description": "Extracted function Quaternion.__mul__ from Kmath.py", "code": "    def __mul__(self, quater):\n        w1 = self.w\n        w2 = quater.w\n        v1 = Vector3(self.x, self.y, self.z)\n        v2 = Vector3(quater.x, quater.y, quater.z)\n        w3 = w1*w2-Vector3.Dot(v1 ,v2)\n        v3 = Vector3.Cross(v1,v2)+w1*v2+w2*v1\n        return Quaternion(w3, v3.x, v3.y, v3.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 302, "lines_of_code": 8, "inputs": ["self", "quater"], "restricted": false}
{"id": "58ab06adfff9ca579f681a2311136a3c2fec0fe9ebbe2b90efc965c34e072586", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.tuple4", "description": "Extracted function Quaternion.tuple4 from Kmath.py", "code": "    def tuple4(self):\n        return (self.w,self.x,self.y,self.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 67, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "432c4a2428be8391252b426a4bb66dbf26adc83b10cdb8ef23b87b877111bac4", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.inverse", "description": "Extracted function Quaternion.inverse from Kmath.py", "code": "    def inverse(self):\n        return Quaternion(self.w,-self.x, -self.y, -self.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 83, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "7a6776b1ded9e65bbdfa1e2239743fb29a99ca4511d340bd896f102b2cc8b221", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.rotate", "description": "    #右手系轴角顺时针旋转", "code": "    def rotate(self,v):\n        u=Vector3(self.x,self.y,self.z)\n        s=self.w\n        return 2.0*Vector3.Dot(u,v)*u+(s*s-Vector3.Dot(u,u))*v+2.0*s*Vector3.Cross(u,v)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 169, "lines_of_code": 4, "inputs": ["self", "v"], "restricted": false}
{"id": "e89244770e3b7c439f6c3012053b7f0abc02a61609797dfce260aecbfd4abeaf", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.PivotRad", "description": "Extracted function Quaternion.PivotRad from Kmath.py", "code": "    def PivotRad(v,rad):\n        theta = rad/2\n        if v.mag()==0.0:\n            u=Vector3(1,0,0)\n            theta=0.0\n        else:\n            u = v.unit_vector()     \n        return Quaternion(math.cos(theta),math.sin(theta)*u.x,math.sin(theta)*u.y,math.sin(theta)*u.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 277, "lines_of_code": 8, "inputs": ["v", "rad"], "restricted": false}
{"id": "59729718b612f6ecb83c1b4aee8b2f212a89bafd77304a4e83d171fed31bac8b", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.PivotAngle", "description": "Extracted function Quaternion.PivotAngle from Kmath.py", "code": "    def PivotAngle(v,w):\n        w=w*math.pi/180\n        return Quaternion.PivotRad(v,w)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 89, "lines_of_code": 3, "inputs": ["v", "w"], "restricted": false}
{"id": "ff1987fafb36e413c54c9dde001f2f9000812c549605a265882ad67ccfccb9c6", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.Tuple4", "description": "Extracted function Quaternion.Tuple4 from Kmath.py", "code": "    def Tuple4(t4):\n        mag = t4[0]*t4[0] + t4[1]*t4[1] + t4[2]*t4[2] + t4[3]*t4[3];\n        return Quaternion(t4[3]/mag,t4[0]/mag,t4[1]/mag,t4[2]/mag)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 156, "lines_of_code": 3, "inputs": ["t4"], "restricted": false}
{"id": "2cd78b216ec23e9849dbef8c262b21a56ee181ebde814772f597690b5b2cc350", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Kfilter", "description": "Extracted class Kfilter from Kmath.py", "code": "class Kfilter:\n    def __init__(self,over_threshold=1,count_threshold=5):\n        self.old_value=0\n        self.over_count=0\n        self.over_threshold=0\n        self.count_threshold=5\n        self.count_threshold=count_threshold\n        self.over_threshold=over_threshold\n    def filter(self,value):\n        if abs(value-self.old_value)<0.5:\n            self.over_count=0\n            self.old_value=value\n        else:\n            self.over_count=self.over_count+1\n    \n        if self.over_count>=self.count_threshold:\n            self.old_value=value\n            self.over_count=0\n        return self.old_value\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 615, "lines_of_code": 19, "restricted": false}
{"id": "4bc3618f280ef8d44c12bcf919cf633cb136da91dcc8076441e68488bb4ab0fb", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "OverMin", "description": "Extracted class OverMin from Kmath.py", "code": "class OverMin:\n    def __init__(self,count_threshold=5):\n        self.min_value=1e20\n        self.over_count=0\n    def update(self,value):\n        if value<self.min_value:\n            self.over_count=0            \n            self.min_value=value\n        else:\n            self.over_count=self.over_count+1\n        return self.over_count\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 338, "lines_of_code": 11, "restricted": false}
{"id": "ddfc8d004c26fc8dd8d47417b22396d9b19b3ea1cfd2e228e499f62792af7447", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3", "description": "#三维向量", "code": "class Vector3:\n    def __init__(self,x,y,z):\n        self.x=x\n        self.y=y\n        self.z=z\n    def __str__(self):\n        return \"(\"+str(self.x)+\" \"+str(self.y)+\" \"+str(self.z)+\")\"\n\n    def tuple3(self):\n        return (self.x,self.y,self.z)\n\n    def mag(self):\n        return math.sqrt(Vector3.Dot(self,self))\n\n    def unit_vector(self):\n        if self.mag()<1e-16:\n            return Vector3(0.0,0.0,0.0)\n        return self/self.mag()\n    #x轴:上 y轴：北 z轴：东\n    def pitch_yaw(self):\n        x=self.x\n        y=self.y\n        z=self.z\n        v1=Vector3(x,y,z)\n        pitch=90.0-Vector3.Angle(Vector3(1.0,0.0,0.0),v1)*180/math.pi\n        v2=Vector3(0.0,y,z)\n        if v2.mag()==0.0:\n            return(0,0)\n        yaw=Vector3.Angle(Vector3(0.0,1,0.0),v2)*180/math.pi\n        yawsig=Vector3.Cross(Vector3(0.0,1.0,0.0),v2)\n        if yawsig.x<0:\n            yaw=360-yaw\n        return(pitch,yaw)\n        \n    \n    def __add__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n\n    def __radd__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n    \n    def __sub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n    \n    def __rsub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n    #数乘\n    def __mul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n\n    def __rmul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n    #数除\n    def __truediv__(self,b):\n        return Vector3(self.x/b,\n                  self.y/b,\n                  self.z/b)\n    @staticmethod\n    def Tuple3(t3):\n        return Vector3(t3[0],t3[1],t3[2])\n  \n    #点积\n    @staticmethod\n    def Dot(a,b):\n        return (a.x*b.x+a.y*b.y+a.z*b.z)\n    \n    #叉积\n    @staticmethod\n    def Cross(a,b):\n        x=a.y*b.z-a.z*b.y\n        y=a.z*b.x-a.x*b.z\n        z=a.x*b.y-a.y*b.x\n        return Vector3(x,y,z)\n\n    #夹角\n    @staticmethod\n    def Angle(a,b):\n        return math.acos(max(min(Vector3.Dot(a,b)/(a.mag()*b.mag()),1),-1))\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 2259, "lines_of_code": 90, "restricted": false}
{"id": "002ab6535bbc45c392a92cf697d5adf3eae2085e74c8b28857df1da88aa0b780", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion", "description": "Extracted class Quaternion from Kmath.py", "code": "class Quaternion:\n    def __init__(self, w, x, y, z):\n        mag = x*x + y*y + z*z + w*w;\n        self.w = w/mag\n        self.x = x/mag\n        self.y = y/mag\n        self.z = z/mag\n\n    def __str__(self):\n        return \"(\"+str(self.w)+\" \"+str(self.x)+\"i \"+str(self.y)+\"j \"+str(self.z)+\"k )\"        \n\n    def __mul__(self, quater):\n        w1 = self.w\n        w2 = quater.w\n        v1 = Vector3(self.x, self.y, self.z)\n        v2 = Vector3(quater.x, quater.y, quater.z)\n        w3 = w1*w2-Vector3.Dot(v1 ,v2)\n        v3 = Vector3.Cross(v1,v2)+w1*v2+w2*v1\n        return Quaternion(w3, v3.x, v3.y, v3.z)\n    \n    def tuple4(self):\n        return (self.w,self.x,self.y,self.z)\n\n    def inverse(self):\n        return Quaternion(self.w,-self.x, -self.y, -self.z)\n    #右手系轴角顺时针旋转\n    def rotate(self,v):\n        u=Vector3(self.x,self.y,self.z)\n        s=self.w\n        return 2.0*Vector3.Dot(u,v)*u+(s*s-Vector3.Dot(u,u))*v+2.0*s*Vector3.Cross(u,v)\n    \n    @staticmethod\n    def PivotRad(v,rad):\n        theta = rad/2\n        if v.mag()==0.0:\n            u=Vector3(1,0,0)\n            theta=0.0\n        else:\n            u = v.unit_vector()     \n        return Quaternion(math.cos(theta),math.sin(theta)*u.x,math.sin(theta)*u.y,math.sin(theta)*u.z)\n\n    @staticmethod\n    def PivotAngle(v,w):\n        w=w*math.pi/180\n        return Quaternion.PivotRad(v,w)\n\n    @staticmethod\n    def Tuple4(t4):\n        mag = t4[0]*t4[0] + t4[1]*t4[1] + t4[2]*t4[2] + t4[3]*t4[3];\n        return Quaternion(t4[3]/mag,t4[0]/mag,t4[1]/mag,t4[2]/mag)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1549, "lines_of_code": 50, "restricted": false}
{"id": "3e55231a7d45b07151b9ff69b72800b1c22763bab185e60a5a4de701722c717c", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer.__init__", "description": "Extracted function Ktimer.__init__ from Ktimer.py", "code": "    def __init__(self):\n        if Ktimer.conn==None:\n            Ktimer.conn = krpc.connect(name='clock')\n        self.old=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 128, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "d4425cc3326679417898011570fe376ac8f4ee2fbde9707356e368fd0d5e3ad2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer.delta_t", "description": "Extracted function Ktimer.delta_t from Ktimer.py", "code": "    def delta_t(self):\n        tmp=Ktimer.conn.space_center.ut\n        res=tmp-self.old\n        if self.old==0.0:\n            res=0.0\n        self.old=tmp\n        #print('delta t',res)\n        return res\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 204, "lines_of_code": 8, "inputs": ["self"], "restricted": false}
{"id": "fcfda1b491fdc9b437094c8650f95a287add15ce39c5fd0e5785c75f8ffed1ae", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer.time_t", "description": "Extracted function Ktimer.time_t from Ktimer.py", "code": "    def time_t(self):\n        return Ktimer.conn.space_center.ut\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 65, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "b2198dcdb6ec40ce0c716f7c0a8fb623ae0b038627e068650ee6442fc26e4f1a", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "derivator.__init__", "description": "Extracted function derivator.__init__ from Ktimer.py", "code": "    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__last=num\n        self.__last_state=num\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 116, "lines_of_code": 4, "inputs": ["self", "num"], "restricted": false}
{"id": "35afc077837a47e76d5cd100631b5f75c4035c34a2b8e43c32aa74f901df8bc7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "derivator.derivative", "description": "Extracted function derivator.derivative from Ktimer.py", "code": "    def derivative(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__last_state=(num-self.__last)/deltaTime\n        self.__last=num\n        return self.__last_state\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 214, "lines_of_code": 6, "inputs": ["self", "num"], "restricted": false}
{"id": "d483ec5ca43f491bb72a50c550f22f4c714cec5295a072a4e8d4d8a5492939eb", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.__init__", "description": "Extracted function integrator.__init__ from Ktimer.py", "code": "    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__integral=num\n        self.__max=None\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 114, "lines_of_code": 4, "inputs": ["self", "num"], "restricted": false}
{"id": "ebe63f50e11297c7882efa9d0acd8e6ab04f878711595b83bb41cf63547cfcae", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.integral", "description": "Extracted function integrator.integral from Ktimer.py", "code": "    def integral(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__integral=self.__integral+num*deltaTime\n        if self.__max!=None:\n            self.__integral=max(min(self.__integral,self.__max),-self.__max)\n        return self.__integral\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 292, "lines_of_code": 7, "inputs": ["self", "num"], "restricted": false}
{"id": "1be1b80c57d7c43cbf1158ba7b594c419cf47460c70497798862c1bca2677001", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.clear", "description": "Extracted function integrator.clear from Ktimer.py", "code": "    def clear(self):\n        self.__integral=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 49, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "dbd801a21943a984dae6472ff752d325cbd3329ae380c3c939ea700d4712e218", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.set", "description": "Extracted function integrator.set from Ktimer.py", "code": "    def set(self,num):\n        self.__integral=num\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 51, "lines_of_code": 2, "inputs": ["self", "num"], "restricted": false}
{"id": "e058142b92de7b6ccf983a782a88be2673fd558677ad40a1d5f8117633653838", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.set_max", "description": "Extracted function integrator.set_max from Ktimer.py", "code": "    def set_max(self,_max):\n        self.__max=abs(_max)", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 56, "lines_of_code": 2, "inputs": ["self", "_max"], "restricted": false}
{"id": "9bcf18fa2dd53cda8cc838f8f9e49f20e5131c62a615e02a89287a878e786468", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer", "description": "Extracted class Ktimer from Ktimer.py", "code": "class Ktimer:\n    conn=None\n    def __init__(self):\n        if Ktimer.conn==None:\n            Ktimer.conn = krpc.connect(name='clock')\n        self.old=0.0\n    def delta_t(self):\n        tmp=Ktimer.conn.space_center.ut\n        res=tmp-self.old\n        if self.old==0.0:\n            res=0.0\n        self.old=tmp\n        #print('delta t',res)\n        return res\n    \n    def time_t(self):\n        return Ktimer.conn.space_center.ut\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 430, "lines_of_code": 17, "restricted": false}
{"id": "9773533e4d41cd5a616747f22b4b7cbe32e2463adcba6e23415605a9091a24aa", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "derivator", "description": "Extracted class derivator from Ktimer.py", "code": "class derivator:\n    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__last=num\n        self.__last_state=num\n    def derivative(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__last_state=(num-self.__last)/deltaTime\n        self.__last=num\n        return self.__last_state\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 347, "lines_of_code": 11, "restricted": false}
{"id": "1a7faf86efd2826823360105dd48b66283d292c4987de3e405b3263727cdfb27", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator", "description": "Extracted class integrator from Ktimer.py", "code": "class integrator:\n    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__integral=num\n        self.__max=None\n    def integral(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__integral=self.__integral+num*deltaTime\n        if self.__max!=None:\n            self.__integral=max(min(self.__integral,self.__max),-self.__max)\n        return self.__integral\n    def clear(self):\n        self.__integral=0.0\n    def set(self,num):\n        self.__integral=num\n    def set_max(self,_max):\n        self.__max=abs(_max)", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 580, "lines_of_code": 18, "restricted": false}
{"id": "e13a867d11b1bc7a95a2bd2ee2f3b59ad65d95bd97a16474fbfc58b3d1070308", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "adjust_geo_period.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from adjust_geo_period.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 248, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "006b9b49161f88b0d29b098d632b13e5f2701bffe52dd196643053a6b9200bb7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "adjust_geo_period.py", "lang": "python", "name": "ApSpeed", "description": "Extracted function ApSpeed from adjust_geo_period.py", "code": "def ApSpeed(new_pe,ap,body):\n    r=body.equatorial_radius\n    gm=body.gravitational_parameter\n    new_pe=r+new_pe\n    ap=r+ap\n    sem=0.5*(new_pe+ap)\n    return math.sqrt(2.0*(gm/ap-0.5*gm/sem))\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 195, "lines_of_code": 7, "inputs": ["new_pe", "ap", "body"], "restricted": false}
{"id": "959e5faf7c9de793747b704886cfb5a4190ee9a6e7056a281d1e74cd8decd3ec", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "geo_maneuver.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from geo_maneuver.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 248, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "155c1383ee37b042cdf20cad348a561d1c9b2d3750b3cd531b2e58f82aeb0c26", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "geo_maneuver.py", "lang": "python", "name": "ApSpeed", "description": "Extracted function ApSpeed from geo_maneuver.py", "code": "def ApSpeed(new_pe,ap,body):\n    gm=body.gravitational_parameter\n    sem=0.5*(new_pe+ap)\n    return math.sqrt(2.0*(gm/ap-0.5*gm/sem))\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 134, "lines_of_code": 4, "inputs": ["new_pe", "ap", "body"], "restricted": false}
{"id": "14c720c2f28407cbf32523322a85de6099ebf053424cb294d63e6822d78a56c2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "gto_transfer.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from gto_transfer.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 248, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "8caebd7829da226bbf96149ecb7766733d1004ca49f8dfd6b8fff4c5731d30c2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "launch.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from launch.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked  \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 249, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "8afb8902db5708b071f6fc7953724ef7f224a9f8586c2d275129426eaed6815d", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "launch_moon.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from launch_moon.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked  \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 249, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "4c81bdaa8442545ebc5c26431efad2fae19d15135c3ec99dfb7e91a1c9e7c48c", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "vernal_equinox_vector", "description": "#默认弧度制\n#春分点方向向量", "code": "def vernal_equinox_vector(conn,reference_frame):\n    earth=conn.space_center.bodies['Earth']\n    orbital_reference_frame=earth.orbital_reference_frame\n    north_pole=Vector3.Tuple3(earth.direction(orbital_reference_frame))\n    tmp=Vector3.Cross(Vector3(0.0,0.0,1.0),north_pole)\n    q=Quaternion.Tuple4(earth.rotation(reference_frame))\n    q=q*Quaternion.Tuple4(earth.rotation(orbital_reference_frame)).inverse()\n    return q.rotate(tmp)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 437, "lines_of_code": 8, "inputs": ["conn", "reference_frame"], "restricted": false}
{"id": "1bc0d2583feaabf22497a5386a10f1d23a659fe79976556b535e26681968f962", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "target_normal_vector", "description": "#轨道法向量", "code": "def target_normal_vector(conn,body,inc,lan,reference_frame):\n    north_pole=Vector3.Tuple3(body.direction(reference_frame)).unit_vector()\n    vernal_vector=vernal_equinox_vector(conn,reference_frame)\n    q=Quaternion.PivotRad(north_pole,-lan)\n    ascend_node=q.rotate(vernal_vector)\n    tmp=Vector3.Cross(north_pole,ascend_node).unit_vector()\n    if(abs(inc-math.pi/2)<1e-16):\n        res=tmp\n    else:\n        res= north_pole+(tmp*math.tan(inc))\n    return res.unit_vector()\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 476, "lines_of_code": 11, "inputs": ["conn", "body", "inc", "lan", "reference_frame"], "restricted": false}
{"id": "7e22aab171314f16b75d3325b5cc8a40abfbeba28dd216fe9419d2561e0553d7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "equator_node_lon", "description": "#某倾角过某位置的轨道赤道点(升交点或降交点)经度", "code": "def equator_node_lon(lon,lat,inc,is_ascend=True):\n    b=math.tan(lat)*math.tan(math.pi/2-inc)\n    b=math.asin(min(1,max(-1,b)))\n    if is_ascend:\n        return lon-b\n    else:\n        return lon+b\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 198, "lines_of_code": 7, "inputs": ["lon", "lat", "inc", "is_ascend"], "restricted": false}
{"id": "c83da0f54b5c4274ab3c73cfc2a7e5ed816ba418dae0e3bd5e3cedeb8b0d4ff2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "time_to_orbit_over", "description": "#到轨道凌空的时间", "code": "def time_to_orbit_over(conn,body,lon,lat,inc,lan,heading_north=False):\n    vev=vernal_equinox_vector(conn,body.reference_frame).tuple3()\n    tarLon=math.radians(body.longitude_at_position(vev,body.reference_frame))+lan\n    curLon=equator_node_lon(lon,lat,inc,heading_north)\n    if not heading_north:\n        tarLon=math.pi+tarLon\n    dif=tarLon-curLon\n    dif=normalized_rad(dif)\n    if(dif<0):\n        dif=dif+2*math.pi\n    return dif/body.rotational_speed\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 458, "lines_of_code": 11, "inputs": ["conn", "body", "lon", "lat", "inc", "lan", "heading_north"], "restricted": false}
{"id": "a289fac65e2c39db4957d1a44f1942634a30f72e3ef61cb47f1de72af10ce435", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "warp_to_launch", "description": "#加速到发射", "code": "def warp_to_launch(conn,target_inc,target_lan,heading_north=False,advance=300):\n    vessel = conn.space_center.active_vessel\n    body=vessel.orbit.body\n    reference_frame=body.non_rotating_reference_frame\n    position=vessel.position(reference_frame)\n    lon=math.radians(body.longitude_at_position(position, reference_frame))  \n    lat=math.radians(body.latitude_at_position(position, reference_frame))\n    deltaTime=time_to_orbit_over(conn,body,lon,lat,target_inc,target_lan,heading_north)\n    conn.space_center.warp_to(conn.space_center.ut+deltaTime-advance)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 563, "lines_of_code": 9, "inputs": ["conn", "target_inc", "target_lan", "heading_north", "advance"], "restricted": false}
{"id": "320e382d195c6fe8c375d98221f104a0d348244b3f6756e515fbcfe09b71d611", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "surface_velocity", "description": "Extracted function surface_velocity from navigation.py", "code": "def surface_velocity(vessel):\n    referenceframe=vessel.orbit.body.reference_frame\n    q1=Quaternion.Tuple4(vessel.rotation(referenceframe))\n    q2=Quaternion.Tuple4(vessel.rotation(vessel.surface_reference_frame))\n    q1=q2*q1.inverse()\n    v=Vector3.Tuple3(vessel.velocity(referenceframe))\n    v=q1.rotate(v)\n    return v\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 324, "lines_of_code": 8, "inputs": ["vessel"], "restricted": false}
{"id": "7a374efd996315d5b4fc1f5e79241c9c3aae774c0fd27c005a31e7d072d4b35f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "target_heading", "description": "Extracted function target_heading from navigation.py", "code": "def target_heading(vessel,target_normal_vector,reference_frame):\n    body=vessel.orbit.body\n    orbitV=target_normal_vector\n    NorthNode=Vector3.Tuple3(body.direction(reference_frame))\n    vesselPos=Vector3.Tuple3(vessel.position(reference_frame))\n    front=Vector3.Cross(vesselPos-(orbitV*math.cos(Vector3.Angle(orbitV,vesselPos))),orbitV)\n    east=Vector3.Cross(vesselPos,NorthNode) \n    res=Vector3.Angle(front,east)\n    if Vector3.Dot(front,NorthNode)<0:\n        res=-res\n    return math.pi/2-res\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 502, "lines_of_code": 11, "inputs": ["vessel", "target_normal_vector", "reference_frame"], "restricted": false}
{"id": "872c80fc4fb68ab814df0e6d727076cb5ffe4abdaa65de76214d2ac05d3f7199", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.__init__", "description": "Extracted function orbit.__init__ from orbit.py", "code": "    def __init__(self,u):\n        self.__e=0.0\n        self.__u=u\n        self.__f=0.0\n        self.__t=0.0\n        self.__h=Vector3(0.0,0.0,0.0)\n        self.__f0=Vector3(0.0,0.0,0.0)    \n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 189, "lines_of_code": 7, "inputs": ["self", "u"], "restricted": false}
{"id": "976e988fe818cc08147f37ab8ec19289959ed70fdcc3dbe0cf4d808ee4936867", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.set_r_v_t", "description": "Extracted function orbit.set_r_v_t from orbit.py", "code": "    def set_r_v_t(self,r,v,t,u):\n        self.__t=t\n        self.__h=Vector3.Cross(v,r)\n        hh=Vector3.Dot(self.__h,self.__h)\n        energy=0.5*v.mag()**2-u/r.mag()\n        if energy==0.0:\n            self.__e=1.0\n        else:\n            a=-0.5*u/energy\n            self.__e=(1-hh/(a*u))**0.5\n        \n        if self.__e!=0.0:\n            cosf=(hh/(self.__u*r.mag())-1)/self.__e\n            cosf=max(-1.0,min(1.0,cosf))\n            self.__f=abs(math.acos(cosf))\n            if Vector3.Dot(r,v)<0:\n                self.__f=-1*self.__f\n            print(self.__f)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 570, "lines_of_code": 18, "inputs": ["self", "r", "v", "t", "u"], "restricted": false}
{"id": "940577a75d8ceeaac861e50172f855817646bb15ab774d9608a3a28516f44b77", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_flight_angle", "description": "Extracted function orbit.get_flight_angle from orbit.py", "code": "    def get_flight_angle(self,f):\n        return math.atan(self.__e*math.sin(f)/(1+self.__e*math.cos(f)))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 106, "lines_of_code": 2, "inputs": ["self", "f"], "restricted": false}
{"id": "59d3e0bc33d4cc690f4f281ffcc7b3c1f1f81af0e6cc2cf0747b5b114b67fadd", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_a", "description": "Extracted function orbit.get_a from orbit.py", "code": "    def get_a(self):\n        return Vector3.Dot(self.__h,self.__h)/(self.__u*(1-self.__e**2))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 94, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "181aed68069f14fc7781b745ac9008dd942b6064230910327b75213fd19b797b", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_pe", "description": "Extracted function orbit.get_pe from orbit.py", "code": "    def get_pe(self):\n        a=self.get_a()\n        return a*(1-self.__e)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 75, "lines_of_code": 3, "inputs": ["self"], "restricted": false}
{"id": "6689fbb102ae8b0727357d2b60ad037d0968bad70d486563e6103e04413da28c", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_ap", "description": "Extracted function orbit.get_ap from orbit.py", "code": "    def get_ap(self):\n        a=self.get_a()\n        return a*(1+self.__e)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 75, "lines_of_code": 3, "inputs": ["self"], "restricted": false}
{"id": "e1fdb50e8b33e72c651bc6d1b81601ad01149e9ccac8b1659128fd4f92c9aa70", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit", "description": "Extracted class orbit from orbit.py", "code": "class orbit:\n    def __init__(self,u):\n        self.__e=0.0\n        self.__u=u\n        self.__f=0.0\n        self.__t=0.0\n        self.__h=Vector3(0.0,0.0,0.0)\n        self.__f0=Vector3(0.0,0.0,0.0)    \n    def set_r_v_t(self,r,v,t,u):\n        self.__t=t\n        self.__h=Vector3.Cross(v,r)\n        hh=Vector3.Dot(self.__h,self.__h)\n        energy=0.5*v.mag()**2-u/r.mag()\n        if energy==0.0:\n            self.__e=1.0\n        else:\n            a=-0.5*u/energy\n            self.__e=(1-hh/(a*u))**0.5\n        \n        if self.__e!=0.0:\n            cosf=(hh/(self.__u*r.mag())-1)/self.__e\n            cosf=max(-1.0,min(1.0,cosf))\n            self.__f=abs(math.acos(cosf))\n            if Vector3.Dot(r,v)<0:\n                self.__f=-1*self.__f\n            print(self.__f)\n\n    def get_flight_angle(self,f):\n        return math.atan(self.__e*math.sin(f)/(1+self.__e*math.cos(f)))\n    \n    def get_a(self):\n        return Vector3.Dot(self.__h,self.__h)/(self.__u*(1-self.__e**2))\n\n    def get_pe(self):\n        a=self.get_a()\n        return a*(1-self.__e)\n    \n    def get_ap(self):\n        a=self.get_a()\n        return a*(1+self.__e)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1134, "lines_of_code": 40, "restricted": false}
{"id": "8e91f976ff4f1da8e9f042349c82b8797cddeed34825496615bff1e52205066f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "target.__init__", "description": "Extracted function target.__init__ from peg.py", "code": "    def __init__(self):\n        self.normal=Vector3(0.0,0.0,0.0)\n        self.orbit=Korbit.orbit()\n        self.angle=0.0\n        self.radius=0.0\n        self.velocity=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 172, "lines_of_code": 6, "inputs": ["self"], "restricted": false}
{"id": "f2b9469dfb2d0e75c76ef5a7c2dd9922b589b7662b6d947b1d18a8dfb873717d", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "state.__init__", "description": "Extracted function state.__init__ from peg.py", "code": "    def __init__(self):\n        self.time=0.0\n        self.mass=0.0\n        self.radius=Vector3(0.0,0.0,0.0)\n        self.velocity=Vector3(0.0,0.0,0.0)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 152, "lines_of_code": 5, "inputs": ["self"], "restricted": false}
{"id": "566bbd8b3a63a2743c2d82855afe795f5fe2766bcb31e2c996e229de9025a954", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "previous.__init__", "description": "Extracted function previous.__init__ from peg.py", "code": "    def __init__(self):\n        self.rbias=Vector3(0.0,0.0,0.0)\n        self.rd=Vector3(0.0,0.0,0.0)\n        self.rgrav=Vector3(0.0,0.0,0.0)\n        self.time=0.0\n        self.v=Vector3(0.0,0.0,0.0)\n        self.vgo=Vector3(0.0,0.0,0.0)\n        self.tgo=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 258, "lines_of_code": 8, "inputs": ["self"], "restricted": false}
{"id": "ae2f2a237007ad2a2a593ade4a254d093d9a4943ca9624cda72dedaaa2535a20", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "stage.__init__", "description": "Extracted function stage.__init__ from peg.py", "code": "    def __init__(self):\n        self.massWet=0.0\n        self.massDry=0.0\n        self.gLim=10.0\n        self.isp=0.0\n        self.thrust=0.0\n        self.mode=0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 162, "lines_of_code": 7, "inputs": ["self"], "restricted": false}
{"id": "5895987d96433342d2000efb82b4dba591babf70319908eecdb30667232fae38", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__init__", "description": "Extracted function pegas.__init__ from peg.py", "code": "    def __init__(self,conn):\n        self.__conn=conn\n        self.__vessel=conn.space_center.active_vessel\n        self.__earth=conn.space_center.bodies['Earth']\n        self.__u=self.__vessel.orbit.body.gravitational_parameter\n        self.__reference_frame=self.__vessel.orbit.body.non_rotating_reference_frame\n        self.__stages=[]\n        self.__target=target()\n        self.__state=state()\n        self.__previous=previous()\n        self.__tgo=0.0\n        self.__last_stage_mass=0.0\n        self.__gLim=4.5\n        self.__output=(self.__vessel.flight().pitch,self.__vessel.flight().heading)\n        self.__conic_extrapolation=Korbit.orbit()\n        self.__mode=0 #0:standard 1:reference orbit\n        self.__lambdadot=Vector3(0,0,0)\n        self.__iF_=Vector3(0,0,0)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 776, "lines_of_code": 18, "inputs": ["self", "conn"], "restricted": false}
{"id": "74e3b7038ae08970f16d0188b8d0f1a75282b092971aff514bad281bda375c7a", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__upfg", "description": "Extracted function pegas.__upfg from peg.py", "code": "    def __upfg(self,n):\n\n        stages=self.__stages\n        iy = self.__target.normal\n        t = self.__state.time\n        m = self.__state.mass\n        r = self.__state.radius\n        v = self.__state.velocity\n\n        rbias = self.__previous.rbias\n        rd = self.__previous.rd\n        rgrav = self.__previous.rgrav\n        tp = self.__previous.time\n        vprev = self.__previous.v\n        vgo = self.__previous.vgo\n\n#1\n        SM=[] \n        aL=[] \n        ve=[] \n        fT=[] \n        aT=[] \n        tu=[] \n        tb=[] \n        \n        for i in range(n):\n    \t    SM.append(stages[i].mode)\n    \t    aL.append(stages[i].gLim*g0)\n    \t    fT.append(stages[i].thrust)\n    \t    ve.append(stages[i].isp*g0)\n    \t    aT.append(fT[i] / stages[i].massWet)\n    \t    tu.append(ve[i]/aT[i])\n    \t    if stages[i].mode==0:\n                tb.append((stages[i].massWet-stages[i].massDry)*ve[i]/fT[i])\n    \t    else:\n                tb.append(ve[i]*math.log(stages[i].massWet/stages[i].massDry)/aL[i])\n    #2\n        dt = t-tp\n        dvsensed = v-vprev\n        vgo = vgo-dvsensed\n\n    #3\t\n        if SM[0]==0 :\n            aT[0] = fT[0] / m\n        else:\n            aT[0] = aL[0]\n        \n        tu[0] = ve[0] / aT[0]\n        L = 0.0\n        Li =[]\n        for i in range(n-1):\n    \t    if SM[i]==0 :\n    \t\t    Li.append( ve[i]*math.log(tu[i]/(tu[i]-tb[i])))\n    \t    else:\n    \t    \tLi.append( aL[i]*tb[i] )\n    \t    L = L + Li[i]\n    \t\n    \t    if L>vgo.mag() :\n    \t\t    return self.__upfg(n-1)    \n                \n        Li.append(vgo.mag() - L)\n        tgoi = []\n        for i in range(n):\n            if SM[i]==0 :\n                tb[i] = tu[i] * (1-math.exp((-Li[i]/ve[i])))\n            else:\n                tb[i] = Li[i] / aL[i]\n\n            if i==0 :\n                tgoi.append(tb[i])\n            else: \n                tgoi.append(tgoi[i-1] + tb[i])\n        tgo=tgoi[n-1]\n\n    #4\n        L=0.0\n        J=0.0\n        S=0.0\n        Q=0.0\n        H=0.0\n        P=0.0\n        \n        Ji=[]\n        Si=[]\n        Qi=[]\n        Pi=[]\n        tgoi1 = 0.0\n        \n        for i in range(n):\n    \t    if i>0:\n    \t\t    tgoi1 = tgoi[i-1]\n\n    \t    if SM[i]==0:\n    \t\t    Ji.append( tu[i]*Li[i] - ve[i]*tb[i] )                                 \n    \t\t    Si.append( -Ji[i] + tb[i]*Li[i] )                                      \n    \t\t    Qi.append( Si[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 )                   \n    \t\t    Pi.append( Qi[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 * (tb[i]/3+tgoi1) )\n\n    \t    else:\n    \t\t    Ji.append( 0.5*Li[i]*tb[i] )                                      \n    \t\t    Si.append( Ji[i] )                                                \n    \t\t    Qi.append( Si[i]*(tb[i]/3+tgoi1) )                                \n    \t\t    Pi.append( (1/6)*Si[i]*(tgoi[i]**2 + 2*tgoi[i]*tgoi1 + 3*tgoi1**2) )\n\n    \t    Ji[i] = Ji[i] + Li[i]*tgoi1\n    \t    Si[i] = Si[i] + L*tb[i]    \n    \t    Qi[i] = Qi[i] + J*tb[i]    \n    \t    Pi[i] = Pi[i] + H*tb[i]    \n    \t\t                             \n    \t    L = L+Li[i]                \n    \t    J = J+Ji[i]                \n    \t    S = S+Si[i]                \n    \t    Q = Q+Qi[i]                \n    \t    P = P+Pi[i]                \n    \t    H = J*tgoi[i] - Q\n    #5\n        _lambda = vgo.unit_vector()\n        if self.__previous.tgo>0:\n        \trgrav = (tgo/self.__previous.tgo)**2 * rgrav\n        \n        rgo = rd - (r + v*tgo + rgrav)\n        iz = Vector3.Cross(rd,iy).unit_vector()\n        rgoxy = rgo - Vector3.Dot(iz,rgo)*iz\n        rgoz = (S - Vector3.Dot(_lambda,rgoxy)) / Vector3.Dot(_lambda,iz)\n        rgo = rgoxy + rgoz*iz + rbias\n        lambdade = Q - S*J/L\n        self.__lambdadot = (rgo - S*_lambda) / lambdade\n        self.__iF_ = _lambda - self.__lambdadot*J/L\n        self.__iF_ = self.__iF_.unit_vector()\n        phi = Vector3.Angle(self.__iF_,_lambda)\n        phidot = -phi*L/J\n        vthrust = (L - 0.5*L*phi**2 - J*phi*phidot - 0.5*H*phidot**2)*_lambda\n        rthrust = (S - 0.5*S*phi**2 - Q*phi*phidot - 0.5*P*phidot**2)*_lambda\n        rthrust = rthrust - (S*phi + Q*phidot)*self.__lambdadot.unit_vector()\n        vbias = vgo - vthrust\n        rbias = rgo - rthrust\n        rbias=rbias\n        vbias=vbias\n\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(self.__iF_,_up)\n        inplane =self.__iF_ - Vector3.Dot(_up,self.__iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        \n        self.__output=(pitch,yaw)\n    #\t7\n\n        ''\n        rc1 = r - 0.1*rthrust - (tgo/30)*vthrust\n        vc1 = v + 1.2*rthrust/tgo - 0.1*vthrust\n        self.__conic_extrapolation.set_r_v(rc1.tuple3(),vc1.tuple3(),0,self.__u)\n        pack = self.__conic_extrapolation.state_at_t(tgo)\n        rgrav = Vector3.Tuple3(pack[0]) - rc1 - vc1*tgo\n        vgrav = Vector3.Tuple3(pack[1]) - vc1\n\n        #print(rbias)\n        #print(vbias)\n        #print('\\n')\n      \n    #\t8\n        rp = r + v*tgo + rgrav + rthrust\n        rp = rp - Vector3.Dot(rp,iy)*iy\n\n        vd=Vector3(0.0,0.0,0.0)\n        if self.__mode==0:\n            gamma = self.__target.angle\n            rdval = self.__target.radius\n            vdval = self.__target.velocity\n            rd = rdval*rp.unit_vector()\n            ix = rd.unit_vector()\n            iz = Vector3.Cross(ix,iy)\n            vd=(iz*math.cos(gamma)+ix*math.sin(gamma))*vdval\n        elif self.__mode==1:\n            pe=Vector3.Tuple3(self.__target.orbit.pe_vector())\n            f=Vector3.Angle(pe,rp)\n            if Vector3.Dot(Vector3.Cross(pe,rp),self.__target.normal)>0:\n                f=-f\n            target_state= self.__target.orbit.state_at_f(f)\n\n            rd=Vector3.Tuple3(target_state[0])\n            vd=Vector3.Tuple3(target_state[1])\n        else:\n            print('pegas error:unkown work mode')\n\n        vgo = vd - v - vgrav + vbias\n\n        self.__previous.rbias = rbias\n        self.__previous.rd    = rd   \n        self.__previous.rgrav = rgrav\n        self.__previous.time  = self.__state.time   \n        self.__previous.v     = self.__state.velocity\n        self.__previous.vgo   = vgo \n        self.__previous.tgo=tgo\n        self.__tgo=self.__previous.tgo\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 6387, "lines_of_code": 202, "inputs": ["self", "n"], "restricted": false}
{"id": "ad56da1f901d26bb839c525df0003e6bb5a4bb2b801906d288a10d38a539dba0", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_std_target", "description": "Extracted function pegas.set_std_target from peg.py", "code": "    def set_std_target(self,inc,lan,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1080, "lines_of_code": 21, "inputs": ["self", "inc", "lan", "radius", "velocity", "angle"], "restricted": false}
{"id": "eb508558d694bf9bc4030d54f47facb3937d57e19c2b33d53412617d4ade3eca", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_ref_target", "description": "Extracted function pegas.set_ref_target from peg.py", "code": "    def set_ref_target(self,pe,ap,inc,lan,aop):\n        self.__mode=1\n        sem=0.5*(pe+ap)\n        ecc=0.5*(ap-pe)/sem\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.orbit.set_element(sem,ecc,inc,lan,aop,0.0,0.0,self.__u)\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(20))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*v.mag()\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1083, "lines_of_code": 20, "inputs": ["self", "pe", "ap", "inc", "lan", "aop"], "restricted": false}
{"id": "f000560e0c49e09bfdfdd245eb4ca67aa49377acdea6b26af0f67c708d3409d7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_radius_speed_target", "description": "Extracted function pegas.set_radius_speed_target from peg.py", "code": "    def set_radius_speed_target(self,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        self.__target.normal=Vector3.Cross(self.__state.velocity,self.__state.radius).unit_vector()\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1063, "lines_of_code": 20, "inputs": ["self", "radius", "velocity", "angle"], "restricted": false}
{"id": "2635ec051f65f2b8a909b31e87f950c122a74c2292e74484bb7345e34fa49afe", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__add_stage", "description": "Extracted function pegas.__add_stage from peg.py", "code": "    def __add_stage(self,massWet,massDry,thrust,isp,gLim,mode):\n        _stage=stage()\n        _stage.massWet=massWet\n        _stage.massDry=massDry\n        _stage.gLim=gLim\n        _stage.isp=isp\n        _stage.thrust=thrust\n        _stage.mode=mode\n        self.__stages.append(_stage)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 288, "lines_of_code": 9, "inputs": ["self", "massWet", "massDry", "thrust", "isp", "gLim", "mode"], "restricted": false}
{"id": "f4074d9f84ea357d7278fd2cefd5d7c87c8b3c045717ba0f85b41c7a4314f968", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.add_stage", "description": "Extracted function pegas.add_stage from peg.py", "code": "    def add_stage(self,massWet,massDry,thrust,isp,gLim=4.5):\n        _stage=stage()\n        self.__stages.reverse()\n        last_stage_mass=self.__last_stage_mass\n            \n        if thrust==0 or isp==0 or massWet==massDry:\n            self.__last_stage_mass=last_stage_mass+massWet\n            return None\n      \n        mass_tmp=thrust/(gLim*g0)\n        if mass_tmp<=massDry+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,0)\n        elif mass_tmp>=massWet+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,1)\n        else:\n            self.__add_stage(mass_tmp,massDry+last_stage_mass,thrust,isp,gLim,1)\n            self.__add_stage(massWet+last_stage_mass,mass_tmp,thrust,isp,gLim,0)\n        self.__last_stage_mass=last_stage_mass+massWet\n        self.__stages.reverse()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 901, "lines_of_code": 19, "inputs": ["self", "massWet", "massDry", "thrust", "isp", "gLim"], "restricted": false}
{"id": "01742c7e24a0173bac615de3925eddeafda87dde884c01ea245bc122b5b2106e", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.slerp", "description": "Extracted function pegas.slerp from peg.py", "code": "    def slerp(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        r = self.__state.radius\n\n        dt=self.__conn.space_center.ut-self.__previous.time\n        iF_ = self.__iF_ + self.__lambdadot*dt\n        iF_ = iF_.unit_vector()\n        \n        self.__tgo=self.__previous.tgo-dt\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(iF_,_up)\n        inplane =iF_- Vector3.Dot(_up,iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        self.__output=(pitch,yaw)        \n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1007, "lines_of_code": 25, "inputs": ["self"], "restricted": false}
{"id": "1721cc903eda5f74a112df5dadd29fe3fc3ea90656e3dd701539a754c80a31cb", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.update", "description": "Extracted function pegas.update from peg.py", "code": "    def update(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n \n        vessel=self.__vessel\n        n=len(self.__stages)\n        self.__stages[0].massWet=self.__state.mass\n        if self.__state.mass<=self.__stages[0].massDry:\n            self.__stages.pop(0)\n            vessel.control.throttle=1.0\n            #self.__throttle_bias.clear()\n            return None\n        \n        '''\n        if self.__stages[0].mode!=0:\n            acc=vessel.thrust/max(vessel.mass,0.1)\n            dacc=acc-g0*self.__stages[0].gLim\n            dacc=max(-1,min(1,dacc))\n            vessel.control.throttle = 1.0-self.__throttle_bias.integral(0.05*dacc)\n        '''\n\n        last_tgo=self.__previous.tgo\n        self.__upfg(n)\n        #if abs(last_tgo-self.__previous.tgo)>1:\n        #   return None\n        return self.__output\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1061, "lines_of_code": 28, "inputs": ["self"], "restricted": false}
{"id": "f2d448460326744d21a0ed23a6f8601ca531bc8894d4a30447b9764711184d22", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.update_stages", "description": "Extracted function pegas.update_stages from peg.py", "code": "    def update_stages(self,thrustK=1.0):\n        self.__last_stage_mass=0.0\n        self.__stages=[]\n        stages=get_stages(self.__vessel.parts.root)\n        for i in stages:\n            self.add_stage(i[0],i[1],i[2]*thrustK,i[3],self.__gLim)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 246, "lines_of_code": 6, "inputs": ["self", "thrustK"], "restricted": false}
{"id": "08f3e13e42a757707744347fdda0d5fd73559e87f9f96efdf40fe21dc8837bc3", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.time_to_go", "description": "Extracted function pegas.time_to_go from peg.py", "code": "    def time_to_go(self):\n            return self.__tgo\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 56, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "681d584f301e0916aa059c3f381547507cc551a0a8ff316448ace18ba9cf9221", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__time_to_stage", "description": "Extracted function pegas.__time_to_stage from peg.py", "code": "    def __time_to_stage(self,stage):\n        if stage.mode==0:\n            dm=stage.thrust/(stage.isp*g0)\n            return (stage.massWet-stage.massDry)/dm     \n        else:\n            dv=stage.isp*math.log(stage.massWet/stage.massDry)\n            return dv/stage.gLim\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 273, "lines_of_code": 7, "inputs": ["self", "stage"], "restricted": false}
{"id": "9df399335e95739cf20fa9613d39d275677de335b57aabc728cc49be2b6c50b0", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.time_to_stage", "description": "Extracted function pegas.time_to_stage from peg.py", "code": "    def time_to_stage(self):\n        stage=self.__stages[0]\n        ret=self.__time_to_stage(stage)\n        if len(self.__stages)>1:\n            if self.__stages[1].massWet==stage.massDry:\n                ret=ret+self.__time_to_stage(self.__stages[1])\n        return ret\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 271, "lines_of_code": 7, "inputs": ["self"], "restricted": false}
{"id": "875fc1c6eaef11c6ed65ca9fa7de8e67f6af79b78b656602683c06eaa8513684", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.stages_num", "description": "Extracted function pegas.stages_num from peg.py", "code": "    def stages_num(self):\n        return len(self.__stages)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 60, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "81706c5f914675bbda7e0a141e07019d34ec5b5c4589e77de7b884439321a578", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.angle_to_rd", "description": "Extracted function pegas.angle_to_rd from peg.py", "code": "    def angle_to_rd(self):\n        return Vector3.Angle(self.__previous.rd,self.__state.radius)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 96, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "939a0c56064a283159d213e9f5b2a7569053b0950615c9d3f7ebc49c83ac89ac", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.rd_position", "description": "Extracted function pegas.rd_position from peg.py", "code": "    def rd_position(self):\n        pos=self.__previous.rd.tuple3()\n        ref=self.__reference_frame\n        body=self.__vessel.orbit.body\n        turn_angle=math.degrees(body.rotational_speed*self.__previous.tgo)\n        return (body.longitude_at_position(pos,ref)-turn_angle,body.latitude_at_position(pos,ref))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 314, "lines_of_code": 6, "inputs": ["self"], "restricted": false}
{"id": "02aadc8a11ebcad17a7047956086f3e63ca8c668fd68f54b7f0fb000bb770938", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_max_g", "description": "Extracted function pegas.set_max_g from peg.py", "code": "    def set_max_g(self,g):\n        self.__gLim=g\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 49, "lines_of_code": 2, "inputs": ["self", "g"], "restricted": false}
{"id": "cfcf66abbef84e9c435cfa4a43ca10c616cd19e5faf72839824ef2ccc5dcf975", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.vehicle_info", "description": "Extracted function pegas.vehicle_info from peg.py", "code": "    def vehicle_info(self):\n        for i in self.__stages:\n            print('wet mass:%f dry mass:%f thurst:%f isp:%f'%(i.massWet,i.massDry,i.thrust,i.isp))", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 158, "lines_of_code": 3, "inputs": ["self"], "restricted": false}
{"id": "b90b5f1e70171fc18691ff64d179fa7bc5c8f7e92a66650d5733e008fb80b584", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "target", "description": "Extracted class target from peg.py", "code": "class target:\n    def __init__(self):\n        self.normal=Vector3(0.0,0.0,0.0)\n        self.orbit=Korbit.orbit()\n        self.angle=0.0\n        self.radius=0.0\n        self.velocity=0.0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 186, "lines_of_code": 7, "restricted": false}
{"id": "0df165f9947f9f42ecba66918a7499a55eadb7280d543165e5712c8567f339d4", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "state", "description": "Extracted class state from peg.py", "code": "class state:\n    def __init__(self):\n        self.time=0.0\n        self.mass=0.0\n        self.radius=Vector3(0.0,0.0,0.0)\n        self.velocity=Vector3(0.0,0.0,0.0)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 165, "lines_of_code": 6, "restricted": false}
{"id": "7b26c3ab6fea5df48e38467d5020d94d1c4e429fd519986b1a5026d4a0b56533", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "previous", "description": "Extracted class previous from peg.py", "code": "class previous:\n    def __init__(self):\n        self.rbias=Vector3(0.0,0.0,0.0)\n        self.rd=Vector3(0.0,0.0,0.0)\n        self.rgrav=Vector3(0.0,0.0,0.0)\n        self.time=0.0\n        self.v=Vector3(0.0,0.0,0.0)\n        self.vgo=Vector3(0.0,0.0,0.0)\n        self.tgo=0.0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 274, "lines_of_code": 9, "restricted": false}
{"id": "f55ce4604bd26ad81c437bc78fe6938e6ca549a2bf607f33d7715ebc6241005f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "stage", "description": "Extracted class stage from peg.py", "code": "class stage:\n    def __init__(self):\n        self.massWet=0.0\n        self.massDry=0.0\n        self.gLim=10.0\n        self.isp=0.0\n        self.thrust=0.0\n        self.mode=0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 175, "lines_of_code": 8, "restricted": false}
{"id": "90a59e849c2114cd98a940a5f7320bc5fd53c0101cc7275f7c84af7cfe6a0c27", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas", "description": "Extracted class pegas from peg.py", "code": "class pegas:\n    def __init__(self,conn):\n        self.__conn=conn\n        self.__vessel=conn.space_center.active_vessel\n        self.__earth=conn.space_center.bodies['Earth']\n        self.__u=self.__vessel.orbit.body.gravitational_parameter\n        self.__reference_frame=self.__vessel.orbit.body.non_rotating_reference_frame\n        self.__stages=[]\n        self.__target=target()\n        self.__state=state()\n        self.__previous=previous()\n        self.__tgo=0.0\n        self.__last_stage_mass=0.0\n        self.__gLim=4.5\n        self.__output=(self.__vessel.flight().pitch,self.__vessel.flight().heading)\n        self.__conic_extrapolation=Korbit.orbit()\n        self.__mode=0 #0:standard 1:reference orbit\n        self.__lambdadot=Vector3(0,0,0)\n        self.__iF_=Vector3(0,0,0)\n    \n    def __upfg(self,n):\n\n        stages=self.__stages\n        iy = self.__target.normal\n        t = self.__state.time\n        m = self.__state.mass\n        r = self.__state.radius\n        v = self.__state.velocity\n\n        rbias = self.__previous.rbias\n        rd = self.__previous.rd\n        rgrav = self.__previous.rgrav\n        tp = self.__previous.time\n        vprev = self.__previous.v\n        vgo = self.__previous.vgo\n\n#1\n        SM=[] \n        aL=[] \n        ve=[] \n        fT=[] \n        aT=[] \n        tu=[] \n        tb=[] \n        \n        for i in range(n):\n    \t    SM.append(stages[i].mode)\n    \t    aL.append(stages[i].gLim*g0)\n    \t    fT.append(stages[i].thrust)\n    \t    ve.append(stages[i].isp*g0)\n    \t    aT.append(fT[i] / stages[i].massWet)\n    \t    tu.append(ve[i]/aT[i])\n    \t    if stages[i].mode==0:\n                tb.append((stages[i].massWet-stages[i].massDry)*ve[i]/fT[i])\n    \t    else:\n                tb.append(ve[i]*math.log(stages[i].massWet/stages[i].massDry)/aL[i])\n    #2\n        dt = t-tp\n        dvsensed = v-vprev\n        vgo = vgo-dvsensed\n\n    #3\t\n        if SM[0]==0 :\n            aT[0] = fT[0] / m\n        else:\n            aT[0] = aL[0]\n        \n        tu[0] = ve[0] / aT[0]\n        L = 0.0\n        Li =[]\n        for i in range(n-1):\n    \t    if SM[i]==0 :\n    \t\t    Li.append( ve[i]*math.log(tu[i]/(tu[i]-tb[i])))\n    \t    else:\n    \t    \tLi.append( aL[i]*tb[i] )\n    \t    L = L + Li[i]\n    \t\n    \t    if L>vgo.mag() :\n    \t\t    return self.__upfg(n-1)    \n                \n        Li.append(vgo.mag() - L)\n        tgoi = []\n        for i in range(n):\n            if SM[i]==0 :\n                tb[i] = tu[i] * (1-math.exp((-Li[i]/ve[i])))\n            else:\n                tb[i] = Li[i] / aL[i]\n\n            if i==0 :\n                tgoi.append(tb[i])\n            else: \n                tgoi.append(tgoi[i-1] + tb[i])\n        tgo=tgoi[n-1]\n\n    #4\n        L=0.0\n        J=0.0\n        S=0.0\n        Q=0.0\n        H=0.0\n        P=0.0\n        \n        Ji=[]\n        Si=[]\n        Qi=[]\n        Pi=[]\n        tgoi1 = 0.0\n        \n        for i in range(n):\n    \t    if i>0:\n    \t\t    tgoi1 = tgoi[i-1]\n\n    \t    if SM[i]==0:\n    \t\t    Ji.append( tu[i]*Li[i] - ve[i]*tb[i] )                                 \n    \t\t    Si.append( -Ji[i] + tb[i]*Li[i] )                                      \n    \t\t    Qi.append( Si[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 )                   \n    \t\t    Pi.append( Qi[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 * (tb[i]/3+tgoi1) )\n\n    \t    else:\n    \t\t    Ji.append( 0.5*Li[i]*tb[i] )                                      \n    \t\t    Si.append( Ji[i] )                                                \n    \t\t    Qi.append( Si[i]*(tb[i]/3+tgoi1) )                                \n    \t\t    Pi.append( (1/6)*Si[i]*(tgoi[i]**2 + 2*tgoi[i]*tgoi1 + 3*tgoi1**2) )\n\n    \t    Ji[i] = Ji[i] + Li[i]*tgoi1\n    \t    Si[i] = Si[i] + L*tb[i]    \n    \t    Qi[i] = Qi[i] + J*tb[i]    \n    \t    Pi[i] = Pi[i] + H*tb[i]    \n    \t\t                             \n    \t    L = L+Li[i]                \n    \t    J = J+Ji[i]                \n    \t    S = S+Si[i]                \n    \t    Q = Q+Qi[i]                \n    \t    P = P+Pi[i]                \n    \t    H = J*tgoi[i] - Q\n    #5\n        _lambda = vgo.unit_vector()\n        if self.__previous.tgo>0:\n        \trgrav = (tgo/self.__previous.tgo)**2 * rgrav\n        \n        rgo = rd - (r + v*tgo + rgrav)\n        iz = Vector3.Cross(rd,iy).unit_vector()\n        rgoxy = rgo - Vector3.Dot(iz,rgo)*iz\n        rgoz = (S - Vector3.Dot(_lambda,rgoxy)) / Vector3.Dot(_lambda,iz)\n        rgo = rgoxy + rgoz*iz + rbias\n        lambdade = Q - S*J/L\n        self.__lambdadot = (rgo - S*_lambda) / lambdade\n        self.__iF_ = _lambda - self.__lambdadot*J/L\n        self.__iF_ = self.__iF_.unit_vector()\n        phi = Vector3.Angle(self.__iF_,_lambda)\n        phidot = -phi*L/J\n        vthrust = (L - 0.5*L*phi**2 - J*phi*phidot - 0.5*H*phidot**2)*_lambda\n        rthrust = (S - 0.5*S*phi**2 - Q*phi*phidot - 0.5*P*phidot**2)*_lambda\n        rthrust = rthrust - (S*phi + Q*phidot)*self.__lambdadot.unit_vector()\n        vbias = vgo - vthrust\n        rbias = rgo - rthrust\n        rbias=rbias\n        vbias=vbias\n\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(self.__iF_,_up)\n        inplane =self.__iF_ - Vector3.Dot(_up,self.__iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        \n        self.__output=(pitch,yaw)\n    #\t7\n\n        ''\n        rc1 = r - 0.1*rthrust - (tgo/30)*vthrust\n        vc1 = v + 1.2*rthrust/tgo - 0.1*vthrust\n        self.__conic_extrapolation.set_r_v(rc1.tuple3(),vc1.tuple3(),0,self.__u)\n        pack = self.__conic_extrapolation.state_at_t(tgo)\n        rgrav = Vector3.Tuple3(pack[0]) - rc1 - vc1*tgo\n        vgrav = Vector3.Tuple3(pack[1]) - vc1\n\n        #print(rbias)\n        #print(vbias)\n        #print('\\n')\n      \n    #\t8\n        rp = r + v*tgo + rgrav + rthrust\n        rp = rp - Vector3.Dot(rp,iy)*iy\n\n        vd=Vector3(0.0,0.0,0.0)\n        if self.__mode==0:\n            gamma = self.__target.angle\n            rdval = self.__target.radius\n            vdval = self.__target.velocity\n            rd = rdval*rp.unit_vector()\n            ix = rd.unit_vector()\n            iz = Vector3.Cross(ix,iy)\n            vd=(iz*math.cos(gamma)+ix*math.sin(gamma))*vdval\n        elif self.__mode==1:\n            pe=Vector3.Tuple3(self.__target.orbit.pe_vector())\n            f=Vector3.Angle(pe,rp)\n            if Vector3.Dot(Vector3.Cross(pe,rp),self.__target.normal)>0:\n                f=-f\n            target_state= self.__target.orbit.state_at_f(f)\n\n            rd=Vector3.Tuple3(target_state[0])\n            vd=Vector3.Tuple3(target_state[1])\n        else:\n            print('pegas error:unkown work mode')\n\n        vgo = vd - v - vgrav + vbias\n\n        self.__previous.rbias = rbias\n        self.__previous.rd    = rd   \n        self.__previous.rgrav = rgrav\n        self.__previous.time  = self.__state.time   \n        self.__previous.v     = self.__state.velocity\n        self.__previous.vgo   = vgo \n        self.__previous.tgo=tgo\n        self.__tgo=self.__previous.tgo\n\n    def set_std_target(self,inc,lan,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n\n    def set_ref_target(self,pe,ap,inc,lan,aop):\n        self.__mode=1\n        sem=0.5*(pe+ap)\n        ecc=0.5*(ap-pe)/sem\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.orbit.set_element(sem,ecc,inc,lan,aop,0.0,0.0,self.__u)\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(20))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*v.mag()\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n    def set_radius_speed_target(self,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        self.__target.normal=Vector3.Cross(self.__state.velocity,self.__state.radius).unit_vector()\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n    def __add_stage(self,massWet,massDry,thrust,isp,gLim,mode):\n        _stage=stage()\n        _stage.massWet=massWet\n        _stage.massDry=massDry\n        _stage.gLim=gLim\n        _stage.isp=isp\n        _stage.thrust=thrust\n        _stage.mode=mode\n        self.__stages.append(_stage)\n\n    def add_stage(self,massWet,massDry,thrust,isp,gLim=4.5):\n        _stage=stage()\n        self.__stages.reverse()\n        last_stage_mass=self.__last_stage_mass\n            \n        if thrust==0 or isp==0 or massWet==massDry:\n            self.__last_stage_mass=last_stage_mass+massWet\n            return None\n      \n        mass_tmp=thrust/(gLim*g0)\n        if mass_tmp<=massDry+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,0)\n        elif mass_tmp>=massWet+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,1)\n        else:\n            self.__add_stage(mass_tmp,massDry+last_stage_mass,thrust,isp,gLim,1)\n            self.__add_stage(massWet+last_stage_mass,mass_tmp,thrust,isp,gLim,0)\n        self.__last_stage_mass=last_stage_mass+massWet\n        self.__stages.reverse()\n\n    def slerp(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        r = self.__state.radius\n\n        dt=self.__conn.space_center.ut-self.__previous.time\n        iF_ = self.__iF_ + self.__lambdadot*dt\n        iF_ = iF_.unit_vector()\n        \n        self.__tgo=self.__previous.tgo-dt\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(iF_,_up)\n        inplane =iF_- Vector3.Dot(_up,iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        self.__output=(pitch,yaw)        \n\n    def update(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n \n        vessel=self.__vessel\n        n=len(self.__stages)\n        self.__stages[0].massWet=self.__state.mass\n        if self.__state.mass<=self.__stages[0].massDry:\n            self.__stages.pop(0)\n            vessel.control.throttle=1.0\n            #self.__throttle_bias.clear()\n            return None\n        \n        '''\n        if self.__stages[0].mode!=0:\n            acc=vessel.thrust/max(vessel.mass,0.1)\n            dacc=acc-g0*self.__stages[0].gLim\n            dacc=max(-1,min(1,dacc))\n            vessel.control.throttle = 1.0-self.__throttle_bias.integral(0.05*dacc)\n        '''\n\n        last_tgo=self.__previous.tgo\n        self.__upfg(n)\n        #if abs(last_tgo-self.__previous.tgo)>1:\n        #   return None\n        return self.__output\n\n    def update_stages(self,thrustK=1.0):\n        self.__last_stage_mass=0.0\n        self.__stages=[]\n        stages=get_stages(self.__vessel.parts.root)\n        for i in stages:\n            self.add_stage(i[0],i[1],i[2]*thrustK,i[3],self.__gLim)\n\n    def time_to_go(self):\n            return self.__tgo\n    \n    def __time_to_stage(self,stage):\n        if stage.mode==0:\n            dm=stage.thrust/(stage.isp*g0)\n            return (stage.massWet-stage.massDry)/dm     \n        else:\n            dv=stage.isp*math.log(stage.massWet/stage.massDry)\n            return dv/stage.gLim\n\n    def time_to_stage(self):\n        stage=self.__stages[0]\n        ret=self.__time_to_stage(stage)\n        if len(self.__stages)>1:\n            if self.__stages[1].massWet==stage.massDry:\n                ret=ret+self.__time_to_stage(self.__stages[1])\n        return ret\n\n    def stages_num(self):\n        return len(self.__stages)\n\n    def angle_to_rd(self):\n        return Vector3.Angle(self.__previous.rd,self.__state.radius)\n    \n    def rd_position(self):\n        pos=self.__previous.rd.tuple3()\n        ref=self.__reference_frame\n        body=self.__vessel.orbit.body\n        turn_angle=math.degrees(body.rotational_speed*self.__previous.tgo)\n        return (body.longitude_at_position(pos,ref)-turn_angle,body.latitude_at_position(pos,ref))\n\n    def set_max_g(self,g):\n        self.__gLim=g\n   \n    def vehicle_info(self):\n        for i in self.__stages:\n            print('wet mass:%f dry mass:%f thurst:%f isp:%f'%(i.massWet,i.massDry,i.thrust,i.isp))", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 15212, "lines_of_code": 415, "restricted": false}
{"id": "be05a527c5d45a20ef5802ead5e0fabdbe1eb16cbc1d7e3e39072c86abc9e448", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "find_resource", "description": "Extracted function find_resource from vehicle.py", "code": "def find_resource(parts,name):\n    ret=0.0\n    for i in parts:\n        for r in i.resources.all:\n            if r.name==name:\n                ret=ret+r.amount*r.density\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 184, "lines_of_code": 7, "inputs": ["parts", "name"], "restricted": false}
{"id": "0bfbce911b1085b7f0b9cb12c02d365382255ea507e2f662843d29d2e52a6261", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "traverse_engine", "description": "Extracted function traverse_engine from vehicle.py", "code": "def traverse_engine(parts):\n    engines = [e for e in parts if e.engine!=None]\n    res=[]\n    for e in engines:\n        fuel=0.0\n        for p in e.engine.propellants:\n            fuel=fuel+find_resource(parts,p.name)\n        res.append((e.engine,fuel))\n    return res\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 269, "lines_of_code": 9, "inputs": ["parts"], "restricted": false}
{"id": "4bfba329ffe87cc496cc9f14eb8471c6df51ceba1fb6a40ae413b0c4da2bf9e5", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "all_descendants", "description": "Extracted function all_descendants from vehicle.py", "code": "def all_descendants(root):\n    ret=[]\n    stack_parts=[root]\n    while stack_parts:\n        part = stack_parts.pop()\n        ret.append(part)\n        for i in part.children:\n            stack_parts.append(i)\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 223, "lines_of_code": 9, "inputs": ["root"], "restricted": false}
{"id": "a3fa4599a635e8cdd97426f57370c43bb5e444dd2d5325e0b7c95b371924b349", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "traverse_stage", "description": "Extracted function traverse_stage from vehicle.py", "code": "def traverse_stage(root):\n    stack_parts=[root]\n    decoupler=None\n    ret=[None,[]]\n    while stack_parts:\n        part = stack_parts.pop()\n        ret[1].append(part)\n        for child in part.children:\n            if child.decoupler==None :\n                stack_parts.append(child)\n            else:\n                tmp_parts=all_descendants(child)\n                engines = [e for e in tmp_parts if e.engine!=None]\n                if len(engines)==0:\n                    stack_parts.append(child)\n                else:\n                    if decoupler==None:\n                        decoupler=child\n                    elif decoupler.stage<child.stage:\n                        stack_parts.append(decoupler)\n                        decoupler=child\n                    else:\n                        stack_parts.append(child)\n    ret[0]=decoupler\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 865, "lines_of_code": 25, "inputs": ["root"], "restricted": false}
{"id": "4793dde2eefb34102b7eb8161780b9504bd83ef6c1439ef3f0dbac397c94a5e6", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "get_stages", "description": "Extracted function get_stages from vehicle.py", "code": "def get_stages(root):\n    ret=[]\n    next=root\n    while next:\n        isp=0.0\n        thrust=0.0\n        mass_wet=0.0\n        tmp=traverse_stage(next)\n        next=tmp[0]\n        parts=tmp[1]\n        for i in parts:\n            mass_wet=mass_wet+i.mass\n        mass_dry=mass_wet\n        engines=traverse_engine(parts)\n        for e in engines:\n            if e[1]>mass_wet*0.02:\n                thrust=thrust+e[0].max_vacuum_thrust\n                isp=e[0].vacuum_specific_impulse\n                mass_dry=mass_wet-e[1]\n        ret.append([mass_wet,mass_dry,thrust,isp])\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 587, "lines_of_code": 21, "inputs": ["root"], "restricted": false}
{"id": "3713ee14336b6a86d28a68141546469d0743b5878fdcb72da1856d8c62ea6481", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "vehicle_info", "description": "Extracted function vehicle_info from vehicle.py", "code": "def vehicle_info(vessel):\n    ret=get_stages(vessel.parts.root)\n    for i in ret:\n        print(i,end=' ')\n        print('m/M',i[0]/i[1])\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 138, "lines_of_code": 5, "inputs": ["vessel"], "restricted": false}
{"id": "ca9b536eb84b297c41b8a5db009530a70d947f60889327d63ab764d43f312ddf", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.__init__", "description": "Extracted function PID.__init__ from pid_controller.py", "code": "    def __init__(self,Kp,Ti,Td,i_max,i_min):\n        self.i_error = 0.0\n        command      = 0.0\n        self.running = False\n        self.set_gains(Kp,Ti,Td,i_max,i_min)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 173, "lines_of_code": 5, "inputs": ["self", "Kp", "Ti", "Td", "i_max", "i_min"], "restricted": false}
{"id": "adaba799c09facd92b0dcccb4c42152b9d28cdac789cb51c286003a08d1a7b4e", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.set_gains", "description": "Extracted function PID.set_gains from pid_controller.py", "code": "    def set_gains(self,Kp,Ti,Td,i_max,i_min):\n        self.Kp    = Kp\n        self.Ti    = Ti\n        self.Td    = Td\n        self.i_max = i_max\n        self.i_min = i_min\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 172, "lines_of_code": 6, "inputs": ["self", "Kp", "Ti", "Td", "i_max", "i_min"], "restricted": false}
{"id": "4079a2bc5530418e8113e810f64bbe9c53589c61c97fc934962205f21ee9a58c", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.reset", "description": "Extracted function PID.reset from pid_controller.py", "code": "    def reset(self):\n        self.i_error    = 0.0\n        self.error_last = 0.0\n        self.running    = False\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 113, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "79772e97588eb830d77a997d3724340a3c3bbc7c4fb4081529bcac5eaff8759c", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.calculate_command", "description": "Extracted function PID.calculate_command from pid_controller.py", "code": "    def calculate_command(self,error,dt):\n        if self.Ti > 0.0:\n            self.i_error = self.i_error + error*dt\n            self.i_error = min(max(self.i_error,self.i_min*self.Ti/self.Kp),self.i_max*self.Ti/self.Kp)\n\n            error += self.i_error/self.Ti\n\n        if self.Td > 0.0:\n            if self.running == True:\n                d_error = (error - error_last)*dt\n            else:\n                d_error = 0.0\n                running = True\n            self.error_last = error\n\n            error += d_error/self.Td\n\n        self.command = self.Kp*error\n        return self.command\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 599, "lines_of_code": 19, "inputs": ["self", "error", "dt"], "restricted": false}
{"id": "8a7b67f9d5321a0bea4d31227c71c8d1535e3addc59214acc19c24dac2115098", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID", "description": "Extracted class PID from pid_controller.py", "code": "class PID:\n    def __init__(self,Kp,Ti,Td,i_max,i_min):\n        self.i_error = 0.0\n        command      = 0.0\n        self.running = False\n        self.set_gains(Kp,Ti,Td,i_max,i_min)\n\n    def set_gains(self,Kp,Ti,Td,i_max,i_min):\n        self.Kp    = Kp\n        self.Ti    = Ti\n        self.Td    = Td\n        self.i_max = i_max\n        self.i_min = i_min\n        \n    def reset(self):\n        self.i_error    = 0.0\n        self.error_last = 0.0\n        self.running    = False\n\n    def calculate_command(self,error,dt):\n        if self.Ti > 0.0:\n            self.i_error = self.i_error + error*dt\n            self.i_error = min(max(self.i_error,self.i_min*self.Ti/self.Kp),self.i_max*self.Ti/self.Kp)\n\n            error += self.i_error/self.Ti\n\n        if self.Td > 0.0:\n            if self.running == True:\n                d_error = (error - error_last)*dt\n            else:\n                d_error = 0.0\n                running = True\n            self.error_last = error\n\n            error += d_error/self.Td\n\n        self.command = self.Kp*error\n        return self.command\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 1079, "lines_of_code": 38, "restricted": false}
{"id": "6c4646962a3fe8e6e7f74116e5df75bd73e181c1195870496c8ea3e55114eab0", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KRPC_Examples/getScience.py", "lang": "python", "name": "makeScience", "description": "Find the next experiement available for a defined type\n\nParameters:\n   Vessel: krpc vessel\n   expType: Type of the experiment\n      MK1Pod, MisteryGoo", "code": "def makeScience(vessel, expType=None):\n    '''\n    Find the next experiement available for a defined type\n\n    Parameters:\n       Vessel: krpc vessel\n       expType: Type of the experiment\n          MK1Pod, MisteryGoo\n    '''\n    experimentsName = {'MK1Pod':'mk1pod', 'MisteryGoo':'GooExperiment'}\n\n    experience = experimentsName[expType]\n    \n    experimentRan = False\n    for part in vessel.parts.all:\n        if part.experiment \\\n            and part.name == experience:\n            if not part.experiment.deployed:\n                print('Making science with {}'.format(experience))\n                part.experiment.run()\n                experimentRan = True\n                break\n    if not experimentRan:\n        print('No experiment available')\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 752, "lines_of_code": 24, "inputs": ["vessel", "expType"], "restricted": true}
{"id": "780731d6d8edf32b0a02085743ceb0e686da47d597da9ad7b757faed3404cc0b", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KRPC_Examples/matplotAnimation.py", "lang": "python", "name": "animate", "description": "Extracted function animate from KRPC_Examples/matplotAnimation.py", "code": "def animate(_):\n    global ksc_coord, data, happenings, xlim, ylim, parts_i, booster_sep, MECO, SECO\n\n    position = np.array((latitude(), longitude()))\n    h_distance = (np.linalg.norm(position - ksc_coord) * (2.*np.pi*planet_radius)/360.)/1000  # km\n\n    # EVENTS\n\n    parts = len(vessel.parts.all)\n\n    if parts != parts_i and not booster_sep:\n        booster_sep = True\n        event = pd.DataFrame([[h_distance, altitude()/1000, \"Booster separation\"]],\n                             columns=[\"Horizontal distance\", \"Altitude\", \"Name\"])\n        happenings = happenings.append(event)\n\n    elif parts != parts_i and booster_sep and not MECO:\n        MECO = True\n        event = pd.DataFrame([[h_distance, altitude()/1000, \"MECO\"]],\n                             columns=[\"Horizontal distance\", \"Altitude\", \"Name\"])\n        happenings = happenings.append(event)\n\n    elif parts != parts_i and booster_sep and MECO and not SECO:\n        SECO = True\n        event = pd.DataFrame([[h_distance, altitude()/1000, \"SECO\"]],\n                             columns=[\"Horizontal distance\", \"Altitude\", \"Name\"])\n        happenings = happenings.append(event)\n\n    parts_i = parts\n\n    # DATA\n\n    if str(vessel.situation) == \"VesselSituation.pre_launch\" or str(vessel.situation) == \"VesselSituation.landed\":\n        xar, yar = 0, 0\n        xhap, yhap = 0, 0\n\n    else:\n        newdata = pd.DataFrame([[h_distance, altitude()/1000]], columns=[\"Horizontal distance\", \"Altitude\"])\n        data = data.append(newdata)\n\n        xar = data[\"Horizontal distance\"]\n        yar = data[\"Altitude\"]\n        xhap = happenings[\"Horizontal distance\"]\n        yhap = happenings[\"Altitude\"]\n\n    # PLOT\n\n    if xlim - h_distance < 5:\n        xlim += 20\n\n    if ylim - altitude()/1000 < 5:\n        ylim += 10\n        xlim += 10\n\n    ax1.clear()  # can I move this to the start of the loop?\n    ax1.plot(xar, yar, color=\"white\", linewidth=\"3\")\n    ax1.scatter(xhap, yhap, color=\"white\", linewidth=\"5\")\n\n    plt.xlim(-2, xlim)\n    plt.ylim(0, ylim)\n\n    if booster_sep:\n        row = happenings.loc[happenings[\"Name\"] == \"Booster separation\"]\n        xy = (row[\"Horizontal distance\"]+1, row[\"Altitude\"]-0.5)\n        ax1.annotate(\"Booster separation\", xycoords='data', xy=xy, xytext=xy, color=\"white\")\n\n    if MECO:\n        row = happenings.loc[happenings[\"Name\"] == \"MECO\"]\n        xy = (row[\"Horizontal distance\"]+1, row[\"Altitude\"]-0.5)\n        ax1.annotate(\"MECO\", xycoords='data', xy=xy, xytext=xy, color=\"white\")\n\n    if SECO:\n        row = happenings.loc[happenings[\"Name\"] == \"SECO\"]\n        xy = (row[\"Horizontal distance\"]+1, row[\"Altitude\"]-0.5)\n        ax1.annotate(\"SECO\", xycoords='data', xy=xy, xytext=xy, color=\"white\")\n\n    ax1.imshow(Z, cmap=colormap, interpolation='bicubic', extent=[-2, xlim, 0, 60])\n    ax1.set_axis_bgcolor('black')\n    ax1.set_xlabel('Horizontal distance (km)')\n    ax1.set_ylabel('Altitude (km)')\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 2904, "lines_of_code": 80, "inputs": ["_"], "restricted": true}
{"id": "826204d41c256e732399f531ab432736ed8e6070be2d41c1c2c2879d3ca689f9", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KRPC_Examples/matplotAnimation.py", "lang": "python", "name": "CONST_BLOCK", "description": "Top-level constants: KCKF", "code": "KCKF = vessel.orbit.body.reference_frame\n", "categories": ["const"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 41, "lines_of_code": 1, "restricted": true}
{"id": "669dd85bb84339a3dc49dfb772cff28b73df0e1f3bb003d7a6b6837815deb4e8", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KSP_MissionManager/KSP_MissionManager.py", "lang": "python", "name": "KSP_MissionManager.__init__", "description": "Extracted function KSP_MissionManager.__init__ from KSP_MissionManager/KSP_MissionManager.py", "code": "    def __init__(self):\n        print('Initialize Mission...')\n", "categories": ["method"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 63, "lines_of_code": 2, "inputs": ["self"], "restricted": true}
{"id": "7d189b9b0683b14e8a899afca31428cfdb104018a07d8da58cc5827999a67470", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KSP_MissionManager/KSP_MissionManager.py", "lang": "python", "name": "KSP_MissionManager", "description": "Extracted class KSP_MissionManager from KSP_MissionManager/KSP_MissionManager.py", "code": "class KSP_MissionManager():\n    def __init__(self):\n        print('Initialize Mission...')\n", "categories": ["class"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 91, "lines_of_code": 3, "restricted": true}
{"id": "43c33d53b73aa7356c16026c41c9fc44211a6eb3085d0495fb03c315a45f689e", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "Mission_I/Mission_I.py", "lang": "python", "name": "makeScience", "description": "Find the next experiement available for a defined type\n\nParameters:\n   Vessel: krpc vessel\n   expType: Type of the experiment\n      MK1Pod, MysteryGoo", "code": "def makeScience(vessel, expType=None):\n    '''\n    Find the next experiement available for a defined type\n\n    Parameters:\n       Vessel: krpc vessel\n       expType: Type of the experiment\n          MK1Pod, MysteryGoo\n    '''\n    experimentsName = {'MK1Pod':'mk1pod', 'MysteryGoo':'GooExperiment'}\n\n    experience = experimentsName[expType]\n    \n    experimentRan = False\n    for part in vessel.parts.all:\n        if part.experiment \\\n            and part.name == experience:\n            if not part.experiment.deployed:\n                print('Making science with {}'.format(experience))\n                part.experiment.run()\n                experimentRan = True\n                break\n    if not experimentRan:\n        print('No experiment available')\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 752, "lines_of_code": 24, "inputs": ["vessel", "expType"], "restricted": true}
{"id": "5e423d4a4b60cafe6ebe54c29ee6958395030b19e43af87a1830116085b731d0", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "Mission_I/Mission_I.py", "lang": "python", "name": "countDown", "description": "Extracted function countDown from Mission_I/Mission_I.py", "code": "def countDown(start=20):\n    print('Countdown...')\n    for i in range(start, 0, -1):\n        print('{}...'.format(i))\n        time.sleep(1)\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 140, "lines_of_code": 5, "inputs": ["start"], "restricted": true}
{"id": "aaba1f5d359a5707744cca08d186d36d09f2db49ac1df82390eb96bbbf800b4b", "repo": "https://github.com/Genhis/KRPC.MechJeb", "commit": "398bc337492c5f725c83ab1aac85c32a1c0349ea", "path": "docs/scripts/tutorials/rendezvous/RendezvousWithTarget.py", "lang": "python", "name": "execute_nodes", "description": "Extracted function execute_nodes from docs/scripts/tutorials/rendezvous/RendezvousWithTarget.py", "code": "def execute_nodes():\n\tprint(\"Executing maneuver nodes\")\n\texecutor.execute_all_nodes()\n\t\n\twith conn.stream(getattr, executor, \"enabled\") as enabled:\n\t\tenabled.rate = 1 #we don't need a high throughput rate, 1 second is more than enough\n\t\twith enabled.condition:\n\t\t\twhile enabled():\n\t\t\t\tenabled.wait()\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T17:05:59Z", "size_bytes": 300, "lines_of_code": 9, "restricted": true}
