{"id": "cc36fced72ddafb6cc3a83c9f8cb7dc012bf2dba09cff978487d088b57957b37", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "extend_fins", "description": "Extracted function extend_fins from landing.py", "code": "def extend_fins(vessel):\n    for part in vessel.parts.all:\n        if part.name == 'Grid Fin M Titanium':\n            for module in part.modules:\n                if module.events == ['Extend Fins']:\n                    module.trigger_event('Extend Fins')\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 255, "lines_of_code": 6, "inputs": ["vessel"]}
{"id": "45045eb3b825c19a6e11a6ae5bc8ce59a8782963f235d9eeab191807a4da4433", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "retract_fins", "description": "Extracted function retract_fins from landing.py", "code": "def retract_fins(vessel):\n    for part in vessel.parts.all:\n        if part.name == 'Grid Fin M Titanium':\n            for module in part.modules:\n                if module.events == ['Retract Fins']:\n                    module.trigger_event('Retract Fins')\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 258, "lines_of_code": 6, "inputs": ["vessel"]}
{"id": "807e294de9bee0b2554444114d7297b1679096f2651c84419942559d801426a7", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "calc_thrust", "description": "Extracted function calc_thrust from landing.py", "code": "def calc_thrust(Fvac, A, h):\n    return Fvac - (106000*A)*2.718**(-0.0002*h)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 77, "lines_of_code": 2, "inputs": ["Fvac", "A", "h"]}
{"id": "6d25091d4be66c41e6cde7e3a91949f77106aaad00b0eea8531c304d5e119e84", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "ca", "description": "Calculates acceleration", "code": "def ca(thrust, mass, d=0, g=g):\n    \"\"\"\n    Calculates acceleration\n    \"\"\"\n    return thrust/mass - d - g\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 107, "lines_of_code": 5, "inputs": ["thrust", "mass", "d", "g"]}
{"id": "b84504db50b3a98e54ad1df4fc55ae7b5eb59a0624e39709b623d794f3facf13", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "landing.py", "lang": "python", "name": "sb_alt", "description": "Calculates the altitude at which to start the suicide burn", "code": "def sb_alt(v_speed, mass, Fvac=Fvac, wl=wl, A=A, target=0):\n    \"\"\"\n    Calculates the altitude at which to start the suicide burn\n    \"\"\"\n\n    h = altitude()\n    thrust = calc_thrust(Fvac, A, h)\n    d = drag()[0]/mass/2.3\n\n    while h >= 0 and v_speed >= 0:\n        target += v_speed\n        accel = ca(thrust, mass, d=-d, g=g)\n        v_speed -= accel\n        mass -= wl\n        h -= v_speed\n        thrust = calc_thrust(Fvac, A, h)\n\n    target -= h/2\n\n    return target\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 473, "lines_of_code": 20, "inputs": ["v_speed", "mass", "Fvac", "wl", "A", "target"]}
{"id": "1f35c1cd7db7b5931d8ddc0104b1babb3b35bd96acbd79cdc2a95660b2bf527d", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.__init__", "description": "Extracted function PID.__init__ from simple_pid.py", "code": "    def __init__(self, P=1.0, I=0.1, D=0.01):   \n        self.Kp = P    #P controls reaction to the instantaneous error\n        self.Ki = I    #I controls reaction to the history of error\n        self.Kd = D    #D prevents overshoot by considering rate of change\n        self.P = 0.0\n        self.I = 0.0\n        self.D = 0.0\n        self.SetPoint = 0.0  #Target value for controller\n        self.ClampI = 1.0  #clamps i_term to prevent 'windup.'\n        self.LastTime = time.time()\n        self.LastMeasure = 0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 514, "lines_of_code": 11, "inputs": ["self", "P", "I", "D"]}
{"id": "aa4487aeccfbfa074f9a8e861c6e1cd9b634dd9d30a3e59b66666dbb53972fd0", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.update", "description": "Extracted function PID.update from simple_pid.py", "code": "    def update(self,measure):\n        now = time.time()\n        change_in_time = now - self.LastTime\n        if not change_in_time:\n            change_in_time = 1.0   #avoid potential divide by zero if PID just created.\n       \n        error = self.SetPoint - measure\n        self.P = error\n        self.I += self.clamp_i(error)\n        self.D = (measure - self.LastMeasure) / (change_in_time)\n        self.LastMeasure = measure  # store data for next update\n        self.lastTime = now\n\n        return (self.Kp * self.P) + (self.Ki * self.I) - (self.Kd * self.D)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 564, "lines_of_code": 14, "inputs": ["self", "measure"]}
{"id": "7855e114ed7a187d6fe14fee00e5c173ded4dcbdd563418689039f269106f2e8", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.clamp_i", "description": "Extracted function PID.clamp_i from simple_pid.py", "code": "    def clamp_i(self, i):   \n        if i > self.ClampI:\n            return self.ClampI\n        elif i < -self.ClampI:\n            return -self.ClampI\n        else:\n            return i\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 186, "lines_of_code": 7, "inputs": ["self", "i"]}
{"id": "80b2e68ea26e215b7c7964c639ad09abb24d481706138a2cdb270e7c9ace1b5f", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID.setpoint", "description": "Extracted function PID.setpoint from simple_pid.py", "code": "    def setpoint(self, value):\n        self.SetPoint = value\n        self.I = 0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 82, "lines_of_code": 3, "inputs": ["self", "value"]}
{"id": "65096f07d9099977cb2ea4efbf9b2adbdaf7393e37526696e004b37343df9366", "repo": "https://github.com/azolotarev/ksp-with-python", "commit": "de82f037bc07cc50fc7084fd425229ad638744bf", "path": "simple_pid.py", "lang": "python", "name": "PID", "description": "Generic PID Controller Class\nBased on the PID recipe at :\nhttp://code.activestate.com/recipes/577231-discrete-pid-controller/\nand the code and discussions in the blog at:\nhttp://brettbeauregard.com/blog/2011/04/\nimproving-the-beginners-pid-introduction/\nAn instance is created with the format\nyour_pid=PID(P=.0001, I=0.00001, D=0.000001)\nFinding the right values for those three gain numbers is called 'tuning' and\nthat's beyond the scope of this doc string!  \nUse your_pid.setpoint(X) to set the target output value of the controller. \n\n\nRegularly call your_pid.update(Y), passing it the input data that the\ncontroller should respond to.\noutput_data = your_pid.update(input_data)", "code": "class PID(object):\n    '''\n    Generic PID Controller Class\n    Based on the PID recipe at :\n    http://code.activestate.com/recipes/577231-discrete-pid-controller/\n    and the code and discussions in the blog at:\n    http://brettbeauregard.com/blog/2011/04/\n    improving-the-beginners-pid-introduction/\n    An instance is created with the format\n    your_pid=PID(P=.0001, I=0.00001, D=0.000001)\n    Finding the right values for those three gain numbers is called 'tuning' and\n    that's beyond the scope of this doc string!  \n    Use your_pid.setpoint(X) to set the target output value of the controller. \n\n\n    Regularly call your_pid.update(Y), passing it the input data that the\n    controller should respond to.\n    output_data = your_pid.update(input_data)\n    '''\n    def __init__(self, P=1.0, I=0.1, D=0.01):   \n        self.Kp = P    #P controls reaction to the instantaneous error\n        self.Ki = I    #I controls reaction to the history of error\n        self.Kd = D    #D prevents overshoot by considering rate of change\n        self.P = 0.0\n        self.I = 0.0\n        self.D = 0.0\n        self.SetPoint = 0.0  #Target value for controller\n        self.ClampI = 1.0  #clamps i_term to prevent 'windup.'\n        self.LastTime = time.time()\n        self.LastMeasure = 0.0\n                \n    def update(self,measure):\n        now = time.time()\n        change_in_time = now - self.LastTime\n        if not change_in_time:\n            change_in_time = 1.0   #avoid potential divide by zero if PID just created.\n       \n        error = self.SetPoint - measure\n        self.P = error\n        self.I += self.clamp_i(error)\n        self.D = (measure - self.LastMeasure) / (change_in_time)\n        self.LastMeasure = measure  # store data for next update\n        self.lastTime = now\n\n        return (self.Kp * self.P) + (self.Ki * self.I) - (self.Kd * self.D)\n\n    def clamp_i(self, i):   \n        if i > self.ClampI:\n            return self.ClampI\n        elif i < -self.ClampI:\n            return -self.ClampI\n        else:\n            return i\n        \n    def setpoint(self, value):\n        self.SetPoint = value\n        self.I = 0.0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:10:09Z", "size_bytes": 2145, "lines_of_code": 57}
