{"id": "b27a282bd7708931b18afb65422ffd2493d0f721f2e8c44d549f5e8ad4b22e81", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.setGains", "description": "Extracted function flightControl.setGains from FlightControl.py", "code": "    def setGains(self, Pgain, Igain, Dgain):\n        self.pid.setPgain(Pgain)\n        self.pid.setIgain(Igain)\n        self.pid.setDgain(Dgain)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 144, "lines_of_code": 4, "inputs": ["self", "Pgain", "Igain", "Dgain"]}
{"id": "860348a936cc1f2ef03080a57c2ec3a788ccc7a20724000a8910805ecd842fdf", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.__init__", "description": "Extracted function flightControl.__init__ from FlightControl.py", "code": "    def __init__(self, pidController, conn):\n        self.pid = pidController\n        self.vessel = conn.space_center.active_vessel\n        self.vessel.control.sas = True\n        self.vessel.control.rcs = True\n        self.flightInfo = self.vessel.flight()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 257, "lines_of_code": 6, "inputs": ["self", "pidController", "conn"]}
{"id": "621d1574a537a621f72fd36d57c181e5dfa373c14167c6f845d952f85786e15d", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.resetPID", "description": "Extracted function flightControl.resetPID from FlightControl.py", "code": "    def resetPID(self):\n        self.pid.resetPID()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 52, "lines_of_code": 2, "inputs": ["self"]}
{"id": "c4727588644bc042ca16a733fa6f2daf3a4f25de9f281ac077da6cd6fdcfc493", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.beginLaunch", "description": "Extracted function flightControl.beginLaunch from FlightControl.py", "code": "    def beginLaunch(self):\n        self.vessel.control.activate_next_stage()\n        for i in range(5):\n           # time.sleep(1)\n            print(\"T minus - {}\".format(5-i))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 177, "lines_of_code": 5, "inputs": ["self"]}
{"id": "7c3afeb60594a7003b7f82c9a24e0a0c7891c432f5cd7821bf4334dce79e9a0b", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl.control", "description": "Extracted function flightControl.control from FlightControl.py", "code": "    def control(self, dt, error, prevError):\n        prop = self.pid.proportional(error)\n        integral = self.pid.integral(error, dt)\n        deriv = self.pid.derivative(dt, error, prevError)\n        return self.pid.sum(prop, integral, deriv)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 246, "lines_of_code": 5, "inputs": ["self", "dt", "error", "prevError"]}
{"id": "44a0bcd98be74ffda6932a8b47f762354d43a09e0c56100c04e29542e88577fa", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "FlightControl.py", "lang": "python", "name": "flightControl", "description": "Extracted class flightControl from FlightControl.py", "code": "class flightControl:\n\n    prefAltitude = 0\n    pid = None\n    flightInfo = None\n    vessel = None\n    makeZeroWhenNegative = lambda x : x(not x<0)\n    timeToAlt = lambda h,a : math.sqrt((2*h)/a)\n    summationForPID = lambda PIDCon, dt, error, prevError : PIDCon.proportional(error) + PIDCon.derivative(dt, error, prevError) + PIDCon.integral(error, dt)\n\n    '''WAYPOINTS ARE LISTS OF TUPLES [(LONG, LAT, ALT)]'''\n    wayPoint = []\n    pidControllers = []\n\n    def setGains(self, Pgain, Igain, Dgain):\n        self.pid.setPgain(Pgain)\n        self.pid.setIgain(Igain)\n        self.pid.setDgain(Dgain)\n\n    def __init__(self, pidController, conn):\n        self.pid = pidController\n        self.vessel = conn.space_center.active_vessel\n        self.vessel.control.sas = True\n        self.vessel.control.rcs = True\n        self.flightInfo = self.vessel.flight()\n\n    def resetPID(self):\n        self.pid.resetPID()\n\n    def beginLaunch(self):\n        self.vessel.control.activate_next_stage()\n        for i in range(5):\n           # time.sleep(1)\n            print(\"T minus - {}\".format(5-i))\n\n    def control(self, dt, error, prevError):\n        prop = self.pid.proportional(error)\n        integral = self.pid.integral(error, dt)\n        deriv = self.pid.derivative(dt, error, prevError)\n        return self.pid.sum(prop, integral, deriv)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 1336, "lines_of_code": 40}
{"id": "b6970b2b965903b016f0e8971516d48aa6d5afc131d8a0ba3ad5f39236ba05c8", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation.__init__", "description": "Extracted function InertialNavigation.__init__ from InertialNavigation.py", "code": "    def __init__(self):\n        pass\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 37, "lines_of_code": 2, "inputs": ["self"]}
{"id": "d8c31a0903f554b8acfb64914a4b0d5f8fe203725b6cad2b3253114550981938", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation.distanceBetweenCoordinates", "description": "Extracted function InertialNavigation.distanceBetweenCoordinates from InertialNavigation.py", "code": "    def distanceBetweenCoordinates(self, coor1, coor2, bodyRadius):\n        lat1 = coor1[0]\n        long1 = coor1[1]\n        lat2 = coor2[0]\n        long2 = coor2[1]\n        d=float(lat2-lat1)\n        latDistanceRadians = self.toRadians(d)\n        d=float(long2-long1)\n        longDistanceRadians = self.toRadians(d)\n\n        a = (\n            self.sinSqr(float(latDistanceRadians/2)) +\n            math.cos(self.toRadians(lat1)) * math.cos(self.toRadians(lat2)) *\n            self.sinSqr(longDistanceRadians)\n        )\n\n        c = (\n            2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n        )\n\n        distanceKM = bodyRadius * c\n\n        return distanceKM*1000\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 671, "lines_of_code": 23, "inputs": ["self", "coor1", "coor2", "bodyRadius"]}
{"id": "423fdfe06ef3c88f70a67232d850ea102be19123ea6f9619b6095cdc25439980", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation.getInformationFromAcceleration", "description": "Extracted function InertialNavigation.getInformationFromAcceleration from InertialNavigation.py", "code": "    def getInformationFromAcceleration(self, acc, dt):\n        info = [acc,0,0]\n        info[1] = acc*dt\n        info[2] = 0.5*acc*dt*dt\n\n        return tuple(info)", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 164, "lines_of_code": 6, "inputs": ["self", "acc", "dt"]}
{"id": "73a5d0074c4061c60b03b99c5d55806d4a39b40b0497c9d5443eb3fd976fb1ac", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "InertialNavigation.py", "lang": "python", "name": "InertialNavigation", "description": "Extracted class InertialNavigation from InertialNavigation.py", "code": "class InertialNavigation:\n\n    toRadians = lambda self, theta : theta * (math.pi/180)\n    toDegrees = lambda self, theta : theta * (180/math.pi)\n    binaryStep = lambda self, x : (\n        (2*(not x < 0))-1\n    )\n    sinSqr = lambda x : math.sin(x) * math.sin(x)\n\n    def __init__(self):\n        pass\n\n    '''\n    HAVERSINE FORMULA\n    https://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula\n    '''\n    def distanceBetweenCoordinates(self, coor1, coor2, bodyRadius):\n        lat1 = coor1[0]\n        long1 = coor1[1]\n        lat2 = coor2[0]\n        long2 = coor2[1]\n        d=float(lat2-lat1)\n        latDistanceRadians = self.toRadians(d)\n        d=float(long2-long1)\n        longDistanceRadians = self.toRadians(d)\n\n        a = (\n            self.sinSqr(float(latDistanceRadians/2)) +\n            math.cos(self.toRadians(lat1)) * math.cos(self.toRadians(lat2)) *\n            self.sinSqr(longDistanceRadians)\n        )\n\n        c = (\n            2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n        )\n\n        distanceKM = bodyRadius * c\n\n        return distanceKM*1000\n\n    def getInformationFromAcceleration(self, acc, dt):\n        info = [acc,0,0]\n        info[1] = acc*dt\n        info[2] = 0.5*acc*dt*dt\n\n        return tuple(info)", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 1297, "lines_of_code": 46}
{"id": "4dc4b81dbff3237096f7bba453bfaeaea76c9be2970f52685a6fbfc0b6729028", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getPgain", "description": "Extracted function PIDCon.getPgain from PID.py", "code": "    def getPgain(self):\n        return self.Pgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"]}
{"id": "58790f9854c2da6fd75b4b66ac66fcf78acfb1bedf991b8cab22a282489e6773", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getIgain", "description": "Extracted function PIDCon.getIgain from PID.py", "code": "    def getIgain(self):\n        return self.Igain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"]}
{"id": "52dee0aa882d3c3303750ec14ddac17daecbb5ee69947f786a4a97cd87495f05", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getDgain", "description": "Extracted function PIDCon.getDgain from PID.py", "code": "    def getDgain(self):\n        return self.Dgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"]}
{"id": "20092cc32b00178ecc44aa3d5bcaf2912fae80c055907e16b24c7323d74245b5", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getMaxI", "description": "Extracted function PIDCon.getMaxI from PID.py", "code": "    def getMaxI(self):\n        return self.maxI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 48, "lines_of_code": 2, "inputs": ["self"]}
{"id": "d17dcfae075e3a1e80fcd1289e395d6d64c42b670b3fa1dd6805d9a386d196d2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getLowI", "description": "Extracted function PIDCon.getLowI from PID.py", "code": "    def getLowI(self):\n        return self.lowI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 48, "lines_of_code": 2, "inputs": ["self"]}
{"id": "ce764ad5fd41708942e4aa4ffa502cc8a641ecad99c0a2804e4c6c3f5cef1707", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.setPgain", "description": "Extracted function PIDCon.setPgain from PID.py", "code": "    def setPgain(self, Pgain):\n        self.Pgain = Pgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self", "Pgain"]}
{"id": "1e1162d3f24692fc13ee6d512902483fe45f65f3a8e09458feafccca0ddbf5b7", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.setIgain", "description": "Extracted function PIDCon.setIgain from PID.py", "code": "    def setIgain(self, Igain):\n        self.Igain = Igain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self", "Igain"]}
{"id": "294c9ceddfa8ce4d9dcb44c977378a401d7e8c2a8ffd7c6470cb71e328ed2473", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.setDgain", "description": "Extracted function PIDCon.setDgain from PID.py", "code": "    def setDgain(self, Dgain):\n        self.Dgain = Dgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 58, "lines_of_code": 2, "inputs": ["self", "Dgain"]}
{"id": "1859efd5600227dd695e64f120ed70c9d7440ab00b4eddf0923bf02330c8ded2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getMaxI", "description": "Extracted function PIDCon.getMaxI from PID.py", "code": "    def getMaxI(self, maxI):\n        self.maxI = maxI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 54, "lines_of_code": 2, "inputs": ["self", "maxI"]}
{"id": "eb69225d06e5f4852f1619fc7a7a8437fe04d824a16a17b27fa3ea4c2391930d", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.getLowI", "description": "Extracted function PIDCon.getLowI from PID.py", "code": "    def getLowI(self, lowI):\n        self.lowI = lowI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 54, "lines_of_code": 2, "inputs": ["self", "lowI"]}
{"id": "09288264baddc5e317553abf1dc8b9ecca80b046e8fa958b93ac581d89c1176c", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.__init__", "description": "Extracted function PIDCon.__init__ from PID.py", "code": "    def __init__(self, PGain, IGain, DGain, MaxI, LowI):\n        self.Pgain = PGain\n        self.Igain = IGain\n        self.Dgain = DGain\n    \n        self.maxI = MaxI\n        self.lowI = LowI\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 193, "lines_of_code": 7, "inputs": ["self", "PGain", "IGain", "DGain", "MaxI", "LowI"]}
{"id": "0791b5396ce3cc1191caaf28b18a49481d6cc1a58d2acb2bf8e031abd22d2bf2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.resetPID", "description": "Extracted function PIDCon.resetPID from PID.py", "code": "    def resetPID(self):\n        self.Integral = 0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 50, "lines_of_code": 2, "inputs": ["self"]}
{"id": "e734ab073aad47c6f62ab3892494df7b92467fd8b7131ca8a901bf449d006bb2", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.derivative", "description": "Extracted function PIDCon.derivative from PID.py", "code": "    def derivative(self, dt, error, prevError):\n        return ((error - prevError)/dt)*self.Dgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 99, "lines_of_code": 2, "inputs": ["self", "dt", "error", "prevError"]}
{"id": "79c35cd2da847744192073e63d030572fd89c60aaecc6d72f1d0b52128312138", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.integral", "description": "Extracted function PIDCon.integral from PID.py", "code": "    def integral(self, error, dt):\n\n        #prevent a glitch in the matrix\n        if self.Igain == 0:\n            return self.Integral\n\n        self.Integral = (self.Integral + error*dt)*self.Igain\n        if(self.Integral >= self.maxI):\n            self.Integral = self.maxI\n            return self.Integral\n        elif(self.Integral <= self.lowI):\n            self.Integral = self.lowI\n            return self.Integral\n        else:\n            return self.Integral\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 471, "lines_of_code": 15, "inputs": ["self", "error", "dt"]}
{"id": "6d49bad64ea772e4ec3a1f14683f68c4abf069eb337cdb7a39149a129109abcb", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.proportional", "description": "Extracted function PIDCon.proportional from PID.py", "code": "    def proportional(self, error):\n        return error*self.Pgain\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 67, "lines_of_code": 2, "inputs": ["self", "error"]}
{"id": "eb1962d8ed7598b12a556a492000f208fb6ba43d30ac3762ed6558ffe6b057fb", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon.sum", "description": "Extracted function PIDCon.sum from PID.py", "code": "    def sum(self, prop, integral, derived):\n        return prop + integral + derived", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 84, "lines_of_code": 2, "inputs": ["self", "prop", "integral", "derived"]}
{"id": "8709c326ba86a4e21015167b73d756225ea344f874dce46c588175d9bf6a73c4", "repo": "https://github.com/Jake1402/KSP-PID-Hovering", "commit": "5accba9f6104cbe1b3d63225dc13b06bdf4c1a56", "path": "PID.py", "lang": "python", "name": "PIDCon", "description": "Extracted class PIDCon from PID.py", "code": "class PIDCon:\n\n    Pgain = 0.0\n    Igain = 0.0\n    Dgain = 0.0\n\n    Integral = 0\n    maxI = 1.0\n    lowI = -1.0\n\n    '''GETTERS'''\n    def getPgain(self):\n        return self.Pgain\n\n    def getIgain(self):\n        return self.Igain\n\n    def getDgain(self):\n        return self.Dgain\n    \n    def getMaxI(self):\n        return self.maxI\n\n    def getLowI(self):\n        return self.lowI\n\n    '''SETTERS'''\n    def setPgain(self, Pgain):\n        self.Pgain = Pgain\n\n    def setIgain(self, Igain):\n        self.Igain = Igain\n        \n    def setDgain(self, Dgain):\n        self.Dgain = Dgain\n\n    def getMaxI(self, maxI):\n        self.maxI = maxI\n\n    def getLowI(self, lowI):\n        self.lowI = lowI\n\n\n    '''CONSTRUCTOR'''\n    def __init__(self, PGain, IGain, DGain, MaxI, LowI):\n        self.Pgain = PGain\n        self.Igain = IGain\n        self.Dgain = DGain\n    \n        self.maxI = MaxI\n        self.lowI = LowI\n\n    def resetPID(self):\n        self.Integral = 0\n\n    '''PID Functions'''\n    def derivative(self, dt, error, prevError):\n        return ((error - prevError)/dt)*self.Dgain\n        \n    def integral(self, error, dt):\n\n        #prevent a glitch in the matrix\n        if self.Igain == 0:\n            return self.Integral\n\n        self.Integral = (self.Integral + error*dt)*self.Igain\n        if(self.Integral >= self.maxI):\n            self.Integral = self.maxI\n            return self.Integral\n        elif(self.Integral <= self.lowI):\n            self.Integral = self.lowI\n            return self.Integral\n        else:\n            return self.Integral\n\n    def proportional(self, error):\n        return error*self.Pgain\n\n    def sum(self, prop, integral, derived):\n        return prop + integral + derived", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "about:blank", "created_at": "2025-11-01T05:03:49Z", "size_bytes": 1723, "lines_of_code": 80}
