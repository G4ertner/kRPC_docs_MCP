{"id": "05543cd9db1ed69f253e95282ba4939ea2b147fcab3c1744890212bc782a4f34", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "normalized_angle", "description": "Extracted function normalized_angle from Kmath.py", "code": "def normalized_angle(angle):\n    angle=angle+180\n    angle=angle%360\n    angle=angle-180\n    return angle\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 106, "lines_of_code": 5, "inputs": ["angle"], "restricted": false}
{"id": "d959e887943c993b6dc399c57ba59d74be3c54a87b1459b2409642e4189bfa67", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "normalized_rad", "description": "Extracted function normalized_rad from Kmath.py", "code": "def normalized_rad(rad):\n    rad=rad+math.pi\n    rad=rad%(2*math.pi)\n    rad=rad-math.pi\n    return rad\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 104, "lines_of_code": 5, "inputs": ["rad"], "restricted": false}
{"id": "4454506c8bde060a74affca6db3789227cd5c772826726077c846bbc1431d2df", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Kfilter.__init__", "description": "Extracted function Kfilter.__init__ from Kmath.py", "code": "    def __init__(self,over_threshold=1,count_threshold=5):\n        self.old_value=0\n        self.over_count=0\n        self.over_threshold=0\n        self.count_threshold=5\n        self.count_threshold=count_threshold\n        self.over_threshold=over_threshold\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 259, "lines_of_code": 7, "inputs": ["self", "over_threshold", "count_threshold"], "restricted": false}
{"id": "570e8ffb381fd814cd46c00eaebd70e148ccac10f612febbd9a8bf50fdc4efda", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Kfilter.filter", "description": "Extracted function Kfilter.filter from Kmath.py", "code": "    def filter(self,value):\n        if abs(value-self.old_value)<0.5:\n            self.over_count=0\n            self.old_value=value\n        else:\n            self.over_count=self.over_count+1\n    \n        if self.over_count>=self.count_threshold:\n            self.old_value=value\n            self.over_count=0\n        return self.old_value\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 341, "lines_of_code": 11, "inputs": ["self", "value"], "restricted": false}
{"id": "ce78caf5ba7d0b69abde2572f0558a89589efbd255f8a476316899de49e2a9fe", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "OverMin.__init__", "description": "Extracted function OverMin.__init__ from Kmath.py", "code": "    def __init__(self,count_threshold=5):\n        self.min_value=1e20\n        self.over_count=0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 96, "lines_of_code": 3, "inputs": ["self", "count_threshold"], "restricted": false}
{"id": "5b2e5132c45dbf39a954f34d467cf96ce86ae8a24708478d38b20a698b8f905d", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "OverMin.update", "description": "Extracted function OverMin.update from Kmath.py", "code": "    def update(self,value):\n        if value<self.min_value:\n            self.over_count=0            \n            self.min_value=value\n        else:\n            self.over_count=self.over_count+1\n        return self.over_count\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 227, "lines_of_code": 7, "inputs": ["self", "value"], "restricted": false}
{"id": "6f699288c7a118768ab96e99ba7e406ddfabfb7ac348f88dbf0aa059b98d3866", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__init__", "description": "Extracted function Vector3.__init__ from Kmath.py", "code": "    def __init__(self,x,y,z):\n        self.x=x\n        self.y=y\n        self.z=z\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 81, "lines_of_code": 4, "inputs": ["self", "x", "y", "z"], "restricted": false}
{"id": "25c84f4310016bbc1f5c4d65148cbde4592b2d30aacb25535f34b22545a795ee", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__str__", "description": "Extracted function Vector3.__str__ from Kmath.py", "code": "    def __str__(self):\n        return \"(\"+str(self.x)+\" \"+str(self.y)+\" \"+str(self.z)+\")\"\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 90, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "7e9139276f8ac5370b64c809657d54e677d821d28b943a07f99cd4f2ccf79682", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.tuple3", "description": "Extracted function Vector3.tuple3 from Kmath.py", "code": "    def tuple3(self):\n        return (self.x,self.y,self.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 60, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "b610b249c8c7ef21b02115ab794d9ec23f5b7964ec07a61a864df272b0f2c081", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.mag", "description": "Extracted function Vector3.mag from Kmath.py", "code": "    def mag(self):\n        return math.sqrt(Vector3.Dot(self,self))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 68, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "65d273fb06e8e1868d41fac2cbefa3c747a1a2248b42f639b23c40025f3c186b", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.unit_vector", "description": "Extracted function Vector3.unit_vector from Kmath.py", "code": "    def unit_vector(self):\n        if self.mag()<1e-16:\n            return Vector3(0.0,0.0,0.0)\n        return self/self.mag()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 127, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "f526b86420a7d9b50940263cdd69271553e4bea3bd00af3bebf887917d90cbe9", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.pitch_yaw", "description": "    #x轴:上 y轴：北 z轴：东", "code": "    def pitch_yaw(self):\n        x=self.x\n        y=self.y\n        z=self.z\n        v1=Vector3(x,y,z)\n        pitch=90.0-Vector3.Angle(Vector3(1.0,0.0,0.0),v1)*180/math.pi\n        v2=Vector3(0.0,y,z)\n        if v2.mag()==0.0:\n            return(0,0)\n        yaw=Vector3.Angle(Vector3(0.0,1,0.0),v2)*180/math.pi\n        yawsig=Vector3.Cross(Vector3(0.0,1.0,0.0),v2)\n        if yawsig.x<0:\n            yaw=360-yaw\n        return(pitch,yaw)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 438, "lines_of_code": 14, "inputs": ["self"], "restricted": false}
{"id": "0a52e6c6be2be31ae2be7a95296ddc2bf04591051eec048a84ebb8f0454bfadc", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__add__", "description": "Extracted function Vector3.__add__ from Kmath.py", "code": "    def __add__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 120, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "9ec17bd7abd743523cada8ad5a0bfacf255bf82a070d4dbd5037a1981477a25a", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__radd__", "description": "Extracted function Vector3.__radd__ from Kmath.py", "code": "    def __radd__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 121, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "f785bfe7ac90a8c68ac93d8b963b95419c98c13b95d96662a2f5f4a8acea51cc", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__sub__", "description": "Extracted function Vector3.__sub__ from Kmath.py", "code": "    def __sub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 120, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "c729ac4ccf8eda051fcebdb4e47a2e7f2945e9199bc4ce02b3c3aab427532d31", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__rsub__", "description": "Extracted function Vector3.__rsub__ from Kmath.py", "code": "    def __rsub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 121, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "6059e51bfc1f2d15556ea337b0054809b99288a7539e15f3899bee97b2c7d39f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__mul__", "description": "    #数乘", "code": "    def __mul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 114, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "e418d3a40a0d074d1721599ba98845eb223ed61c32a881dfa3c26b6e12252773", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__rmul__", "description": "Extracted function Vector3.__rmul__ from Kmath.py", "code": "    def __rmul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 115, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "af92dc0584ae8be56fa12283dc9acd0987ef17e657350bef47492762a85a8fee", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.__truediv__", "description": "    #数除", "code": "    def __truediv__(self,b):\n        return Vector3(self.x/b,\n                  self.y/b,\n                  self.z/b)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 118, "lines_of_code": 4, "inputs": ["self", "b"], "restricted": false}
{"id": "bca9eed8a76a837e1a334532ea402a11c917a7c6f6c44ebc81f652725328b31f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Tuple3", "description": "Extracted function Vector3.Tuple3 from Kmath.py", "code": "    def Tuple3(t3):\n        return Vector3(t3[0],t3[1],t3[2])\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 62, "lines_of_code": 2, "inputs": ["t3"], "restricted": false}
{"id": "397c32b558e5d70a7b93081ba1d5d2cf211dad3ddcf998a0b125f300d314b1be", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Dot", "description": "Extracted function Vector3.Dot from Kmath.py", "code": "    def Dot(a,b):\n        return (a.x*b.x+a.y*b.y+a.z*b.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 59, "lines_of_code": 2, "inputs": ["a", "b"], "restricted": false}
{"id": "cdf657aeddea25269cfe6256b76896d7b425eeb668616059ed3a9fbb7d1ded59", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Cross", "description": "Extracted function Vector3.Cross from Kmath.py", "code": "    def Cross(a,b):\n        x=a.y*b.z-a.z*b.y\n        y=a.z*b.x-a.x*b.z\n        z=a.x*b.y-a.y*b.x\n        return Vector3(x,y,z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 128, "lines_of_code": 5, "inputs": ["a", "b"], "restricted": false}
{"id": "6f5a10e66767ee6cfd7ade216de118d28a3862b1f57627e00e03a762529f6036", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3.Angle", "description": "Extracted function Vector3.Angle from Kmath.py", "code": "    def Angle(a,b):\n        return math.acos(max(min(Vector3.Dot(a,b)/(a.mag()*b.mag()),1),-1))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 96, "lines_of_code": 2, "inputs": ["a", "b"], "restricted": false}
{"id": "21d4065afac105e0f1c770a79a00d912f681b27924e539ea22a9473bb878bebc", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.__init__", "description": "Extracted function Quaternion.__init__ from Kmath.py", "code": "    def __init__(self, w, x, y, z):\n        mag = x*x + y*y + z*z + w*w;\n        self.w = w/mag\n        self.x = x/mag\n        self.y = y/mag\n        self.z = z/mag\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 165, "lines_of_code": 6, "inputs": ["self", "w", "x", "y", "z"], "restricted": false}
{"id": "6923ff4d1f28b0b7cacf6ad25efc5a550a2fa1772283e4ec85062002d0380870", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.__str__", "description": "Extracted function Quaternion.__str__ from Kmath.py", "code": "    def __str__(self):\n        return \"(\"+str(self.w)+\" \"+str(self.x)+\"i \"+str(self.y)+\"j \"+str(self.z)+\"k )\"        \n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 118, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "d337b3d88384d082e6035291c27d346734cb1a884a08523d9b7e18df8914841e", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.__mul__", "description": "Extracted function Quaternion.__mul__ from Kmath.py", "code": "    def __mul__(self, quater):\n        w1 = self.w\n        w2 = quater.w\n        v1 = Vector3(self.x, self.y, self.z)\n        v2 = Vector3(quater.x, quater.y, quater.z)\n        w3 = w1*w2-Vector3.Dot(v1 ,v2)\n        v3 = Vector3.Cross(v1,v2)+w1*v2+w2*v1\n        return Quaternion(w3, v3.x, v3.y, v3.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 302, "lines_of_code": 8, "inputs": ["self", "quater"], "restricted": false}
{"id": "58ab06adfff9ca579f681a2311136a3c2fec0fe9ebbe2b90efc965c34e072586", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.tuple4", "description": "Extracted function Quaternion.tuple4 from Kmath.py", "code": "    def tuple4(self):\n        return (self.w,self.x,self.y,self.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 67, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "432c4a2428be8391252b426a4bb66dbf26adc83b10cdb8ef23b87b877111bac4", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.inverse", "description": "Extracted function Quaternion.inverse from Kmath.py", "code": "    def inverse(self):\n        return Quaternion(self.w,-self.x, -self.y, -self.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 83, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "7a6776b1ded9e65bbdfa1e2239743fb29a99ca4511d340bd896f102b2cc8b221", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.rotate", "description": "    #右手系轴角顺时针旋转", "code": "    def rotate(self,v):\n        u=Vector3(self.x,self.y,self.z)\n        s=self.w\n        return 2.0*Vector3.Dot(u,v)*u+(s*s-Vector3.Dot(u,u))*v+2.0*s*Vector3.Cross(u,v)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 169, "lines_of_code": 4, "inputs": ["self", "v"], "restricted": false}
{"id": "e89244770e3b7c439f6c3012053b7f0abc02a61609797dfce260aecbfd4abeaf", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.PivotRad", "description": "Extracted function Quaternion.PivotRad from Kmath.py", "code": "    def PivotRad(v,rad):\n        theta = rad/2\n        if v.mag()==0.0:\n            u=Vector3(1,0,0)\n            theta=0.0\n        else:\n            u = v.unit_vector()     \n        return Quaternion(math.cos(theta),math.sin(theta)*u.x,math.sin(theta)*u.y,math.sin(theta)*u.z)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 277, "lines_of_code": 8, "inputs": ["v", "rad"], "restricted": false}
{"id": "59729718b612f6ecb83c1b4aee8b2f212a89bafd77304a4e83d171fed31bac8b", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.PivotAngle", "description": "Extracted function Quaternion.PivotAngle from Kmath.py", "code": "    def PivotAngle(v,w):\n        w=w*math.pi/180\n        return Quaternion.PivotRad(v,w)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 89, "lines_of_code": 3, "inputs": ["v", "w"], "restricted": false}
{"id": "ff1987fafb36e413c54c9dde001f2f9000812c549605a265882ad67ccfccb9c6", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion.Tuple4", "description": "Extracted function Quaternion.Tuple4 from Kmath.py", "code": "    def Tuple4(t4):\n        mag = t4[0]*t4[0] + t4[1]*t4[1] + t4[2]*t4[2] + t4[3]*t4[3];\n        return Quaternion(t4[3]/mag,t4[0]/mag,t4[1]/mag,t4[2]/mag)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 156, "lines_of_code": 3, "inputs": ["t4"], "restricted": false}
{"id": "2cd78b216ec23e9849dbef8c262b21a56ee181ebde814772f597690b5b2cc350", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Kfilter", "description": "Extracted class Kfilter from Kmath.py", "code": "class Kfilter:\n    def __init__(self,over_threshold=1,count_threshold=5):\n        self.old_value=0\n        self.over_count=0\n        self.over_threshold=0\n        self.count_threshold=5\n        self.count_threshold=count_threshold\n        self.over_threshold=over_threshold\n    def filter(self,value):\n        if abs(value-self.old_value)<0.5:\n            self.over_count=0\n            self.old_value=value\n        else:\n            self.over_count=self.over_count+1\n    \n        if self.over_count>=self.count_threshold:\n            self.old_value=value\n            self.over_count=0\n        return self.old_value\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 615, "lines_of_code": 19, "restricted": false}
{"id": "4bc3618f280ef8d44c12bcf919cf633cb136da91dcc8076441e68488bb4ab0fb", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "OverMin", "description": "Extracted class OverMin from Kmath.py", "code": "class OverMin:\n    def __init__(self,count_threshold=5):\n        self.min_value=1e20\n        self.over_count=0\n    def update(self,value):\n        if value<self.min_value:\n            self.over_count=0            \n            self.min_value=value\n        else:\n            self.over_count=self.over_count+1\n        return self.over_count\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 338, "lines_of_code": 11, "restricted": false}
{"id": "ddfc8d004c26fc8dd8d47417b22396d9b19b3ea1cfd2e228e499f62792af7447", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Vector3", "description": "#三维向量", "code": "class Vector3:\n    def __init__(self,x,y,z):\n        self.x=x\n        self.y=y\n        self.z=z\n    def __str__(self):\n        return \"(\"+str(self.x)+\" \"+str(self.y)+\" \"+str(self.z)+\")\"\n\n    def tuple3(self):\n        return (self.x,self.y,self.z)\n\n    def mag(self):\n        return math.sqrt(Vector3.Dot(self,self))\n\n    def unit_vector(self):\n        if self.mag()<1e-16:\n            return Vector3(0.0,0.0,0.0)\n        return self/self.mag()\n    #x轴:上 y轴：北 z轴：东\n    def pitch_yaw(self):\n        x=self.x\n        y=self.y\n        z=self.z\n        v1=Vector3(x,y,z)\n        pitch=90.0-Vector3.Angle(Vector3(1.0,0.0,0.0),v1)*180/math.pi\n        v2=Vector3(0.0,y,z)\n        if v2.mag()==0.0:\n            return(0,0)\n        yaw=Vector3.Angle(Vector3(0.0,1,0.0),v2)*180/math.pi\n        yawsig=Vector3.Cross(Vector3(0.0,1.0,0.0),v2)\n        if yawsig.x<0:\n            yaw=360-yaw\n        return(pitch,yaw)\n        \n    \n    def __add__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n\n    def __radd__(self,b):\n        return Vector3(self.x+b.x,\n                  self.y+b.y,\n                  self.z+b.z)\n    \n    def __sub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n    \n    def __rsub__(self,b):\n        return Vector3(self.x-b.x,\n                  self.y-b.y,\n                  self.z-b.z)\n    #数乘\n    def __mul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n\n    def __rmul__(self,b):\n        return Vector3(self.x*b,\n                  self.y*b,\n                  self.z*b)\n    #数除\n    def __truediv__(self,b):\n        return Vector3(self.x/b,\n                  self.y/b,\n                  self.z/b)\n    @staticmethod\n    def Tuple3(t3):\n        return Vector3(t3[0],t3[1],t3[2])\n  \n    #点积\n    @staticmethod\n    def Dot(a,b):\n        return (a.x*b.x+a.y*b.y+a.z*b.z)\n    \n    #叉积\n    @staticmethod\n    def Cross(a,b):\n        x=a.y*b.z-a.z*b.y\n        y=a.z*b.x-a.x*b.z\n        z=a.x*b.y-a.y*b.x\n        return Vector3(x,y,z)\n\n    #夹角\n    @staticmethod\n    def Angle(a,b):\n        return math.acos(max(min(Vector3.Dot(a,b)/(a.mag()*b.mag()),1),-1))\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 2259, "lines_of_code": 90, "restricted": false}
{"id": "002ab6535bbc45c392a92cf697d5adf3eae2085e74c8b28857df1da88aa0b780", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Kmath.py", "lang": "python", "name": "Quaternion", "description": "Extracted class Quaternion from Kmath.py", "code": "class Quaternion:\n    def __init__(self, w, x, y, z):\n        mag = x*x + y*y + z*z + w*w;\n        self.w = w/mag\n        self.x = x/mag\n        self.y = y/mag\n        self.z = z/mag\n\n    def __str__(self):\n        return \"(\"+str(self.w)+\" \"+str(self.x)+\"i \"+str(self.y)+\"j \"+str(self.z)+\"k )\"        \n\n    def __mul__(self, quater):\n        w1 = self.w\n        w2 = quater.w\n        v1 = Vector3(self.x, self.y, self.z)\n        v2 = Vector3(quater.x, quater.y, quater.z)\n        w3 = w1*w2-Vector3.Dot(v1 ,v2)\n        v3 = Vector3.Cross(v1,v2)+w1*v2+w2*v1\n        return Quaternion(w3, v3.x, v3.y, v3.z)\n    \n    def tuple4(self):\n        return (self.w,self.x,self.y,self.z)\n\n    def inverse(self):\n        return Quaternion(self.w,-self.x, -self.y, -self.z)\n    #右手系轴角顺时针旋转\n    def rotate(self,v):\n        u=Vector3(self.x,self.y,self.z)\n        s=self.w\n        return 2.0*Vector3.Dot(u,v)*u+(s*s-Vector3.Dot(u,u))*v+2.0*s*Vector3.Cross(u,v)\n    \n    @staticmethod\n    def PivotRad(v,rad):\n        theta = rad/2\n        if v.mag()==0.0:\n            u=Vector3(1,0,0)\n            theta=0.0\n        else:\n            u = v.unit_vector()     \n        return Quaternion(math.cos(theta),math.sin(theta)*u.x,math.sin(theta)*u.y,math.sin(theta)*u.z)\n\n    @staticmethod\n    def PivotAngle(v,w):\n        w=w*math.pi/180\n        return Quaternion.PivotRad(v,w)\n\n    @staticmethod\n    def Tuple4(t4):\n        mag = t4[0]*t4[0] + t4[1]*t4[1] + t4[2]*t4[2] + t4[3]*t4[3];\n        return Quaternion(t4[3]/mag,t4[0]/mag,t4[1]/mag,t4[2]/mag)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1549, "lines_of_code": 50, "restricted": false}
{"id": "3e55231a7d45b07151b9ff69b72800b1c22763bab185e60a5a4de701722c717c", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer.__init__", "description": "Extracted function Ktimer.__init__ from Ktimer.py", "code": "    def __init__(self):\n        if Ktimer.conn==None:\n            Ktimer.conn = krpc.connect(name='clock')\n        self.old=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 128, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "d4425cc3326679417898011570fe376ac8f4ee2fbde9707356e368fd0d5e3ad2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer.delta_t", "description": "Extracted function Ktimer.delta_t from Ktimer.py", "code": "    def delta_t(self):\n        tmp=Ktimer.conn.space_center.ut\n        res=tmp-self.old\n        if self.old==0.0:\n            res=0.0\n        self.old=tmp\n        #print('delta t',res)\n        return res\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 204, "lines_of_code": 8, "inputs": ["self"], "restricted": false}
{"id": "fcfda1b491fdc9b437094c8650f95a287add15ce39c5fd0e5785c75f8ffed1ae", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer.time_t", "description": "Extracted function Ktimer.time_t from Ktimer.py", "code": "    def time_t(self):\n        return Ktimer.conn.space_center.ut\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 65, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "b2198dcdb6ec40ce0c716f7c0a8fb623ae0b038627e068650ee6442fc26e4f1a", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "derivator.__init__", "description": "Extracted function derivator.__init__ from Ktimer.py", "code": "    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__last=num\n        self.__last_state=num\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 116, "lines_of_code": 4, "inputs": ["self", "num"], "restricted": false}
{"id": "35afc077837a47e76d5cd100631b5f75c4035c34a2b8e43c32aa74f901df8bc7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "derivator.derivative", "description": "Extracted function derivator.derivative from Ktimer.py", "code": "    def derivative(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__last_state=(num-self.__last)/deltaTime\n        self.__last=num\n        return self.__last_state\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 214, "lines_of_code": 6, "inputs": ["self", "num"], "restricted": false}
{"id": "d483ec5ca43f491bb72a50c550f22f4c714cec5295a072a4e8d4d8a5492939eb", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.__init__", "description": "Extracted function integrator.__init__ from Ktimer.py", "code": "    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__integral=num\n        self.__max=None\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 114, "lines_of_code": 4, "inputs": ["self", "num"], "restricted": false}
{"id": "ebe63f50e11297c7882efa9d0acd8e6ab04f878711595b83bb41cf63547cfcae", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.integral", "description": "Extracted function integrator.integral from Ktimer.py", "code": "    def integral(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__integral=self.__integral+num*deltaTime\n        if self.__max!=None:\n            self.__integral=max(min(self.__integral,self.__max),-self.__max)\n        return self.__integral\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 292, "lines_of_code": 7, "inputs": ["self", "num"], "restricted": false}
{"id": "1be1b80c57d7c43cbf1158ba7b594c419cf47460c70497798862c1bca2677001", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.clear", "description": "Extracted function integrator.clear from Ktimer.py", "code": "    def clear(self):\n        self.__integral=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 49, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "dbd801a21943a984dae6472ff752d325cbd3329ae380c3c939ea700d4712e218", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.set", "description": "Extracted function integrator.set from Ktimer.py", "code": "    def set(self,num):\n        self.__integral=num\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 51, "lines_of_code": 2, "inputs": ["self", "num"], "restricted": false}
{"id": "e058142b92de7b6ccf983a782a88be2673fd558677ad40a1d5f8117633653838", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator.set_max", "description": "Extracted function integrator.set_max from Ktimer.py", "code": "    def set_max(self,_max):\n        self.__max=abs(_max)", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 56, "lines_of_code": 2, "inputs": ["self", "_max"], "restricted": false}
{"id": "9bcf18fa2dd53cda8cc838f8f9e49f20e5131c62a615e02a89287a878e786468", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "Ktimer", "description": "Extracted class Ktimer from Ktimer.py", "code": "class Ktimer:\n    conn=None\n    def __init__(self):\n        if Ktimer.conn==None:\n            Ktimer.conn = krpc.connect(name='clock')\n        self.old=0.0\n    def delta_t(self):\n        tmp=Ktimer.conn.space_center.ut\n        res=tmp-self.old\n        if self.old==0.0:\n            res=0.0\n        self.old=tmp\n        #print('delta t',res)\n        return res\n    \n    def time_t(self):\n        return Ktimer.conn.space_center.ut\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 430, "lines_of_code": 17, "restricted": false}
{"id": "9773533e4d41cd5a616747f22b4b7cbe32e2463adcba6e23415605a9091a24aa", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "derivator", "description": "Extracted class derivator from Ktimer.py", "code": "class derivator:\n    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__last=num\n        self.__last_state=num\n    def derivative(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__last_state=(num-self.__last)/deltaTime\n        self.__last=num\n        return self.__last_state\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 347, "lines_of_code": 11, "restricted": false}
{"id": "1a7faf86efd2826823360105dd48b66283d292c4987de3e405b3263727cdfb27", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "Ktimer.py", "lang": "python", "name": "integrator", "description": "Extracted class integrator from Ktimer.py", "code": "class integrator:\n    def __init__(self,num=0.0):\n        self.__timer=Ktimer()\n        self.__integral=num\n        self.__max=None\n    def integral(self,num):\n        deltaTime=self.__timer.delta_t()\n        if(deltaTime>1e-6):\n            self.__integral=self.__integral+num*deltaTime\n        if self.__max!=None:\n            self.__integral=max(min(self.__integral,self.__max),-self.__max)\n        return self.__integral\n    def clear(self):\n        self.__integral=0.0\n    def set(self,num):\n        self.__integral=num\n    def set_max(self,_max):\n        self.__max=abs(_max)", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 580, "lines_of_code": 18, "restricted": false}
{"id": "e13a867d11b1bc7a95a2bd2ee2f3b59ad65d95bd97a16474fbfc58b3d1070308", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "adjust_geo_period.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from adjust_geo_period.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 248, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "006b9b49161f88b0d29b098d632b13e5f2701bffe52dd196643053a6b9200bb7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "adjust_geo_period.py", "lang": "python", "name": "ApSpeed", "description": "Extracted function ApSpeed from adjust_geo_period.py", "code": "def ApSpeed(new_pe,ap,body):\n    r=body.equatorial_radius\n    gm=body.gravitational_parameter\n    new_pe=r+new_pe\n    ap=r+ap\n    sem=0.5*(new_pe+ap)\n    return math.sqrt(2.0*(gm/ap-0.5*gm/sem))\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 195, "lines_of_code": 7, "inputs": ["new_pe", "ap", "body"], "restricted": false}
{"id": "959e5faf7c9de793747b704886cfb5a4190ee9a6e7056a281d1e74cd8decd3ec", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "geo_maneuver.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from geo_maneuver.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 248, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "155c1383ee37b042cdf20cad348a561d1c9b2d3750b3cd531b2e58f82aeb0c26", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "geo_maneuver.py", "lang": "python", "name": "ApSpeed", "description": "Extracted function ApSpeed from geo_maneuver.py", "code": "def ApSpeed(new_pe,ap,body):\n    gm=body.gravitational_parameter\n    sem=0.5*(new_pe+ap)\n    return math.sqrt(2.0*(gm/ap-0.5*gm/sem))\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 134, "lines_of_code": 4, "inputs": ["new_pe", "ap", "body"], "restricted": false}
{"id": "14c720c2f28407cbf32523322a85de6099ebf053424cb294d63e6822d78a56c2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "gto_transfer.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from gto_transfer.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 248, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "8caebd7829da226bbf96149ecb7766733d1004ca49f8dfd6b8fff4c5731d30c2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "launch.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from launch.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked  \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 249, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "8afb8902db5708b071f6fc7953724ef7f224a9f8586c2d275129426eaed6815d", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "launch_moon.py", "lang": "python", "name": "SetAllEngineGimbalLocked", "description": "Extracted function SetAllEngineGimbalLocked from launch_moon.py", "code": "def SetAllEngineGimbalLocked(vessel,IsLocked):\n    if vessel==None:\n        return None\n    parts=vessel.parts.engines\n    if parts==None:\n        return None\n    for i in parts:\n        if i.gimballed==True:\n            i.gimbal_locked= IsLocked  \n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 249, "lines_of_code": 9, "inputs": ["vessel", "IsLocked"], "restricted": false}
{"id": "4c81bdaa8442545ebc5c26431efad2fae19d15135c3ec99dfb7e91a1c9e7c48c", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "vernal_equinox_vector", "description": "#默认弧度制\n#春分点方向向量", "code": "def vernal_equinox_vector(conn,reference_frame):\n    earth=conn.space_center.bodies['Earth']\n    orbital_reference_frame=earth.orbital_reference_frame\n    north_pole=Vector3.Tuple3(earth.direction(orbital_reference_frame))\n    tmp=Vector3.Cross(Vector3(0.0,0.0,1.0),north_pole)\n    q=Quaternion.Tuple4(earth.rotation(reference_frame))\n    q=q*Quaternion.Tuple4(earth.rotation(orbital_reference_frame)).inverse()\n    return q.rotate(tmp)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 437, "lines_of_code": 8, "inputs": ["conn", "reference_frame"], "restricted": false}
{"id": "1bc0d2583feaabf22497a5386a10f1d23a659fe79976556b535e26681968f962", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "target_normal_vector", "description": "#轨道法向量", "code": "def target_normal_vector(conn,body,inc,lan,reference_frame):\n    north_pole=Vector3.Tuple3(body.direction(reference_frame)).unit_vector()\n    vernal_vector=vernal_equinox_vector(conn,reference_frame)\n    q=Quaternion.PivotRad(north_pole,-lan)\n    ascend_node=q.rotate(vernal_vector)\n    tmp=Vector3.Cross(north_pole,ascend_node).unit_vector()\n    if(abs(inc-math.pi/2)<1e-16):\n        res=tmp\n    else:\n        res= north_pole+(tmp*math.tan(inc))\n    return res.unit_vector()\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 476, "lines_of_code": 11, "inputs": ["conn", "body", "inc", "lan", "reference_frame"], "restricted": false}
{"id": "7e22aab171314f16b75d3325b5cc8a40abfbeba28dd216fe9419d2561e0553d7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "equator_node_lon", "description": "#某倾角过某位置的轨道赤道点(升交点或降交点)经度", "code": "def equator_node_lon(lon,lat,inc,is_ascend=True):\n    b=math.tan(lat)*math.tan(math.pi/2-inc)\n    b=math.asin(min(1,max(-1,b)))\n    if is_ascend:\n        return lon-b\n    else:\n        return lon+b\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 198, "lines_of_code": 7, "inputs": ["lon", "lat", "inc", "is_ascend"], "restricted": false}
{"id": "c83da0f54b5c4274ab3c73cfc2a7e5ed816ba418dae0e3bd5e3cedeb8b0d4ff2", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "time_to_orbit_over", "description": "#到轨道凌空的时间", "code": "def time_to_orbit_over(conn,body,lon,lat,inc,lan,heading_north=False):\n    vev=vernal_equinox_vector(conn,body.reference_frame).tuple3()\n    tarLon=math.radians(body.longitude_at_position(vev,body.reference_frame))+lan\n    curLon=equator_node_lon(lon,lat,inc,heading_north)\n    if not heading_north:\n        tarLon=math.pi+tarLon\n    dif=tarLon-curLon\n    dif=normalized_rad(dif)\n    if(dif<0):\n        dif=dif+2*math.pi\n    return dif/body.rotational_speed\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 458, "lines_of_code": 11, "inputs": ["conn", "body", "lon", "lat", "inc", "lan", "heading_north"], "restricted": false}
{"id": "a289fac65e2c39db4957d1a44f1942634a30f72e3ef61cb47f1de72af10ce435", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "warp_to_launch", "description": "#加速到发射", "code": "def warp_to_launch(conn,target_inc,target_lan,heading_north=False,advance=300):\n    vessel = conn.space_center.active_vessel\n    body=vessel.orbit.body\n    reference_frame=body.non_rotating_reference_frame\n    position=vessel.position(reference_frame)\n    lon=math.radians(body.longitude_at_position(position, reference_frame))  \n    lat=math.radians(body.latitude_at_position(position, reference_frame))\n    deltaTime=time_to_orbit_over(conn,body,lon,lat,target_inc,target_lan,heading_north)\n    conn.space_center.warp_to(conn.space_center.ut+deltaTime-advance)\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 563, "lines_of_code": 9, "inputs": ["conn", "target_inc", "target_lan", "heading_north", "advance"], "restricted": false}
{"id": "320e382d195c6fe8c375d98221f104a0d348244b3f6756e515fbcfe09b71d611", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "surface_velocity", "description": "Extracted function surface_velocity from navigation.py", "code": "def surface_velocity(vessel):\n    referenceframe=vessel.orbit.body.reference_frame\n    q1=Quaternion.Tuple4(vessel.rotation(referenceframe))\n    q2=Quaternion.Tuple4(vessel.rotation(vessel.surface_reference_frame))\n    q1=q2*q1.inverse()\n    v=Vector3.Tuple3(vessel.velocity(referenceframe))\n    v=q1.rotate(v)\n    return v\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 324, "lines_of_code": 8, "inputs": ["vessel"], "restricted": false}
{"id": "7a374efd996315d5b4fc1f5e79241c9c3aae774c0fd27c005a31e7d072d4b35f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "navigation.py", "lang": "python", "name": "target_heading", "description": "Extracted function target_heading from navigation.py", "code": "def target_heading(vessel,target_normal_vector,reference_frame):\n    body=vessel.orbit.body\n    orbitV=target_normal_vector\n    NorthNode=Vector3.Tuple3(body.direction(reference_frame))\n    vesselPos=Vector3.Tuple3(vessel.position(reference_frame))\n    front=Vector3.Cross(vesselPos-(orbitV*math.cos(Vector3.Angle(orbitV,vesselPos))),orbitV)\n    east=Vector3.Cross(vesselPos,NorthNode) \n    res=Vector3.Angle(front,east)\n    if Vector3.Dot(front,NorthNode)<0:\n        res=-res\n    return math.pi/2-res\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 502, "lines_of_code": 11, "inputs": ["vessel", "target_normal_vector", "reference_frame"], "restricted": false}
{"id": "872c80fc4fb68ab814df0e6d727076cb5ffe4abdaa65de76214d2ac05d3f7199", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.__init__", "description": "Extracted function orbit.__init__ from orbit.py", "code": "    def __init__(self,u):\n        self.__e=0.0\n        self.__u=u\n        self.__f=0.0\n        self.__t=0.0\n        self.__h=Vector3(0.0,0.0,0.0)\n        self.__f0=Vector3(0.0,0.0,0.0)    \n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 189, "lines_of_code": 7, "inputs": ["self", "u"], "restricted": false}
{"id": "976e988fe818cc08147f37ab8ec19289959ed70fdcc3dbe0cf4d808ee4936867", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.set_r_v_t", "description": "Extracted function orbit.set_r_v_t from orbit.py", "code": "    def set_r_v_t(self,r,v,t,u):\n        self.__t=t\n        self.__h=Vector3.Cross(v,r)\n        hh=Vector3.Dot(self.__h,self.__h)\n        energy=0.5*v.mag()**2-u/r.mag()\n        if energy==0.0:\n            self.__e=1.0\n        else:\n            a=-0.5*u/energy\n            self.__e=(1-hh/(a*u))**0.5\n        \n        if self.__e!=0.0:\n            cosf=(hh/(self.__u*r.mag())-1)/self.__e\n            cosf=max(-1.0,min(1.0,cosf))\n            self.__f=abs(math.acos(cosf))\n            if Vector3.Dot(r,v)<0:\n                self.__f=-1*self.__f\n            print(self.__f)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 570, "lines_of_code": 18, "inputs": ["self", "r", "v", "t", "u"], "restricted": false}
{"id": "940577a75d8ceeaac861e50172f855817646bb15ab774d9608a3a28516f44b77", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_flight_angle", "description": "Extracted function orbit.get_flight_angle from orbit.py", "code": "    def get_flight_angle(self,f):\n        return math.atan(self.__e*math.sin(f)/(1+self.__e*math.cos(f)))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 106, "lines_of_code": 2, "inputs": ["self", "f"], "restricted": false}
{"id": "59d3e0bc33d4cc690f4f281ffcc7b3c1f1f81af0e6cc2cf0747b5b114b67fadd", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_a", "description": "Extracted function orbit.get_a from orbit.py", "code": "    def get_a(self):\n        return Vector3.Dot(self.__h,self.__h)/(self.__u*(1-self.__e**2))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 94, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "181aed68069f14fc7781b745ac9008dd942b6064230910327b75213fd19b797b", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_pe", "description": "Extracted function orbit.get_pe from orbit.py", "code": "    def get_pe(self):\n        a=self.get_a()\n        return a*(1-self.__e)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 75, "lines_of_code": 3, "inputs": ["self"], "restricted": false}
{"id": "6689fbb102ae8b0727357d2b60ad037d0968bad70d486563e6103e04413da28c", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit.get_ap", "description": "Extracted function orbit.get_ap from orbit.py", "code": "    def get_ap(self):\n        a=self.get_a()\n        return a*(1+self.__e)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 75, "lines_of_code": 3, "inputs": ["self"], "restricted": false}
{"id": "e1fdb50e8b33e72c651bc6d1b81601ad01149e9ccac8b1659128fd4f92c9aa70", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "orbit.py", "lang": "python", "name": "orbit", "description": "Extracted class orbit from orbit.py", "code": "class orbit:\n    def __init__(self,u):\n        self.__e=0.0\n        self.__u=u\n        self.__f=0.0\n        self.__t=0.0\n        self.__h=Vector3(0.0,0.0,0.0)\n        self.__f0=Vector3(0.0,0.0,0.0)    \n    def set_r_v_t(self,r,v,t,u):\n        self.__t=t\n        self.__h=Vector3.Cross(v,r)\n        hh=Vector3.Dot(self.__h,self.__h)\n        energy=0.5*v.mag()**2-u/r.mag()\n        if energy==0.0:\n            self.__e=1.0\n        else:\n            a=-0.5*u/energy\n            self.__e=(1-hh/(a*u))**0.5\n        \n        if self.__e!=0.0:\n            cosf=(hh/(self.__u*r.mag())-1)/self.__e\n            cosf=max(-1.0,min(1.0,cosf))\n            self.__f=abs(math.acos(cosf))\n            if Vector3.Dot(r,v)<0:\n                self.__f=-1*self.__f\n            print(self.__f)\n\n    def get_flight_angle(self,f):\n        return math.atan(self.__e*math.sin(f)/(1+self.__e*math.cos(f)))\n    \n    def get_a(self):\n        return Vector3.Dot(self.__h,self.__h)/(self.__u*(1-self.__e**2))\n\n    def get_pe(self):\n        a=self.get_a()\n        return a*(1-self.__e)\n    \n    def get_ap(self):\n        a=self.get_a()\n        return a*(1+self.__e)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1134, "lines_of_code": 40, "restricted": false}
{"id": "8e91f976ff4f1da8e9f042349c82b8797cddeed34825496615bff1e52205066f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "target.__init__", "description": "Extracted function target.__init__ from peg.py", "code": "    def __init__(self):\n        self.normal=Vector3(0.0,0.0,0.0)\n        self.orbit=Korbit.orbit()\n        self.angle=0.0\n        self.radius=0.0\n        self.velocity=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 172, "lines_of_code": 6, "inputs": ["self"], "restricted": false}
{"id": "f2b9469dfb2d0e75c76ef5a7c2dd9922b589b7662b6d947b1d18a8dfb873717d", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "state.__init__", "description": "Extracted function state.__init__ from peg.py", "code": "    def __init__(self):\n        self.time=0.0\n        self.mass=0.0\n        self.radius=Vector3(0.0,0.0,0.0)\n        self.velocity=Vector3(0.0,0.0,0.0)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 152, "lines_of_code": 5, "inputs": ["self"], "restricted": false}
{"id": "566bbd8b3a63a2743c2d82855afe795f5fe2766bcb31e2c996e229de9025a954", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "previous.__init__", "description": "Extracted function previous.__init__ from peg.py", "code": "    def __init__(self):\n        self.rbias=Vector3(0.0,0.0,0.0)\n        self.rd=Vector3(0.0,0.0,0.0)\n        self.rgrav=Vector3(0.0,0.0,0.0)\n        self.time=0.0\n        self.v=Vector3(0.0,0.0,0.0)\n        self.vgo=Vector3(0.0,0.0,0.0)\n        self.tgo=0.0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 258, "lines_of_code": 8, "inputs": ["self"], "restricted": false}
{"id": "ae2f2a237007ad2a2a593ade4a254d093d9a4943ca9624cda72dedaaa2535a20", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "stage.__init__", "description": "Extracted function stage.__init__ from peg.py", "code": "    def __init__(self):\n        self.massWet=0.0\n        self.massDry=0.0\n        self.gLim=10.0\n        self.isp=0.0\n        self.thrust=0.0\n        self.mode=0\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 162, "lines_of_code": 7, "inputs": ["self"], "restricted": false}
{"id": "5895987d96433342d2000efb82b4dba591babf70319908eecdb30667232fae38", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__init__", "description": "Extracted function pegas.__init__ from peg.py", "code": "    def __init__(self,conn):\n        self.__conn=conn\n        self.__vessel=conn.space_center.active_vessel\n        self.__earth=conn.space_center.bodies['Earth']\n        self.__u=self.__vessel.orbit.body.gravitational_parameter\n        self.__reference_frame=self.__vessel.orbit.body.non_rotating_reference_frame\n        self.__stages=[]\n        self.__target=target()\n        self.__state=state()\n        self.__previous=previous()\n        self.__tgo=0.0\n        self.__last_stage_mass=0.0\n        self.__gLim=4.5\n        self.__output=(self.__vessel.flight().pitch,self.__vessel.flight().heading)\n        self.__conic_extrapolation=Korbit.orbit()\n        self.__mode=0 #0:standard 1:reference orbit\n        self.__lambdadot=Vector3(0,0,0)\n        self.__iF_=Vector3(0,0,0)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 776, "lines_of_code": 18, "inputs": ["self", "conn"], "restricted": false}
{"id": "74e3b7038ae08970f16d0188b8d0f1a75282b092971aff514bad281bda375c7a", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__upfg", "description": "Extracted function pegas.__upfg from peg.py", "code": "    def __upfg(self,n):\n\n        stages=self.__stages\n        iy = self.__target.normal\n        t = self.__state.time\n        m = self.__state.mass\n        r = self.__state.radius\n        v = self.__state.velocity\n\n        rbias = self.__previous.rbias\n        rd = self.__previous.rd\n        rgrav = self.__previous.rgrav\n        tp = self.__previous.time\n        vprev = self.__previous.v\n        vgo = self.__previous.vgo\n\n#1\n        SM=[] \n        aL=[] \n        ve=[] \n        fT=[] \n        aT=[] \n        tu=[] \n        tb=[] \n        \n        for i in range(n):\n    \t    SM.append(stages[i].mode)\n    \t    aL.append(stages[i].gLim*g0)\n    \t    fT.append(stages[i].thrust)\n    \t    ve.append(stages[i].isp*g0)\n    \t    aT.append(fT[i] / stages[i].massWet)\n    \t    tu.append(ve[i]/aT[i])\n    \t    if stages[i].mode==0:\n                tb.append((stages[i].massWet-stages[i].massDry)*ve[i]/fT[i])\n    \t    else:\n                tb.append(ve[i]*math.log(stages[i].massWet/stages[i].massDry)/aL[i])\n    #2\n        dt = t-tp\n        dvsensed = v-vprev\n        vgo = vgo-dvsensed\n\n    #3\t\n        if SM[0]==0 :\n            aT[0] = fT[0] / m\n        else:\n            aT[0] = aL[0]\n        \n        tu[0] = ve[0] / aT[0]\n        L = 0.0\n        Li =[]\n        for i in range(n-1):\n    \t    if SM[i]==0 :\n    \t\t    Li.append( ve[i]*math.log(tu[i]/(tu[i]-tb[i])))\n    \t    else:\n    \t    \tLi.append( aL[i]*tb[i] )\n    \t    L = L + Li[i]\n    \t\n    \t    if L>vgo.mag() :\n    \t\t    return self.__upfg(n-1)    \n                \n        Li.append(vgo.mag() - L)\n        tgoi = []\n        for i in range(n):\n            if SM[i]==0 :\n                tb[i] = tu[i] * (1-math.exp((-Li[i]/ve[i])))\n            else:\n                tb[i] = Li[i] / aL[i]\n\n            if i==0 :\n                tgoi.append(tb[i])\n            else: \n                tgoi.append(tgoi[i-1] + tb[i])\n        tgo=tgoi[n-1]\n\n    #4\n        L=0.0\n        J=0.0\n        S=0.0\n        Q=0.0\n        H=0.0\n        P=0.0\n        \n        Ji=[]\n        Si=[]\n        Qi=[]\n        Pi=[]\n        tgoi1 = 0.0\n        \n        for i in range(n):\n    \t    if i>0:\n    \t\t    tgoi1 = tgoi[i-1]\n\n    \t    if SM[i]==0:\n    \t\t    Ji.append( tu[i]*Li[i] - ve[i]*tb[i] )                                 \n    \t\t    Si.append( -Ji[i] + tb[i]*Li[i] )                                      \n    \t\t    Qi.append( Si[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 )                   \n    \t\t    Pi.append( Qi[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 * (tb[i]/3+tgoi1) )\n\n    \t    else:\n    \t\t    Ji.append( 0.5*Li[i]*tb[i] )                                      \n    \t\t    Si.append( Ji[i] )                                                \n    \t\t    Qi.append( Si[i]*(tb[i]/3+tgoi1) )                                \n    \t\t    Pi.append( (1/6)*Si[i]*(tgoi[i]**2 + 2*tgoi[i]*tgoi1 + 3*tgoi1**2) )\n\n    \t    Ji[i] = Ji[i] + Li[i]*tgoi1\n    \t    Si[i] = Si[i] + L*tb[i]    \n    \t    Qi[i] = Qi[i] + J*tb[i]    \n    \t    Pi[i] = Pi[i] + H*tb[i]    \n    \t\t                             \n    \t    L = L+Li[i]                \n    \t    J = J+Ji[i]                \n    \t    S = S+Si[i]                \n    \t    Q = Q+Qi[i]                \n    \t    P = P+Pi[i]                \n    \t    H = J*tgoi[i] - Q\n    #5\n        _lambda = vgo.unit_vector()\n        if self.__previous.tgo>0:\n        \trgrav = (tgo/self.__previous.tgo)**2 * rgrav\n        \n        rgo = rd - (r + v*tgo + rgrav)\n        iz = Vector3.Cross(rd,iy).unit_vector()\n        rgoxy = rgo - Vector3.Dot(iz,rgo)*iz\n        rgoz = (S - Vector3.Dot(_lambda,rgoxy)) / Vector3.Dot(_lambda,iz)\n        rgo = rgoxy + rgoz*iz + rbias\n        lambdade = Q - S*J/L\n        self.__lambdadot = (rgo - S*_lambda) / lambdade\n        self.__iF_ = _lambda - self.__lambdadot*J/L\n        self.__iF_ = self.__iF_.unit_vector()\n        phi = Vector3.Angle(self.__iF_,_lambda)\n        phidot = -phi*L/J\n        vthrust = (L - 0.5*L*phi**2 - J*phi*phidot - 0.5*H*phidot**2)*_lambda\n        rthrust = (S - 0.5*S*phi**2 - Q*phi*phidot - 0.5*P*phidot**2)*_lambda\n        rthrust = rthrust - (S*phi + Q*phidot)*self.__lambdadot.unit_vector()\n        vbias = vgo - vthrust\n        rbias = rgo - rthrust\n        rbias=rbias\n        vbias=vbias\n\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(self.__iF_,_up)\n        inplane =self.__iF_ - Vector3.Dot(_up,self.__iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        \n        self.__output=(pitch,yaw)\n    #\t7\n\n        ''\n        rc1 = r - 0.1*rthrust - (tgo/30)*vthrust\n        vc1 = v + 1.2*rthrust/tgo - 0.1*vthrust\n        self.__conic_extrapolation.set_r_v(rc1.tuple3(),vc1.tuple3(),0,self.__u)\n        pack = self.__conic_extrapolation.state_at_t(tgo)\n        rgrav = Vector3.Tuple3(pack[0]) - rc1 - vc1*tgo\n        vgrav = Vector3.Tuple3(pack[1]) - vc1\n\n        #print(rbias)\n        #print(vbias)\n        #print('\\n')\n      \n    #\t8\n        rp = r + v*tgo + rgrav + rthrust\n        rp = rp - Vector3.Dot(rp,iy)*iy\n\n        vd=Vector3(0.0,0.0,0.0)\n        if self.__mode==0:\n            gamma = self.__target.angle\n            rdval = self.__target.radius\n            vdval = self.__target.velocity\n            rd = rdval*rp.unit_vector()\n            ix = rd.unit_vector()\n            iz = Vector3.Cross(ix,iy)\n            vd=(iz*math.cos(gamma)+ix*math.sin(gamma))*vdval\n        elif self.__mode==1:\n            pe=Vector3.Tuple3(self.__target.orbit.pe_vector())\n            f=Vector3.Angle(pe,rp)\n            if Vector3.Dot(Vector3.Cross(pe,rp),self.__target.normal)>0:\n                f=-f\n            target_state= self.__target.orbit.state_at_f(f)\n\n            rd=Vector3.Tuple3(target_state[0])\n            vd=Vector3.Tuple3(target_state[1])\n        else:\n            print('pegas error:unkown work mode')\n\n        vgo = vd - v - vgrav + vbias\n\n        self.__previous.rbias = rbias\n        self.__previous.rd    = rd   \n        self.__previous.rgrav = rgrav\n        self.__previous.time  = self.__state.time   \n        self.__previous.v     = self.__state.velocity\n        self.__previous.vgo   = vgo \n        self.__previous.tgo=tgo\n        self.__tgo=self.__previous.tgo\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 6387, "lines_of_code": 202, "inputs": ["self", "n"], "restricted": false}
{"id": "ad56da1f901d26bb839c525df0003e6bb5a4bb2b801906d288a10d38a539dba0", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_std_target", "description": "Extracted function pegas.set_std_target from peg.py", "code": "    def set_std_target(self,inc,lan,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1080, "lines_of_code": 21, "inputs": ["self", "inc", "lan", "radius", "velocity", "angle"], "restricted": false}
{"id": "eb508558d694bf9bc4030d54f47facb3937d57e19c2b33d53412617d4ade3eca", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_ref_target", "description": "Extracted function pegas.set_ref_target from peg.py", "code": "    def set_ref_target(self,pe,ap,inc,lan,aop):\n        self.__mode=1\n        sem=0.5*(pe+ap)\n        ecc=0.5*(ap-pe)/sem\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.orbit.set_element(sem,ecc,inc,lan,aop,0.0,0.0,self.__u)\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(20))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*v.mag()\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1083, "lines_of_code": 20, "inputs": ["self", "pe", "ap", "inc", "lan", "aop"], "restricted": false}
{"id": "f000560e0c49e09bfdfdd245eb4ca67aa49377acdea6b26af0f67c708d3409d7", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_radius_speed_target", "description": "Extracted function pegas.set_radius_speed_target from peg.py", "code": "    def set_radius_speed_target(self,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        self.__target.normal=Vector3.Cross(self.__state.velocity,self.__state.radius).unit_vector()\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1063, "lines_of_code": 20, "inputs": ["self", "radius", "velocity", "angle"], "restricted": false}
{"id": "2635ec051f65f2b8a909b31e87f950c122a74c2292e74484bb7345e34fa49afe", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__add_stage", "description": "Extracted function pegas.__add_stage from peg.py", "code": "    def __add_stage(self,massWet,massDry,thrust,isp,gLim,mode):\n        _stage=stage()\n        _stage.massWet=massWet\n        _stage.massDry=massDry\n        _stage.gLim=gLim\n        _stage.isp=isp\n        _stage.thrust=thrust\n        _stage.mode=mode\n        self.__stages.append(_stage)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 288, "lines_of_code": 9, "inputs": ["self", "massWet", "massDry", "thrust", "isp", "gLim", "mode"], "restricted": false}
{"id": "f4074d9f84ea357d7278fd2cefd5d7c87c8b3c045717ba0f85b41c7a4314f968", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.add_stage", "description": "Extracted function pegas.add_stage from peg.py", "code": "    def add_stage(self,massWet,massDry,thrust,isp,gLim=4.5):\n        _stage=stage()\n        self.__stages.reverse()\n        last_stage_mass=self.__last_stage_mass\n            \n        if thrust==0 or isp==0 or massWet==massDry:\n            self.__last_stage_mass=last_stage_mass+massWet\n            return None\n      \n        mass_tmp=thrust/(gLim*g0)\n        if mass_tmp<=massDry+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,0)\n        elif mass_tmp>=massWet+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,1)\n        else:\n            self.__add_stage(mass_tmp,massDry+last_stage_mass,thrust,isp,gLim,1)\n            self.__add_stage(massWet+last_stage_mass,mass_tmp,thrust,isp,gLim,0)\n        self.__last_stage_mass=last_stage_mass+massWet\n        self.__stages.reverse()\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 901, "lines_of_code": 19, "inputs": ["self", "massWet", "massDry", "thrust", "isp", "gLim"], "restricted": false}
{"id": "01742c7e24a0173bac615de3925eddeafda87dde884c01ea245bc122b5b2106e", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.slerp", "description": "Extracted function pegas.slerp from peg.py", "code": "    def slerp(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        r = self.__state.radius\n\n        dt=self.__conn.space_center.ut-self.__previous.time\n        iF_ = self.__iF_ + self.__lambdadot*dt\n        iF_ = iF_.unit_vector()\n        \n        self.__tgo=self.__previous.tgo-dt\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(iF_,_up)\n        inplane =iF_- Vector3.Dot(_up,iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        self.__output=(pitch,yaw)        \n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1007, "lines_of_code": 25, "inputs": ["self"], "restricted": false}
{"id": "1721cc903eda5f74a112df5dadd29fe3fc3ea90656e3dd701539a754c80a31cb", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.update", "description": "Extracted function pegas.update from peg.py", "code": "    def update(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n \n        vessel=self.__vessel\n        n=len(self.__stages)\n        self.__stages[0].massWet=self.__state.mass\n        if self.__state.mass<=self.__stages[0].massDry:\n            self.__stages.pop(0)\n            vessel.control.throttle=1.0\n            #self.__throttle_bias.clear()\n            return None\n        \n        '''\n        if self.__stages[0].mode!=0:\n            acc=vessel.thrust/max(vessel.mass,0.1)\n            dacc=acc-g0*self.__stages[0].gLim\n            dacc=max(-1,min(1,dacc))\n            vessel.control.throttle = 1.0-self.__throttle_bias.integral(0.05*dacc)\n        '''\n\n        last_tgo=self.__previous.tgo\n        self.__upfg(n)\n        #if abs(last_tgo-self.__previous.tgo)>1:\n        #   return None\n        return self.__output\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 1061, "lines_of_code": 28, "inputs": ["self"], "restricted": false}
{"id": "f2d448460326744d21a0ed23a6f8601ca531bc8894d4a30447b9764711184d22", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.update_stages", "description": "Extracted function pegas.update_stages from peg.py", "code": "    def update_stages(self,thrustK=1.0):\n        self.__last_stage_mass=0.0\n        self.__stages=[]\n        stages=get_stages(self.__vessel.parts.root)\n        for i in stages:\n            self.add_stage(i[0],i[1],i[2]*thrustK,i[3],self.__gLim)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 246, "lines_of_code": 6, "inputs": ["self", "thrustK"], "restricted": false}
{"id": "08f3e13e42a757707744347fdda0d5fd73559e87f9f96efdf40fe21dc8837bc3", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.time_to_go", "description": "Extracted function pegas.time_to_go from peg.py", "code": "    def time_to_go(self):\n            return self.__tgo\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 56, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "681d584f301e0916aa059c3f381547507cc551a0a8ff316448ace18ba9cf9221", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.__time_to_stage", "description": "Extracted function pegas.__time_to_stage from peg.py", "code": "    def __time_to_stage(self,stage):\n        if stage.mode==0:\n            dm=stage.thrust/(stage.isp*g0)\n            return (stage.massWet-stage.massDry)/dm     \n        else:\n            dv=stage.isp*math.log(stage.massWet/stage.massDry)\n            return dv/stage.gLim\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 273, "lines_of_code": 7, "inputs": ["self", "stage"], "restricted": false}
{"id": "9df399335e95739cf20fa9613d39d275677de335b57aabc728cc49be2b6c50b0", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.time_to_stage", "description": "Extracted function pegas.time_to_stage from peg.py", "code": "    def time_to_stage(self):\n        stage=self.__stages[0]\n        ret=self.__time_to_stage(stage)\n        if len(self.__stages)>1:\n            if self.__stages[1].massWet==stage.massDry:\n                ret=ret+self.__time_to_stage(self.__stages[1])\n        return ret\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 271, "lines_of_code": 7, "inputs": ["self"], "restricted": false}
{"id": "875fc1c6eaef11c6ed65ca9fa7de8e67f6af79b78b656602683c06eaa8513684", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.stages_num", "description": "Extracted function pegas.stages_num from peg.py", "code": "    def stages_num(self):\n        return len(self.__stages)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 60, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "81706c5f914675bbda7e0a141e07019d34ec5b5c4589e77de7b884439321a578", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.angle_to_rd", "description": "Extracted function pegas.angle_to_rd from peg.py", "code": "    def angle_to_rd(self):\n        return Vector3.Angle(self.__previous.rd,self.__state.radius)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 96, "lines_of_code": 2, "inputs": ["self"], "restricted": false}
{"id": "939a0c56064a283159d213e9f5b2a7569053b0950615c9d3f7ebc49c83ac89ac", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.rd_position", "description": "Extracted function pegas.rd_position from peg.py", "code": "    def rd_position(self):\n        pos=self.__previous.rd.tuple3()\n        ref=self.__reference_frame\n        body=self.__vessel.orbit.body\n        turn_angle=math.degrees(body.rotational_speed*self.__previous.tgo)\n        return (body.longitude_at_position(pos,ref)-turn_angle,body.latitude_at_position(pos,ref))\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 314, "lines_of_code": 6, "inputs": ["self"], "restricted": false}
{"id": "02aadc8a11ebcad17a7047956086f3e63ca8c668fd68f54b7f0fb000bb770938", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.set_max_g", "description": "Extracted function pegas.set_max_g from peg.py", "code": "    def set_max_g(self,g):\n        self.__gLim=g\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 49, "lines_of_code": 2, "inputs": ["self", "g"], "restricted": false}
{"id": "cfcf66abbef84e9c435cfa4a43ca10c616cd19e5faf72839824ef2ccc5dcf975", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas.vehicle_info", "description": "Extracted function pegas.vehicle_info from peg.py", "code": "    def vehicle_info(self):\n        for i in self.__stages:\n            print('wet mass:%f dry mass:%f thurst:%f isp:%f'%(i.massWet,i.massDry,i.thrust,i.isp))", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 158, "lines_of_code": 3, "inputs": ["self"], "restricted": false}
{"id": "b90b5f1e70171fc18691ff64d179fa7bc5c8f7e92a66650d5733e008fb80b584", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "target", "description": "Extracted class target from peg.py", "code": "class target:\n    def __init__(self):\n        self.normal=Vector3(0.0,0.0,0.0)\n        self.orbit=Korbit.orbit()\n        self.angle=0.0\n        self.radius=0.0\n        self.velocity=0.0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 186, "lines_of_code": 7, "restricted": false}
{"id": "0df165f9947f9f42ecba66918a7499a55eadb7280d543165e5712c8567f339d4", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "state", "description": "Extracted class state from peg.py", "code": "class state:\n    def __init__(self):\n        self.time=0.0\n        self.mass=0.0\n        self.radius=Vector3(0.0,0.0,0.0)\n        self.velocity=Vector3(0.0,0.0,0.0)\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 165, "lines_of_code": 6, "restricted": false}
{"id": "7b26c3ab6fea5df48e38467d5020d94d1c4e429fd519986b1a5026d4a0b56533", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "previous", "description": "Extracted class previous from peg.py", "code": "class previous:\n    def __init__(self):\n        self.rbias=Vector3(0.0,0.0,0.0)\n        self.rd=Vector3(0.0,0.0,0.0)\n        self.rgrav=Vector3(0.0,0.0,0.0)\n        self.time=0.0\n        self.v=Vector3(0.0,0.0,0.0)\n        self.vgo=Vector3(0.0,0.0,0.0)\n        self.tgo=0.0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 274, "lines_of_code": 9, "restricted": false}
{"id": "f55ce4604bd26ad81c437bc78fe6938e6ca549a2bf607f33d7715ebc6241005f", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "stage", "description": "Extracted class stage from peg.py", "code": "class stage:\n    def __init__(self):\n        self.massWet=0.0\n        self.massDry=0.0\n        self.gLim=10.0\n        self.isp=0.0\n        self.thrust=0.0\n        self.mode=0\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 175, "lines_of_code": 8, "restricted": false}
{"id": "90a59e849c2114cd98a940a5f7320bc5fd53c0101cc7275f7c84af7cfe6a0c27", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "peg.py", "lang": "python", "name": "pegas", "description": "Extracted class pegas from peg.py", "code": "class pegas:\n    def __init__(self,conn):\n        self.__conn=conn\n        self.__vessel=conn.space_center.active_vessel\n        self.__earth=conn.space_center.bodies['Earth']\n        self.__u=self.__vessel.orbit.body.gravitational_parameter\n        self.__reference_frame=self.__vessel.orbit.body.non_rotating_reference_frame\n        self.__stages=[]\n        self.__target=target()\n        self.__state=state()\n        self.__previous=previous()\n        self.__tgo=0.0\n        self.__last_stage_mass=0.0\n        self.__gLim=4.5\n        self.__output=(self.__vessel.flight().pitch,self.__vessel.flight().heading)\n        self.__conic_extrapolation=Korbit.orbit()\n        self.__mode=0 #0:standard 1:reference orbit\n        self.__lambdadot=Vector3(0,0,0)\n        self.__iF_=Vector3(0,0,0)\n    \n    def __upfg(self,n):\n\n        stages=self.__stages\n        iy = self.__target.normal\n        t = self.__state.time\n        m = self.__state.mass\n        r = self.__state.radius\n        v = self.__state.velocity\n\n        rbias = self.__previous.rbias\n        rd = self.__previous.rd\n        rgrav = self.__previous.rgrav\n        tp = self.__previous.time\n        vprev = self.__previous.v\n        vgo = self.__previous.vgo\n\n#1\n        SM=[] \n        aL=[] \n        ve=[] \n        fT=[] \n        aT=[] \n        tu=[] \n        tb=[] \n        \n        for i in range(n):\n    \t    SM.append(stages[i].mode)\n    \t    aL.append(stages[i].gLim*g0)\n    \t    fT.append(stages[i].thrust)\n    \t    ve.append(stages[i].isp*g0)\n    \t    aT.append(fT[i] / stages[i].massWet)\n    \t    tu.append(ve[i]/aT[i])\n    \t    if stages[i].mode==0:\n                tb.append((stages[i].massWet-stages[i].massDry)*ve[i]/fT[i])\n    \t    else:\n                tb.append(ve[i]*math.log(stages[i].massWet/stages[i].massDry)/aL[i])\n    #2\n        dt = t-tp\n        dvsensed = v-vprev\n        vgo = vgo-dvsensed\n\n    #3\t\n        if SM[0]==0 :\n            aT[0] = fT[0] / m\n        else:\n            aT[0] = aL[0]\n        \n        tu[0] = ve[0] / aT[0]\n        L = 0.0\n        Li =[]\n        for i in range(n-1):\n    \t    if SM[i]==0 :\n    \t\t    Li.append( ve[i]*math.log(tu[i]/(tu[i]-tb[i])))\n    \t    else:\n    \t    \tLi.append( aL[i]*tb[i] )\n    \t    L = L + Li[i]\n    \t\n    \t    if L>vgo.mag() :\n    \t\t    return self.__upfg(n-1)    \n                \n        Li.append(vgo.mag() - L)\n        tgoi = []\n        for i in range(n):\n            if SM[i]==0 :\n                tb[i] = tu[i] * (1-math.exp((-Li[i]/ve[i])))\n            else:\n                tb[i] = Li[i] / aL[i]\n\n            if i==0 :\n                tgoi.append(tb[i])\n            else: \n                tgoi.append(tgoi[i-1] + tb[i])\n        tgo=tgoi[n-1]\n\n    #4\n        L=0.0\n        J=0.0\n        S=0.0\n        Q=0.0\n        H=0.0\n        P=0.0\n        \n        Ji=[]\n        Si=[]\n        Qi=[]\n        Pi=[]\n        tgoi1 = 0.0\n        \n        for i in range(n):\n    \t    if i>0:\n    \t\t    tgoi1 = tgoi[i-1]\n\n    \t    if SM[i]==0:\n    \t\t    Ji.append( tu[i]*Li[i] - ve[i]*tb[i] )                                 \n    \t\t    Si.append( -Ji[i] + tb[i]*Li[i] )                                      \n    \t\t    Qi.append( Si[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 )                   \n    \t\t    Pi.append( Qi[i]*(tu[i]+tgoi1) - 0.5*ve[i]*tb[i]**2 * (tb[i]/3+tgoi1) )\n\n    \t    else:\n    \t\t    Ji.append( 0.5*Li[i]*tb[i] )                                      \n    \t\t    Si.append( Ji[i] )                                                \n    \t\t    Qi.append( Si[i]*(tb[i]/3+tgoi1) )                                \n    \t\t    Pi.append( (1/6)*Si[i]*(tgoi[i]**2 + 2*tgoi[i]*tgoi1 + 3*tgoi1**2) )\n\n    \t    Ji[i] = Ji[i] + Li[i]*tgoi1\n    \t    Si[i] = Si[i] + L*tb[i]    \n    \t    Qi[i] = Qi[i] + J*tb[i]    \n    \t    Pi[i] = Pi[i] + H*tb[i]    \n    \t\t                             \n    \t    L = L+Li[i]                \n    \t    J = J+Ji[i]                \n    \t    S = S+Si[i]                \n    \t    Q = Q+Qi[i]                \n    \t    P = P+Pi[i]                \n    \t    H = J*tgoi[i] - Q\n    #5\n        _lambda = vgo.unit_vector()\n        if self.__previous.tgo>0:\n        \trgrav = (tgo/self.__previous.tgo)**2 * rgrav\n        \n        rgo = rd - (r + v*tgo + rgrav)\n        iz = Vector3.Cross(rd,iy).unit_vector()\n        rgoxy = rgo - Vector3.Dot(iz,rgo)*iz\n        rgoz = (S - Vector3.Dot(_lambda,rgoxy)) / Vector3.Dot(_lambda,iz)\n        rgo = rgoxy + rgoz*iz + rbias\n        lambdade = Q - S*J/L\n        self.__lambdadot = (rgo - S*_lambda) / lambdade\n        self.__iF_ = _lambda - self.__lambdadot*J/L\n        self.__iF_ = self.__iF_.unit_vector()\n        phi = Vector3.Angle(self.__iF_,_lambda)\n        phidot = -phi*L/J\n        vthrust = (L - 0.5*L*phi**2 - J*phi*phidot - 0.5*H*phidot**2)*_lambda\n        rthrust = (S - 0.5*S*phi**2 - Q*phi*phidot - 0.5*P*phidot**2)*_lambda\n        rthrust = rthrust - (S*phi + Q*phidot)*self.__lambdadot.unit_vector()\n        vbias = vgo - vthrust\n        rbias = rgo - rthrust\n        rbias=rbias\n        vbias=vbias\n\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(self.__iF_,_up)\n        inplane =self.__iF_ - Vector3.Dot(_up,self.__iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        \n        self.__output=(pitch,yaw)\n    #\t7\n\n        ''\n        rc1 = r - 0.1*rthrust - (tgo/30)*vthrust\n        vc1 = v + 1.2*rthrust/tgo - 0.1*vthrust\n        self.__conic_extrapolation.set_r_v(rc1.tuple3(),vc1.tuple3(),0,self.__u)\n        pack = self.__conic_extrapolation.state_at_t(tgo)\n        rgrav = Vector3.Tuple3(pack[0]) - rc1 - vc1*tgo\n        vgrav = Vector3.Tuple3(pack[1]) - vc1\n\n        #print(rbias)\n        #print(vbias)\n        #print('\\n')\n      \n    #\t8\n        rp = r + v*tgo + rgrav + rthrust\n        rp = rp - Vector3.Dot(rp,iy)*iy\n\n        vd=Vector3(0.0,0.0,0.0)\n        if self.__mode==0:\n            gamma = self.__target.angle\n            rdval = self.__target.radius\n            vdval = self.__target.velocity\n            rd = rdval*rp.unit_vector()\n            ix = rd.unit_vector()\n            iz = Vector3.Cross(ix,iy)\n            vd=(iz*math.cos(gamma)+ix*math.sin(gamma))*vdval\n        elif self.__mode==1:\n            pe=Vector3.Tuple3(self.__target.orbit.pe_vector())\n            f=Vector3.Angle(pe,rp)\n            if Vector3.Dot(Vector3.Cross(pe,rp),self.__target.normal)>0:\n                f=-f\n            target_state= self.__target.orbit.state_at_f(f)\n\n            rd=Vector3.Tuple3(target_state[0])\n            vd=Vector3.Tuple3(target_state[1])\n        else:\n            print('pegas error:unkown work mode')\n\n        vgo = vd - v - vgrav + vbias\n\n        self.__previous.rbias = rbias\n        self.__previous.rd    = rd   \n        self.__previous.rgrav = rgrav\n        self.__previous.time  = self.__state.time   \n        self.__previous.v     = self.__state.velocity\n        self.__previous.vgo   = vgo \n        self.__previous.tgo=tgo\n        self.__tgo=self.__previous.tgo\n\n    def set_std_target(self,inc,lan,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n\n    def set_ref_target(self,pe,ap,inc,lan,aop):\n        self.__mode=1\n        sem=0.5*(pe+ap)\n        ecc=0.5*(ap-pe)/sem\n        self.__target.normal=target_normal_vector(self.__conn,self.__earth,inc,lan,self.__reference_frame)\n        self.__target.orbit.set_element(sem,ecc,inc,lan,aop,0.0,0.0,self.__u)\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(20))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*v.mag()\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        ''\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n    def set_radius_speed_target(self,radius,velocity,angle=0.0):\n        self.__mode=0\n        self.__target.angle=angle\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        self.__target.normal=Vector3.Cross(self.__state.velocity,self.__state.radius).unit_vector()\n        self.__target.radius=radius\n        self.__target.velocity=velocity\n\n        r=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        v=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        q=Quaternion.PivotRad(self.__target.normal,math.radians(1))\n        rd=q.rotate(r)\n        vd=Vector3.Cross(rd,self.__target.normal).unit_vector()*velocity\n        self.__previous.rd    = rd   \n        self.__previous.time  = self.__conn.space_center.ut   \n        self.__previous.v     = v\n        self.__previous.vgo   = vd-v\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n    def __add_stage(self,massWet,massDry,thrust,isp,gLim,mode):\n        _stage=stage()\n        _stage.massWet=massWet\n        _stage.massDry=massDry\n        _stage.gLim=gLim\n        _stage.isp=isp\n        _stage.thrust=thrust\n        _stage.mode=mode\n        self.__stages.append(_stage)\n\n    def add_stage(self,massWet,massDry,thrust,isp,gLim=4.5):\n        _stage=stage()\n        self.__stages.reverse()\n        last_stage_mass=self.__last_stage_mass\n            \n        if thrust==0 or isp==0 or massWet==massDry:\n            self.__last_stage_mass=last_stage_mass+massWet\n            return None\n      \n        mass_tmp=thrust/(gLim*g0)\n        if mass_tmp<=massDry+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,0)\n        elif mass_tmp>=massWet+last_stage_mass:\n            self.__add_stage(massWet+last_stage_mass,massDry+last_stage_mass,thrust,isp,gLim,1)\n        else:\n            self.__add_stage(mass_tmp,massDry+last_stage_mass,thrust,isp,gLim,1)\n            self.__add_stage(massWet+last_stage_mass,mass_tmp,thrust,isp,gLim,0)\n        self.__last_stage_mass=last_stage_mass+massWet\n        self.__stages.reverse()\n\n    def slerp(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n        r = self.__state.radius\n\n        dt=self.__conn.space_center.ut-self.__previous.time\n        iF_ = self.__iF_ + self.__lambdadot*dt\n        iF_ = iF_.unit_vector()\n        \n        self.__tgo=self.__previous.tgo-dt\n    #\t6\n    #\tTODO: angle rates\n        _up = r.unit_vector()\n        _east = Vector3.Cross(_up,Vector3(0,1,0)).unit_vector()\n        pitch = math.pi/2-Vector3.Angle(iF_,_up)\n        inplane =iF_- Vector3.Dot(_up,iF_)*_up\n        yaw = Vector3.Angle(inplane,_east)\n        tangent = Vector3.Cross(_up,_east)\n        if Vector3.Dot(inplane,tangent)<0 :\n        \tyaw = -yaw\n        yaw=yaw-math.pi/2\n        yaw=normalized_rad(yaw)+math.pi\n        self.__output=(pitch,yaw)        \n\n    def update(self):\n        self.__state.time=self.__conn.space_center.ut\n        self.__state.mass=self.__vessel.mass\n        self.__state.radius=Vector3.Tuple3(self.__vessel.position(self.__reference_frame))\n        self.__state.velocity=Vector3.Tuple3(self.__vessel.velocity(self.__reference_frame))\n \n        vessel=self.__vessel\n        n=len(self.__stages)\n        self.__stages[0].massWet=self.__state.mass\n        if self.__state.mass<=self.__stages[0].massDry:\n            self.__stages.pop(0)\n            vessel.control.throttle=1.0\n            #self.__throttle_bias.clear()\n            return None\n        \n        '''\n        if self.__stages[0].mode!=0:\n            acc=vessel.thrust/max(vessel.mass,0.1)\n            dacc=acc-g0*self.__stages[0].gLim\n            dacc=max(-1,min(1,dacc))\n            vessel.control.throttle = 1.0-self.__throttle_bias.integral(0.05*dacc)\n        '''\n\n        last_tgo=self.__previous.tgo\n        self.__upfg(n)\n        #if abs(last_tgo-self.__previous.tgo)>1:\n        #   return None\n        return self.__output\n\n    def update_stages(self,thrustK=1.0):\n        self.__last_stage_mass=0.0\n        self.__stages=[]\n        stages=get_stages(self.__vessel.parts.root)\n        for i in stages:\n            self.add_stage(i[0],i[1],i[2]*thrustK,i[3],self.__gLim)\n\n    def time_to_go(self):\n            return self.__tgo\n    \n    def __time_to_stage(self,stage):\n        if stage.mode==0:\n            dm=stage.thrust/(stage.isp*g0)\n            return (stage.massWet-stage.massDry)/dm     \n        else:\n            dv=stage.isp*math.log(stage.massWet/stage.massDry)\n            return dv/stage.gLim\n\n    def time_to_stage(self):\n        stage=self.__stages[0]\n        ret=self.__time_to_stage(stage)\n        if len(self.__stages)>1:\n            if self.__stages[1].massWet==stage.massDry:\n                ret=ret+self.__time_to_stage(self.__stages[1])\n        return ret\n\n    def stages_num(self):\n        return len(self.__stages)\n\n    def angle_to_rd(self):\n        return Vector3.Angle(self.__previous.rd,self.__state.radius)\n    \n    def rd_position(self):\n        pos=self.__previous.rd.tuple3()\n        ref=self.__reference_frame\n        body=self.__vessel.orbit.body\n        turn_angle=math.degrees(body.rotational_speed*self.__previous.tgo)\n        return (body.longitude_at_position(pos,ref)-turn_angle,body.latitude_at_position(pos,ref))\n\n    def set_max_g(self,g):\n        self.__gLim=g\n   \n    def vehicle_info(self):\n        for i in self.__stages:\n            print('wet mass:%f dry mass:%f thurst:%f isp:%f'%(i.massWet,i.massDry,i.thrust,i.isp))", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 15212, "lines_of_code": 415, "restricted": false}
{"id": "be05a527c5d45a20ef5802ead5e0fabdbe1eb16cbc1d7e3e39072c86abc9e448", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "find_resource", "description": "Extracted function find_resource from vehicle.py", "code": "def find_resource(parts,name):\n    ret=0.0\n    for i in parts:\n        for r in i.resources.all:\n            if r.name==name:\n                ret=ret+r.amount*r.density\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 184, "lines_of_code": 7, "inputs": ["parts", "name"], "restricted": false}
{"id": "0bfbce911b1085b7f0b9cb12c02d365382255ea507e2f662843d29d2e52a6261", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "traverse_engine", "description": "Extracted function traverse_engine from vehicle.py", "code": "def traverse_engine(parts):\n    engines = [e for e in parts if e.engine!=None]\n    res=[]\n    for e in engines:\n        fuel=0.0\n        for p in e.engine.propellants:\n            fuel=fuel+find_resource(parts,p.name)\n        res.append((e.engine,fuel))\n    return res\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 269, "lines_of_code": 9, "inputs": ["parts"], "restricted": false}
{"id": "4bfba329ffe87cc496cc9f14eb8471c6df51ceba1fb6a40ae413b0c4da2bf9e5", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "all_descendants", "description": "Extracted function all_descendants from vehicle.py", "code": "def all_descendants(root):\n    ret=[]\n    stack_parts=[root]\n    while stack_parts:\n        part = stack_parts.pop()\n        ret.append(part)\n        for i in part.children:\n            stack_parts.append(i)\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 223, "lines_of_code": 9, "inputs": ["root"], "restricted": false}
{"id": "a3fa4599a635e8cdd97426f57370c43bb5e444dd2d5325e0b7c95b371924b349", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "traverse_stage", "description": "Extracted function traverse_stage from vehicle.py", "code": "def traverse_stage(root):\n    stack_parts=[root]\n    decoupler=None\n    ret=[None,[]]\n    while stack_parts:\n        part = stack_parts.pop()\n        ret[1].append(part)\n        for child in part.children:\n            if child.decoupler==None :\n                stack_parts.append(child)\n            else:\n                tmp_parts=all_descendants(child)\n                engines = [e for e in tmp_parts if e.engine!=None]\n                if len(engines)==0:\n                    stack_parts.append(child)\n                else:\n                    if decoupler==None:\n                        decoupler=child\n                    elif decoupler.stage<child.stage:\n                        stack_parts.append(decoupler)\n                        decoupler=child\n                    else:\n                        stack_parts.append(child)\n    ret[0]=decoupler\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 865, "lines_of_code": 25, "inputs": ["root"], "restricted": false}
{"id": "4793dde2eefb34102b7eb8161780b9504bd83ef6c1439ef3f0dbac397c94a5e6", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "get_stages", "description": "Extracted function get_stages from vehicle.py", "code": "def get_stages(root):\n    ret=[]\n    next=root\n    while next:\n        isp=0.0\n        thrust=0.0\n        mass_wet=0.0\n        tmp=traverse_stage(next)\n        next=tmp[0]\n        parts=tmp[1]\n        for i in parts:\n            mass_wet=mass_wet+i.mass\n        mass_dry=mass_wet\n        engines=traverse_engine(parts)\n        for e in engines:\n            if e[1]>mass_wet*0.02:\n                thrust=thrust+e[0].max_vacuum_thrust\n                isp=e[0].vacuum_specific_impulse\n                mass_dry=mass_wet-e[1]\n        ret.append([mass_wet,mass_dry,thrust,isp])\n    return ret\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 587, "lines_of_code": 21, "inputs": ["root"], "restricted": false}
{"id": "3713ee14336b6a86d28a68141546469d0743b5878fdcb72da1856d8c62ea6481", "repo": "https://github.com/BlackBreezeCastle/peg-for-krpc-python", "commit": "529e8c7639bbbc2b32724d45d05c8870550652e0", "path": "vehicle.py", "lang": "python", "name": "vehicle_info", "description": "Extracted function vehicle_info from vehicle.py", "code": "def vehicle_info(vessel):\n    ret=get_stages(vessel.parts.root)\n    for i in ret:\n        print(i,end=' ')\n        print('m/M',i[0]/i[1])\n", "categories": ["function"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:44:08Z", "size_bytes": 138, "lines_of_code": 5, "inputs": ["vessel"], "restricted": false}
