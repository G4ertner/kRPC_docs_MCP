{"id": "ca9b536eb84b297c41b8a5db009530a70d947f60889327d63ab764d43f312ddf", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.__init__", "description": "Extracted function PID.__init__ from pid_controller.py", "code": "    def __init__(self,Kp,Ti,Td,i_max,i_min):\n        self.i_error = 0.0\n        command      = 0.0\n        self.running = False\n        self.set_gains(Kp,Ti,Td,i_max,i_min)\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 173, "lines_of_code": 5, "inputs": ["self", "Kp", "Ti", "Td", "i_max", "i_min"], "restricted": false}
{"id": "adaba799c09facd92b0dcccb4c42152b9d28cdac789cb51c286003a08d1a7b4e", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.set_gains", "description": "Extracted function PID.set_gains from pid_controller.py", "code": "    def set_gains(self,Kp,Ti,Td,i_max,i_min):\n        self.Kp    = Kp\n        self.Ti    = Ti\n        self.Td    = Td\n        self.i_max = i_max\n        self.i_min = i_min\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 172, "lines_of_code": 6, "inputs": ["self", "Kp", "Ti", "Td", "i_max", "i_min"], "restricted": false}
{"id": "4079a2bc5530418e8113e810f64bbe9c53589c61c97fc934962205f21ee9a58c", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.reset", "description": "Extracted function PID.reset from pid_controller.py", "code": "    def reset(self):\n        self.i_error    = 0.0\n        self.error_last = 0.0\n        self.running    = False\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 113, "lines_of_code": 4, "inputs": ["self"], "restricted": false}
{"id": "79772e97588eb830d77a997d3724340a3c3bbc7c4fb4081529bcac5eaff8759c", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID.calculate_command", "description": "Extracted function PID.calculate_command from pid_controller.py", "code": "    def calculate_command(self,error,dt):\n        if self.Ti > 0.0:\n            self.i_error = self.i_error + error*dt\n            self.i_error = min(max(self.i_error,self.i_min*self.Ti/self.Kp),self.i_max*self.Ti/self.Kp)\n\n            error += self.i_error/self.Ti\n\n        if self.Td > 0.0:\n            if self.running == True:\n                d_error = (error - error_last)*dt\n            else:\n                d_error = 0.0\n                running = True\n            self.error_last = error\n\n            error += d_error/self.Td\n\n        self.command = self.Kp*error\n        return self.command\n", "categories": ["method"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 599, "lines_of_code": 19, "inputs": ["self", "error", "dt"], "restricted": false}
{"id": "8a7b67f9d5321a0bea4d31227c71c8d1535e3addc59214acc19c24dac2115098", "repo": "https://github.com/pmauby/ksp-autopilot", "commit": "75f81822688e92c1c50e5aa3dc65c04ca9429554", "path": "pid_controller.py", "lang": "python", "name": "PID", "description": "Extracted class PID from pid_controller.py", "code": "class PID:\n    def __init__(self,Kp,Ti,Td,i_max,i_min):\n        self.i_error = 0.0\n        command      = 0.0\n        self.running = False\n        self.set_gains(Kp,Ti,Td,i_max,i_min)\n\n    def set_gains(self,Kp,Ti,Td,i_max,i_min):\n        self.Kp    = Kp\n        self.Ti    = Ti\n        self.Td    = Td\n        self.i_max = i_max\n        self.i_min = i_min\n        \n    def reset(self):\n        self.i_error    = 0.0\n        self.error_last = 0.0\n        self.running    = False\n\n    def calculate_command(self,error,dt):\n        if self.Ti > 0.0:\n            self.i_error = self.i_error + error*dt\n            self.i_error = min(max(self.i_error,self.i_min*self.Ti/self.Kp),self.i_max*self.Ti/self.Kp)\n\n            error += self.i_error/self.Ti\n\n        if self.Td > 0.0:\n            if self.running == True:\n                d_error = (error - error_last)*dt\n            else:\n                d_error = 0.0\n                running = True\n            self.error_last = error\n\n            error += d_error/self.Td\n\n        self.command = self.Kp*error\n        return self.command\n", "categories": ["class"], "dependencies": [], "license": "UNKNOWN", "license_url": "", "created_at": "2025-11-01T16:50:01Z", "size_bytes": 1079, "lines_of_code": 38, "restricted": false}
