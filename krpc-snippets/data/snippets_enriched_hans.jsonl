{"id": "6c4646962a3fe8e6e7f74116e5df75bd73e181c1195870496c8ea3e55114eab0", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KRPC_Examples/getScience.py", "lang": "python", "name": "makeScience", "description": "Find the next experiement available for a defined type\n\nParameters:\n   Vessel: krpc vessel\n   expType: Type of the experiment\n      MK1Pod, MisteryGoo", "code": "def makeScience(vessel, expType=None):\n    '''\n    Find the next experiement available for a defined type\n\n    Parameters:\n       Vessel: krpc vessel\n       expType: Type of the experiment\n          MK1Pod, MisteryGoo\n    '''\n    experimentsName = {'MK1Pod':'mk1pod', 'MisteryGoo':'GooExperiment'}\n\n    experience = experimentsName[expType]\n    \n    experimentRan = False\n    for part in vessel.parts.all:\n        if part.experiment \\\n            and part.name == experience:\n            if not part.experiment.deployed:\n                print('Making science with {}'.format(experience))\n                part.experiment.run()\n                experimentRan = True\n                break\n    if not experimentRan:\n        print('No experiment available')\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 752, "lines_of_code": 24, "inputs": ["vessel", "expType"], "restricted": true}
{"id": "780731d6d8edf32b0a02085743ceb0e686da47d597da9ad7b757faed3404cc0b", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KRPC_Examples/matplotAnimation.py", "lang": "python", "name": "animate", "description": "Extracted function animate from KRPC_Examples/matplotAnimation.py", "code": "def animate(_):\n    global ksc_coord, data, happenings, xlim, ylim, parts_i, booster_sep, MECO, SECO\n\n    position = np.array((latitude(), longitude()))\n    h_distance = (np.linalg.norm(position - ksc_coord) * (2.*np.pi*planet_radius)/360.)/1000  # km\n\n    # EVENTS\n\n    parts = len(vessel.parts.all)\n\n    if parts != parts_i and not booster_sep:\n        booster_sep = True\n        event = pd.DataFrame([[h_distance, altitude()/1000, \"Booster separation\"]],\n                             columns=[\"Horizontal distance\", \"Altitude\", \"Name\"])\n        happenings = happenings.append(event)\n\n    elif parts != parts_i and booster_sep and not MECO:\n        MECO = True\n        event = pd.DataFrame([[h_distance, altitude()/1000, \"MECO\"]],\n                             columns=[\"Horizontal distance\", \"Altitude\", \"Name\"])\n        happenings = happenings.append(event)\n\n    elif parts != parts_i and booster_sep and MECO and not SECO:\n        SECO = True\n        event = pd.DataFrame([[h_distance, altitude()/1000, \"SECO\"]],\n                             columns=[\"Horizontal distance\", \"Altitude\", \"Name\"])\n        happenings = happenings.append(event)\n\n    parts_i = parts\n\n    # DATA\n\n    if str(vessel.situation) == \"VesselSituation.pre_launch\" or str(vessel.situation) == \"VesselSituation.landed\":\n        xar, yar = 0, 0\n        xhap, yhap = 0, 0\n\n    else:\n        newdata = pd.DataFrame([[h_distance, altitude()/1000]], columns=[\"Horizontal distance\", \"Altitude\"])\n        data = data.append(newdata)\n\n        xar = data[\"Horizontal distance\"]\n        yar = data[\"Altitude\"]\n        xhap = happenings[\"Horizontal distance\"]\n        yhap = happenings[\"Altitude\"]\n\n    # PLOT\n\n    if xlim - h_distance < 5:\n        xlim += 20\n\n    if ylim - altitude()/1000 < 5:\n        ylim += 10\n        xlim += 10\n\n    ax1.clear()  # can I move this to the start of the loop?\n    ax1.plot(xar, yar, color=\"white\", linewidth=\"3\")\n    ax1.scatter(xhap, yhap, color=\"white\", linewidth=\"5\")\n\n    plt.xlim(-2, xlim)\n    plt.ylim(0, ylim)\n\n    if booster_sep:\n        row = happenings.loc[happenings[\"Name\"] == \"Booster separation\"]\n        xy = (row[\"Horizontal distance\"]+1, row[\"Altitude\"]-0.5)\n        ax1.annotate(\"Booster separation\", xycoords='data', xy=xy, xytext=xy, color=\"white\")\n\n    if MECO:\n        row = happenings.loc[happenings[\"Name\"] == \"MECO\"]\n        xy = (row[\"Horizontal distance\"]+1, row[\"Altitude\"]-0.5)\n        ax1.annotate(\"MECO\", xycoords='data', xy=xy, xytext=xy, color=\"white\")\n\n    if SECO:\n        row = happenings.loc[happenings[\"Name\"] == \"SECO\"]\n        xy = (row[\"Horizontal distance\"]+1, row[\"Altitude\"]-0.5)\n        ax1.annotate(\"SECO\", xycoords='data', xy=xy, xytext=xy, color=\"white\")\n\n    ax1.imshow(Z, cmap=colormap, interpolation='bicubic', extent=[-2, xlim, 0, 60])\n    ax1.set_axis_bgcolor('black')\n    ax1.set_xlabel('Horizontal distance (km)')\n    ax1.set_ylabel('Altitude (km)')\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 2904, "lines_of_code": 80, "inputs": ["_"], "restricted": true}
{"id": "826204d41c256e732399f531ab432736ed8e6070be2d41c1c2c2879d3ca689f9", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KRPC_Examples/matplotAnimation.py", "lang": "python", "name": "CONST_BLOCK", "description": "Top-level constants: KCKF", "code": "KCKF = vessel.orbit.body.reference_frame\n", "categories": ["const"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 41, "lines_of_code": 1, "restricted": true}
{"id": "669dd85bb84339a3dc49dfb772cff28b73df0e1f3bb003d7a6b6837815deb4e8", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KSP_MissionManager/KSP_MissionManager.py", "lang": "python", "name": "KSP_MissionManager.__init__", "description": "Extracted function KSP_MissionManager.__init__ from KSP_MissionManager/KSP_MissionManager.py", "code": "    def __init__(self):\n        print('Initialize Mission...')\n", "categories": ["method"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 63, "lines_of_code": 2, "inputs": ["self"], "restricted": true}
{"id": "7d189b9b0683b14e8a899afca31428cfdb104018a07d8da58cc5827999a67470", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "KSP_MissionManager/KSP_MissionManager.py", "lang": "python", "name": "KSP_MissionManager", "description": "Extracted class KSP_MissionManager from KSP_MissionManager/KSP_MissionManager.py", "code": "class KSP_MissionManager():\n    def __init__(self):\n        print('Initialize Mission...')\n", "categories": ["class"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 91, "lines_of_code": 3, "restricted": true}
{"id": "43c33d53b73aa7356c16026c41c9fc44211a6eb3085d0495fb03c315a45f689e", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "Mission_I/Mission_I.py", "lang": "python", "name": "makeScience", "description": "Find the next experiement available for a defined type\n\nParameters:\n   Vessel: krpc vessel\n   expType: Type of the experiment\n      MK1Pod, MysteryGoo", "code": "def makeScience(vessel, expType=None):\n    '''\n    Find the next experiement available for a defined type\n\n    Parameters:\n       Vessel: krpc vessel\n       expType: Type of the experiment\n          MK1Pod, MysteryGoo\n    '''\n    experimentsName = {'MK1Pod':'mk1pod', 'MysteryGoo':'GooExperiment'}\n\n    experience = experimentsName[expType]\n    \n    experimentRan = False\n    for part in vessel.parts.all:\n        if part.experiment \\\n            and part.name == experience:\n            if not part.experiment.deployed:\n                print('Making science with {}'.format(experience))\n                part.experiment.run()\n                experimentRan = True\n                break\n    if not experimentRan:\n        print('No experiment available')\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 752, "lines_of_code": 24, "inputs": ["vessel", "expType"], "restricted": true}
{"id": "5e423d4a4b60cafe6ebe54c29ee6958395030b19e43af87a1830116085b731d0", "repo": "https://github.com/Hansastro/KSP_Adventure", "commit": "d150abfe0da02818e88e321cb1fb4881d3a667f3", "path": "Mission_I/Mission_I.py", "lang": "python", "name": "countDown", "description": "Extracted function countDown from Mission_I/Mission_I.py", "code": "def countDown(start=20):\n    print('Countdown...')\n    for i in range(start, 0, -1):\n        print('{}...'.format(i))\n        time.sleep(1)\n", "categories": ["function"], "dependencies": [], "license": "GPL-3.0", "license_url": "https://www.gnu.org/licenses/gpl-3.0-standalone.html", "created_at": "2025-11-01T16:59:13Z", "size_bytes": 140, "lines_of_code": 5, "inputs": ["start"], "restricted": true}
