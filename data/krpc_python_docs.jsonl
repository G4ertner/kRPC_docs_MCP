{"url": "https://krpc.github.io/krpc/python.html", "title": "Python¶", "headings": [], "anchors": ["python"], "content_text": "Python\n¶\nPython Client\nInstalling the Library\nConnecting to the Server\nCalling Remote Procedures\nStreaming Data from the Server\nSynchronizing with Stream Updates\nCustom Events\nClient API Reference\nKRPC API\nKRPC\nExpressions\nSpaceCenter API\nSpaceCenter\nVessel\nCelestialBody\nFlight\nOrbit\nControl\nCommunications\nParts\nResources\nNode\nReferenceFrame\nAutoPilot\nCamera\nWaypoints\nContracts\nGeometry Types\nAlarms\nDrawing API\nDrawing\nLine\nPolygon\nText\nUser Interface API\nUI\nCanvas\nPanel\nText\nButton\nInputField\nRect Transform\nInfernalRobotics API\nInfernalRobotics\nServoGroup\nServo\nExample\nKerbal Alarm Clock API\nKerbalAlarmClock\nAlarm\nAlarmType\nAlarmAction\nExample\nRemoteTech API\nRemoteTech\nComms\nAntenna\nExample\nLiDAR API\nLiDAR\nLaser\nDocking Camera API\nDockingCamera\nCamera"}
{"url": "https://krpc.github.io/krpc/", "title": "kRPC Documentation¶", "headings": [], "anchors": ["krpc-documentation"], "content_text": "kRPC Documentation\n¶\nkRPC allows you to control Kerbal Space Program from scripts running outside of\nthe game.\nIt comes with client libraries for many popular languages including\nC#\n,\nC++\n,\nC\n,\nJava\n,\nLua\n,\nPython\nand\nothers\n.\nIt also supports websockets and serialio (for example on Arduino).\nGetting Started Guide\nTutorials and Examples\nClients, services and tools made by others\nThe mod exposes most of KSPs API for controlling and interacting with rockets,\nand also includes support several popular mods including Ferram Aerospace\nResearch, Kerbal Alarm Clock and Infernal Robotics.\nThis functionality is provided to client programs via a server running in the\ngame. Client scripts connect to this server and use it to execute ‘remote\nprocedures’. This communication can be done on local machine only, over a local\nnetwork, or even over the wider internet if configured correctly. The server is\nextensible - additional remote procedures (grouped into “services”) can be added\nto the server using the\nService API\n."}
{"url": "https://krpc.github.io/krpc/getting-started.html", "title": "Getting Started¶", "headings": ["The Server Plugin¶", "Installation¶", "Configuration¶", "The Python Client¶", "On Windows¶", "On Linux¶", "‘Hello World’ Script¶", "Going further…¶"], "anchors": ["getting-started", "id1", "the-server-plugin", "installation", "configuration", "the-python-client", "on-windows", "on-linux", "hello-world-script", "going-further"], "content_text": "Getting Started\n¶\nThis short guide explains the basics for getting the kRPC server set up and running, and writing a\nbasic Python script to interact with the game.\nThe Server Plugin\n¶\nInstallation\n¶\nDownload and install the kRPC server plugin from one of these locations:\nGithub\nSpaceDock\nCurse\nOr the install it using\nCKAN\nStart up KSP and load a save game.\nYou should be greeted by the server window:\nClick “Start server” to, erm… start the server! If all goes well, the light should turn a happy\ngreen color.\nYou can hide the window by clicking the close button in the top right. The window can also be\nshown/hidden by clicking on the icon in the top right:\nThis icon will also turn green when the server is online.\nConfiguration\n¶\nThe server is configured by clicking edit on the window displayed in-game:\nProtocol\n: this is the protocol used by the server. This affects type of client can connect to\nthe server. For Python, and most other clients that communicate over TCP/IP, you want to select\n“Protobuf over TCP”.\nAddress\n: this is the IP address that the server will listen on. To only allow connections\nfrom the local machine, select ‘localhost’ (the default). To allow connections over a network,\neither select the local IP address of your machine, or choose ‘Manual’ and enter the local IP\naddress manually.\nRPC and Stream port numbers\n: These need to be set to port numbers that are available on your\nmachine. In most cases, they can just be left as the default.\nThere are also several advanced settings, which are hidden by default, but can be revealed by\nchecking “Show advanced settings”:\nAuto-start server\n: When enabled, the server will start automatically when the game loads.\nAuto-accept new clients\n: When enabled, new client connections are automatically allowed. When\ndisabled, a pop-up is displayed asking whether the new client connection should be allowed.\nThe other advanced settings control the\nperformance of the server\n.\nThe Python Client\n¶\nOn Windows\n¶\nIf you don’t already have python installed, download the python installer and run it:\nhttps://www.python.org/downloads/windows\nWhen running the installer, make sure that pip is\ninstalled as well.\nInstall the kRPC python module, by opening command prompt and running the following command:\nC:\\Python310\\Scripts\\pip.exe\ninstall\nkrpc\nYou might need to replace\nC:\\Python310\nwith the\nlocation of your python installation.\nRun Python IDLE (or your favorite editor) and start coding!\nOn Linux\n¶\nYour linux distribution likely already comes with python installed. If not, install python using\nyour favorite package manager, or get it from here:\nhttps://www.python.org/downloads\nYou also need to install pip, either using your package manager, or from here:\nhttps://pypi.python.org/pypi/pip\nInstall the kRPC python module by running the following from a terminal:\npip\ninstall\nkrpc\nStart coding!\n‘Hello World’ Script\n¶\nRun KSP and start the server with the default settings. Then run the following python script.\n1\nimport\nkrpc\n2\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Hello World'\n)\n3\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\n4\nprint\n(\nvessel\n.\nname\n)\nThis does the following: line 1 loads the kRPC python module, line 2 opens a new connection to the\nserver, line 3 gets the active vessel and line 4 prints out the name of the vessel. You should see\nsomething like the following:\nCongratulations! You’ve written your first script that communicates with KSP.\nGoing further…\n¶\nFor some more interesting examples of what you can do with kRPC, check out the\ntutorials\n.\nClient libraries are available for other languages too, including\nC#\n,\nC++\n,\nC\n,\nJava\nand\nLua\n.\nIt is also possible to\ncommunicate with the server manually\nfrom\nany language you like."}
{"url": "https://krpc.github.io/krpc/tutorials.html", "title": "Tutorials and Examples¶", "headings": [], "anchors": ["tutorials-and-examples"], "content_text": "Tutorials and Examples\n¶\nThis collection of tutorials and example scripts explain how to use the features\nof kRPC.\nSub-Orbital Flight\nReference Frames\nLaunch into Orbit\nPitch, Heading and Roll\nInteracting with Parts\nDocking Guidance\nUser Interface\nAutoPilot"}
{"url": "https://krpc.github.io/krpc/python/client.html", "title": "Python Client¶", "headings": ["Installing the Library¶", "Connecting to the Server¶", "Calling Remote Procedures¶", "Streaming Data from the Server¶", "Synchronizing with Stream Updates¶", "Condition Variables¶", "Callbacks¶", "Custom Events¶", "Client API Reference¶"], "anchors": ["python-client", "installing-the-library", "connecting-to-the-server", "calling-remote-procedures", "streaming-data-from-the-server", "python-client-streams", "synchronizing-with-stream-updates", "condition-variables", "callbacks", "custom-events", "python-client-events", "client-api-reference", "krpc.connect", "krpc.client.Client", "krpc.client.Client.add_stream", "krpc.client.Client.stream", "krpc.client.Client.stream_update_condition", "krpc.client.Client.wait_for_stream_update", "krpc.client.Client.add_stream_update_callback", "krpc.client.Client.remove_callback", "krpc.client.Client.get_call", "krpc.client.Client.close", "krpc.client.Client.krpc", "krpc.client.KRPC", "krpc.stream.Stream", "krpc.stream.Stream.start", "krpc.stream.Stream.rate", "krpc.stream.Stream.__call__", "krpc.stream.Stream.condition", "krpc.stream.Stream.wait", "krpc.stream.Stream.add_callback", "krpc.stream.Stream.remove_callback", "krpc.stream.Stream.remove", "krpc.event.Event", "krpc.event.Event.start", "krpc.event.Event.condition", "krpc.event.Event.wait", "krpc.event.Event.add_callback", "krpc.event.Event.remove_callback", "krpc.event.Event.remove", "krpc.event.Event.stream"], "content_text": "Python Client\n¶\nThis client provides a Python API for interacting with a kRPC server.\nInstalling the Library\n¶\nThe library can be found on\nPyPI\nor\ndownloaded from GitHub\n.\nTo install using pip on Linux:\npip\ninstall\nkrpc\nOr on Windows:\nC:\\Python310\\Scripts\\pip.exe install krpc\nConnecting to the Server\n¶\nThe\nkrpc.connect()\nfunction is used to open a connection to a server. It returns a connection\nobject (of type\nkrpc.client.Client\n) through which you can interact with the server. The\nfollowing example connects to a server running on the local machine, queries its version and prints\nit out:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nprint\n(\nconn\n.\nkrpc\n.\nget_status\n()\n.\nversion\n)\nThis function also accepts arguments that specify what address and port numbers to connect to, and\nan optional descriptive name for the connection which is displayed in the kRPC window in the\ngame. For example:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'My Example Program'\n,\naddress\n=\n'192.168.1.10'\n,\nrpc_port\n=\n1000\n,\nstream_port\n=\n1001\n)\nprint\n(\nconn\n.\nkrpc\n.\nget_status\n()\n.\nversion\n)\nCalling Remote Procedures\n¶\nThe kRPC server provides\nprocedures\nthat a client can run. These procedures are arranged in groups\ncalled\nservices\nto keep things organized. When connecting, the Python client interrogates the\nserver to discover what procedures it provides, and dynamically creates class types, methods,\nproperties etc. to call them.\nThe following example demonstrates how to invoke remote procedures using the Python client. It calls\nSpaceCenter.active_vessel\nto get an object representing the active vessel (of type\nSpaceCenter.Vessel\n). It sets the name of the vessel and then prints out its altitude:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nvessel\n.\nname\n=\n\"My Vessel\"\nflight_info\n=\nvessel\n.\nflight\n()\nprint\n(\nflight_info\n.\nmean_altitude\n)\nAll of the functionality provided by the\nSpaceCenter\nservice is accessible via\nconn.space_center\n. To explore the functionality provided by a service, you can use the\nhelp()\nfunction from an interactive terminal. For example, running\nhelp(conn.space_center)\nwill list all of the classes, enumerations, procedures and properties provides by the\nSpaceCenter\nservice. This works similarly for class types, for example:\nhelp(conn.space_center.Vessel)\n.\nStreaming Data from the Server\n¶\nA common use case for kRPC is to continuously extract data from the game. The naive approach to do\nthis would be to repeatedly call a remote procedure, such as in the following which repeatedly\nprints the position of the active vessel:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nrefframe\n=\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\nwhile\nTrue\n:\nprint\n(\nvessel\n.\nposition\n(\nrefframe\n))\nThis approach requires significant communication overhead as request/response messages are\nrepeatedly sent between the client and server. kRPC provides a more efficient mechanism to achieve\nthis, called\nstreams\n.\nA stream repeatedly executes a procedure on the server (with a fixed set of argument values) and\nsends the result to the client. It only requires a single message to be sent to the server to\nestablish the stream, which will then continuously send data to the client until the stream is\nclosed.\nThe following example does the same thing as above using streams:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nrefframe\n=\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\nposition\n=\nconn\n.\nadd_stream\n(\nvessel\n.\nposition\n,\nrefframe\n)\nwhile\nTrue\n:\nprint\n(\nposition\n())\nIt calls\nkrpc.client.Client.add_stream()\nonce at the start of the program to create the\nstream, and then repeatedly prints the position returned by the stream. The stream is automatically\nclosed when the client disconnects.\nStreams can also be created using the\nwith\nstatement, which ensures that the stream is closed\nafter leaving the block:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nrefframe\n=\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\nwith\nconn\n.\nstream\n(\nvessel\n.\nposition\n,\nrefframe\n)\nas\nposition\n:\nwhile\nTrue\n:\nprint\n(\nposition\n())\nA stream can be created for any procedure that returns a value. This includes both method calls and\nattribute accesses. The examples above demonstrated how to stream method calls. Attributes can be\nstreamed as follows:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nflight_info\n=\nvessel\n.\nflight\n()\naltitude\n=\nconn\n.\nadd_stream\n(\ngetattr\n,\nflight_info\n,\n'mean_altitude'\n)\nwhile\nTrue\n:\nprint\n(\naltitude\n())\nA stream can be created for any function call (except property setters). The most recent value of a\nstream can be obtained by calling\nkrpc.stream.Stream.__call__()\n. A stream can be stopped and\nremoved from the server by calling\nkrpc.stream.Stream.remove()\non the stream object. All of a\nclients streams are automatically stopped when it disconnects.\nSynchronizing with Stream Updates\n¶\nA common use case for kRPC is to wait until the value returned by a method or attribute changes, and\nthen take some action. kRPC provides two mechanisms to do this efficiently:\ncondition variables\nand\ncallbacks\n.\nCondition Variables\n¶\nEach stream has a condition variable associated with it, that is notified whenever the value of the\nstream changes. The condition variables are instances of\nthreading.Condition\nfrom the Python\nstandard library. These can be used to block the current thread of execution until the value of the\nstream changes.\nThe following example waits until the abort button is pressed in game, by waiting for the value of\nvessel.control.abort\nto change to true:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nwith\nconn\n.\nstream\n(\ngetattr\n,\nvessel\n.\ncontrol\n,\n'abort'\n)\nas\nabort\n:\nwith\nabort\n.\ncondition\n:\nwhile\nnot\nabort\n():\nabort\n.\nwait\n()\nThis code creates a stream, acquires a lock on the streams condition variable (using a\nwith\nstatement) and then repeatedly checks the value of\nabort\n. It leaves the loop when it changes to\ntrue.\nThe body of the loop calls\nwait\non the stream, which causes the program to block until the value\nchanges. This prevents the loop from ‘spinning’ and so it does not consume processing resources\nwhilst waiting.\nNote\nThe stream does not start receiving updates until the first call to\nwait\n. This means that the\nexample code will not miss any updates to the streams value, as it will have already locked the\ncondition variable before the first stream update is received.\nThe example code above uses a\nwith\nstatement to acquire the lock on the condition variable. This\ncan also be done explicitly using\nacquire\nand\nrelease\n:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nwith\nconn\n.\nstream\n(\ngetattr\n,\nvessel\n.\ncontrol\n,\n'abort'\n)\nas\nabort\n:\nabort\n.\ncondition\n.\nacquire\n()\nwhile\nnot\nabort\n():\nabort\n.\nwait\n()\nabort\n.\ncondition\n.\nrelease\n()\nCallbacks\n¶\nStreams allow you to register callback functions that are called whenever the value of the stream\nchanges. Callback functions should take a single argument, which is the new value of the stream, and\nshould return nothing.\nFor example the following program registers two callbacks that are invoked when the value of\nvessel.conrol.abort\nchanges:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nabort\n=\nconn\n.\nadd_stream\n(\ngetattr\n,\nvessel\n.\ncontrol\n,\n'abort'\n)\ndef\ncheck_abort1\n(\nx\n):\nprint\n(\n'Abort 1 called with a value of'\n,\nx\n)\ndef\ncheck_abort2\n(\nx\n):\nprint\n(\n'Abort 2 called with a value of'\n,\nx\n)\nabort\n.\nadd_callback\n(\ncheck_abort1\n)\nabort\n.\nadd_callback\n(\ncheck_abort2\n)\nabort\n.\nstart\n()\n# Keep the program running...\nwhile\nTrue\n:\npass\nNote\nWhen a stream is created it does not start receiving updates until\nstart\nis called. This is\nimplicitly called when accessing the value of a stream, but as this example does not do this an\nexplicit call to\nstart\nis required.\nNote\nThe callbacks are registered before the call to\nstart\nso that stream updates are not missed.\nNote\nThe callback function may be called from a different thread to that which created the stream. Any\nchanges to shared state must therefore be protected with appropriate synchronization.\nCustom Events\n¶\nSome procedures return event objects of type\nkrpc.event.Event\n. These allow you to wait\nuntil an event occurs, by calling\nkrpc.event.Event.wait\n. Under the hood, these are\nimplemented using streams and condition variables.\nCustom events can also be created. An expression API allows you to create code that runs on the\nserver and these can be used to build a custom event. For example, the following creates the\nexpression\nmean_altitude\n>\n1000\nand then creates an event that will be triggered when the\nexpression returns true:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nflight\n=\nvessel\n.\nflight\n()\n# Convert a remote procedure call to a message,\n# so it can be passed to the server\nmean_altitude\n=\nconn\n.\nget_call\n(\ngetattr\n,\nflight\n,\n'mean_altitude'\n)\n# Create an expression on the server\nexpr\n=\nconn\n.\nkrpc\n.\nExpression\n.\ngreater_than\n(\nconn\n.\nkrpc\n.\nExpression\n.\ncall\n(\nmean_altitude\n),\nconn\n.\nkrpc\n.\nExpression\n.\nconstant_double\n(\n1000\n))\n# Create an event from the expression\nevent\n=\nconn\n.\nkrpc\n.\nadd_event\n(\nexpr\n)\n# Wait on the event\nwith\nevent\n.\ncondition\n:\nevent\n.\nwait\n()\nprint\n(\n'Altitude reached 1000m'\n)\nClient API Reference\n¶\nkrpc.\nconnect\n(\n[\nname=None\n]\n[\n,\naddress='127.0.0.1'\n]\n[\n,\nrpc_port=50000\n]\n[\n,\nstream_port=50001\n]\n)\n¶\nThis function creates a connection to a kRPC server. It returns a\nkrpc.client.Client\nobject, through which the server can be communicated with.\nParameters\n:\nname\n(\nstr\n) – A descriptive name for the connection. This is passed to the server and appears\nin the in-game server window.\naddress\n(\nstr\n) – The address of the server to connect to. Can either be a hostname or an IP\naddress in dotted decimal notation. Defaults to ‘127.0.0.1’.\nrpc_port\n(\nint\n) – The port number of the RPC Server. Defaults to 50000. This should match the\nRPC port number of the server you want to connect to.\nstream_port\n(\nint\n) – The port number of the Stream Server. Defaults to 50001. This should\nmatch the stream port number of the server you want to connect to.\nclass\nkrpc.client.\nClient\n¶\nThis class provides the interface for communicating with the server. It is dynamically populated\nwith all the functionality provided by the server. Instances of this class should be obtained by\ncalling\nkrpc.connect()\n.\nadd_stream\n(\nfunc\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\nCreate a stream for the function\nfunc\ncalled with arguments\nargs\nand\nkwargs\n. Returns a\nkrpc.stream.Stream\nobject.\nstream\n(\nfunc\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\nAllows use of the\nwith\nstatement to create a stream and automatically remove it from the\nserver when it goes out of scope. The function to be streamed should be passed as\nfunc\n, and\nits arguments as\nargs\nand\nkwargs\n.\nstream_update_condition\n¶\nA condition variable (of type\nthreading.Condition\n) that is notified whenever a stream\nupdate finishes processing.\nwait_for_stream_update\n(\ntimeout\n=\nNone\n)\n¶\nThis method blocks until a stream update finishes processing or the operation times out.\nThe stream update condition variable must be locked before calling this method.\nIf\ntimeout\nis specified and is not\nNone\n, it should be a floating point number specifying\nthe timeout in seconds for the operation.\nadd_stream_update_callback\n(\ncallback\n)\n¶\nAdds a callback function that is invoked whenever a stream update finishes processing.\nNote\nThe callback function may be called from a different thread to that which created the\nstream. Any changes to shared state must therefore be protected with appropriate\nsynchronization.\nremove_callback\n(\ncallback\n)\n¶\nRemoves a stream update callback function.\nget_call\n(\nfunc\n,\n*\nargs\n,\n**\nkwargs\n)\n¶\nConverts a call to function\nfunc\nwith arguments\nargs\nand\nkwargs\ninto a message\nobject. This allows descriptions of procedure calls to be passed to the server, for example\nwhen constructing custom events. See\nCustom Events\n.\nclose\n(\n)\n¶\nCloses the connection to the server.\nkrpc\n¶\nThe basic KRPC service, providing interaction with basic functionality of the server.\nReturn type\n:\nkrpc.client.KRPC\nclass\nkrpc.client.\nKRPC\n¶\nThis class provides access to the basic server functionality provided by the\nKRPC\nservice. An instance can be obtained by calling\nkrpc.client.Client.krpc\n.\nSee\nKRPC\nfor full documentation of this class.\nSome of this functionality is used internally by the python client (for example to create and\nremove streams) and therefore does not need to be used directly from application code.\nclass\nkrpc.stream.\nStream\n¶\nThis class represents a stream. See\nStreaming Data from the Server\n.\nstart\n(\nwait\n=\nTrue\n)\n¶\nStarts the stream. When a stream is created by calling\nkrpc.client.Client.add_stream()\nit does not start sending updates to the client until this method is called.\nIf wait is true, this method will block until at least one update has been received from the\nserver.\nIf wait is false, the method starts the stream and returns immediately. Subsequent calls to\n__call__()\nmay raise a\nStreamError\nexception if the stream does not yet contain a\nvalue.\nrate\n¶\nThe update rate of the stream in Hertz. When set to zero, the rate is unlimited.\n__call__\n(\n)\n¶\nReturns the most recent value for the stream. If executing the remote procedure for the stream\nthrows an exception, calling this method will rethrow the exception. Raises a\nStreamError\nexception if no update has been received from the server.\nIf the stream has not been started this method calls\nstart(True)\nto start the stream and\nwait until at least one update has been received.\ncondition\n¶\nA condition variable (of type\nthreading.Condition\n) that is notified whenever the value of\nthe stream changes.\nwait\n(\ntimeout\n=\nNone\n)\n¶\nThis method blocks until the value of the stream changes or the operation times out.\nThe streams condition variable must be locked before calling this method.\nIf\ntimeout\nis specified and is not\nNone\n, it should be a floating point number specifying\nthe timeout in seconds for the operation.\nIf the stream has not been started this method calls\nstart(False)\nto start the stream\n(without waiting for at least one update to be received).\nadd_callback\n(\ncallback\n)\n¶\nAdds a callback function that is invoked whenever the value of the stream changes. The\ncallback function should take one argument, which is passed the new value of the stream.\nNote\nThe callback function may be called from a different thread to that which created the\nstream. Any changes to shared state must therefore be protected with appropriate\nsynchronization.\nremove_callback\n(\ncallback\n)\n¶\nRemoves a callback function from the stream.\nremove\n(\n)\n¶\nRemoves the stream from the server.\nclass\nkrpc.event.\nEvent\n¶\nThis class represents an event. See\nCustom Events\n. It is wrapper around a stream of\ntype\nbool\nthat indicates when the event occurs.\nstart\n(\n)\n¶\nStarts the event. When an event is created, it will not receive updates from the server until\nthis method is called.\ncondition\n¶\nThe condition variable (of type\nthreading.Condition\n) that is notified whenever the event\noccurs.\nwait\n(\ntimeout\n=\nNone\n)\n¶\nThis method blocks until the event occurs or the operation times out.\nThe events condition variable must be locked before calling this method.\nIf\ntimeout\nis specified and is not\nNone\n, it should be a floating point number specifying\nthe timeout in seconds for the operation.\nIf the event has not been started this method calls\nstart()\nto start the underlying\nstream.\nadd_callback\n(\ncallback\n)\n¶\nAdds a callback function that is invoked whenever the event occurs. The callback function\nshould be a function that takes zero arguments.\nremove_callback\n(\ncallback\n)\n¶\nRemoves a callback function from the event.\nremove\n(\n)\n¶\nRemoves the event from the server.\nstream\n¶\nReturns the underlying stream for the event."}
{"url": "https://krpc.github.io/krpc/python/api/krpc.html", "title": "KRPC API¶", "headings": [], "anchors": ["krpc-api"], "content_text": "KRPC API\n¶\nKRPC\nExpressions"}
{"url": "https://krpc.github.io/krpc/python/api/space-center.html", "title": "SpaceCenter API¶", "headings": [], "anchors": ["spacecenter-api"], "content_text": "SpaceCenter API\n¶\nSpaceCenter\nVessel\nCelestialBody\nFlight\nOrbit\nControl\nCommunications\nParts\nResources\nNode\nReferenceFrame\nAutoPilot\nCamera\nWaypoints\nContracts\nGeometry Types\nAlarms"}
{"url": "https://krpc.github.io/krpc/python/api/drawing.html", "title": "Drawing API¶", "headings": [], "anchors": ["drawing-api"], "content_text": "Drawing API\n¶\nDrawing\nLine\nPolygon\nText"}
{"url": "https://krpc.github.io/krpc/python/api/ui.html", "title": "User Interface API¶", "headings": [], "anchors": ["user-interface-api"], "content_text": "User Interface API\n¶\nUI\nCanvas\nPanel\nText\nButton\nInputField\nRect Transform"}
{"url": "https://krpc.github.io/krpc/python/api/infernal-robotics.html", "title": "InfernalRobotics API¶", "headings": ["Example¶"], "anchors": ["infernalrobotics-api", "example"], "content_text": "InfernalRobotics API\n¶\nProvides RPCs to interact with\nInfernal Robotics Next\n. Provides the following classes:\nInfernalRobotics\nServoGroup\nServo\nExample\n¶\nThe following example gets the control group named “MyGroup”, prints out the\nnames and positions of all of the servos in the group, then moves all of the\nservos to the right for 1 second.\nimport\ntime\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'InfernalRobotics Example'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\ngroup\n=\nconn\n.\ninfernal_robotics\n.\nservo_group_with_name\n(\nvessel\n,\n'MyGroup'\n)\nif\ngroup\nis\nNone\n:\nprint\n(\n'Group not found'\n)\nexit\n(\n1\n)\nfor\nservo\nin\ngroup\n.\nservos\n:\nprint\n(\nservo\n.\nname\n,\nservo\n.\nposition\n)\ngroup\n.\nmove_right\n()\ntime\n.\nsleep\n(\n1\n)\ngroup\n.\nstop\n()"}
{"url": "https://krpc.github.io/krpc/python/api/kerbal-alarm-clock.html", "title": "Kerbal Alarm Clock API¶", "headings": ["Example¶"], "anchors": ["kerbal-alarm-clock-api", "example"], "content_text": "Kerbal Alarm Clock API\n¶\nProvides RPCs to interact with the\nKerbal Alarm Clock\nmod. Provides the\nfollowing classes:\nKerbalAlarmClock\nAlarm\nAlarmType\nAlarmAction\nExample\n¶\nThe following example creates a new alarm for the active vessel. The alarm is\nset to trigger after 10 seconds have passed, and display a message.\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Kerbal Alarm Clock Example'\n)\nalarm\n=\nconn\n.\nkerbal_alarm_clock\n.\ncreate_alarm\n(\nconn\n.\nkerbal_alarm_clock\n.\nAlarmType\n.\nraw\n,\n'My New Alarm'\n,\nconn\n.\nspace_center\n.\nut\n+\n10\n)\nalarm\n.\nnotes\n=\n'10 seconds have now passed since the alarm was created.'\nalarm\n.\naction\n=\nconn\n.\nkerbal_alarm_clock\n.\nAlarmAction\n.\nmessage_only"}
{"url": "https://krpc.github.io/krpc/python/api/remote-tech.html", "title": "RemoteTech API¶", "headings": ["Example¶"], "anchors": ["remotetech-api", "example"], "content_text": "RemoteTech API\n¶\nProvides RPCs to interact with the\nRemoteTech\nmod. Provides the following classes:\nRemoteTech\nComms\nAntenna\nExample\n¶\nThe following example sets the target of a dish on the active vessel then prints\nout the signal delay to the active vessel.\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'RemoteTech Example'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\n# Set a dish target\npart\n=\nvessel\n.\nparts\n.\nwith_title\n(\n'Reflectron KR-7'\n)[\n0\n]\nantenna\n=\nconn\n.\nremote_tech\n.\nantenna\n(\npart\n)\nantenna\n.\ntarget_body\n=\nconn\n.\nspace_center\n.\nbodies\n[\n'Jool'\n]\n# Get info about the vessels communications\ncomms\n=\nconn\n.\nremote_tech\n.\ncomms\n(\nvessel\n)\nprint\n(\n'Signal delay =\n%.4f\nseconds'\n%\ncomms\n.\nsignal_delay\n)"}
{"url": "https://krpc.github.io/krpc/python/api/lidar.html", "title": "LiDAR API¶", "headings": [], "anchors": ["lidar-api"], "content_text": "LiDAR API\n¶\nProvides RPCs to interact with the\nLaserDist\nmod.\nLiDAR\nLaser"}
{"url": "https://krpc.github.io/krpc/python/api/docking-camera.html", "title": "Docking Camera API¶", "headings": [], "anchors": ["docking-camera-api"], "content_text": "Docking Camera API\n¶\nProvides RPCs to interact with the\nDocking Camera\nmod.\nDockingCamera\nCamera"}
{"url": "https://krpc.github.io/krpc/python/api/krpc/krpc.html", "title": "KRPC¶", "headings": [], "anchors": ["module-KRPC", "krpc", "KRPC.get_client_id", "KRPC.get_client_name", "KRPC.clients", "KRPC.get_status", "KRPC.get_services", "KRPC.current_game_scene", "KRPC.paused", "KRPC.GameScene", "KRPC.GameScene.space_center", "KRPC.GameScene.flight", "KRPC.GameScene.tracking_station", "KRPC.GameScene.editor_vab", "KRPC.GameScene.editor_sph", "KRPC.InvalidOperationException", "KRPC.ArgumentException", "KRPC.ArgumentNullException", "KRPC.ArgumentOutOfRangeException"], "content_text": "KRPC\n¶\nMain kRPC service, used by clients to interact with basic server functionality.\nstatic\nget_client_id\n(\n)\n¶\nReturns the identifier for the current client.\nReturn type\n:\nbytes\nstatic\nget_client_name\n(\n)\n¶\nReturns the name of the current client.\nThis is an empty string if the client has no name.\nReturn type\n:\nstr\nclients\n¶\nA list of RPC clients that are currently connected to the server.\nEach entry in the list is a clients identifier, name and address.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(tuple(bytes, str, str))\nstatic\nget_status\n(\n)\n¶\nReturns some information about the server, such as the version.\nReturn type\n:\nkrpc.schema.KRPC.Status\nstatic\nget_services\n(\n)\n¶\nReturns information on all services, procedures, classes, properties etc. provided by the server.\nCan be used by client libraries to automatically create functionality such as stubs.\nReturn type\n:\nkrpc.schema.KRPC.Services\ncurrent_game_scene\n¶\nGet the current game scene.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nGameScene\npaused\n¶\nWhether the game is paused.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nclass\nGameScene\n¶\nThe game scene. See\ncurrent_game_scene\n.\nspace_center\n¶\nThe game scene showing the Kerbal Space Center buildings.\nflight\n¶\nThe game scene showing a vessel in flight (or on the launchpad/runway).\ntracking_station\n¶\nThe tracking station.\neditor_vab\n¶\nThe Vehicle Assembly Building.\neditor_sph\n¶\nThe Space Plane Hangar.\nclass\nInvalidOperationException\n¶\nA method call was made to a method that is invalid\ngiven the current state of the object.\nclass\nArgumentException\n¶\nA method was invoked where at least one of the passed arguments does not\nmeet the parameter specification of the method.\nclass\nArgumentNullException\n¶\nA null reference was passed to a method that does not accept it as a valid argument.\nclass\nArgumentOutOfRangeException\n¶\nThe value of an argument is outside the allowable range of values as defined by the invoked method."}
{"url": "https://krpc.github.io/krpc/python/api/krpc/expressions.html", "title": "Expressions¶", "headings": [], "anchors": ["expressions", "KRPC.Expression", "KRPC.Expression.constant_double", "KRPC.Expression.constant_float", "KRPC.Expression.constant_int", "KRPC.Expression.constant_bool", "KRPC.Expression.constant_string", "KRPC.Expression.call", "KRPC.Expression.equal", "KRPC.Expression.not_equal", "KRPC.Expression.greater_than", "KRPC.Expression.greater_than_or_equal", "KRPC.Expression.less_than", "KRPC.Expression.less_than_or_equal", "KRPC.Expression.and_", "KRPC.Expression.or_", "KRPC.Expression.exclusive_or", "KRPC.Expression.not_", "KRPC.Expression.add", "KRPC.Expression.subtract", "KRPC.Expression.multiply", "KRPC.Expression.divide", "KRPC.Expression.modulo", "KRPC.Expression.power", "KRPC.Expression.left_shift", "KRPC.Expression.right_shift", "KRPC.Expression.cast", "KRPC.Expression.parameter", "KRPC.Expression.function", "KRPC.Expression.invoke", "KRPC.Expression.create_tuple", "KRPC.Expression.create_list", "KRPC.Expression.create_set", "KRPC.Expression.create_dictionary", "KRPC.Expression.to_list", "KRPC.Expression.to_set", "KRPC.Expression.get", "KRPC.Expression.count", "KRPC.Expression.sum", "KRPC.Expression.max", "KRPC.Expression.min", "KRPC.Expression.average", "KRPC.Expression.select", "KRPC.Expression.where", "KRPC.Expression.contains", "KRPC.Expression.aggregate", "KRPC.Expression.aggregate_with_seed", "KRPC.Expression.concat", "KRPC.Expression.order_by", "KRPC.Expression.all", "KRPC.Expression.any", "KRPC.Type", "KRPC.Type.double", "KRPC.Type.float", "KRPC.Type.int", "KRPC.Type.bool", "KRPC.Type.string"], "content_text": "Expressions\n¶\nclass\nExpression\n¶\nA server side expression.\nstatic\nconstant_double\n(\nvalue\n)\n¶\nA constant value of double precision floating point type.\nParameters\n:\nvalue\n(\nfloat\n) –\nReturn type\n:\nExpression\nstatic\nconstant_float\n(\nvalue\n)\n¶\nA constant value of single precision floating point type.\nParameters\n:\nvalue\n(\nfloat\n) –\nReturn type\n:\nExpression\nstatic\nconstant_int\n(\nvalue\n)\n¶\nA constant value of integer type.\nParameters\n:\nvalue\n(\nint\n) –\nReturn type\n:\nExpression\nstatic\nconstant_bool\n(\nvalue\n)\n¶\nA constant value of boolean type.\nParameters\n:\nvalue\n(\nbool\n) –\nReturn type\n:\nExpression\nstatic\nconstant_string\n(\nvalue\n)\n¶\nA constant value of string type.\nParameters\n:\nvalue\n(\nstr\n) –\nReturn type\n:\nExpression\nstatic\ncall\n(\ncall\n)\n¶\nAn RPC call.\nParameters\n:\ncall\n(\nkrpc.schema.KRPC.ProcedureCall\n) –\nReturn type\n:\nExpression\nstatic\nequal\n(\narg0\n,\narg1\n)\n¶\nEquality comparison.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nnot_equal\n(\narg0\n,\narg1\n)\n¶\nInequality comparison.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\ngreater_than\n(\narg0\n,\narg1\n)\n¶\nGreater than numerical comparison.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\ngreater_than_or_equal\n(\narg0\n,\narg1\n)\n¶\nGreater than or equal numerical comparison.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nless_than\n(\narg0\n,\narg1\n)\n¶\nLess than numerical comparison.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nless_than_or_equal\n(\narg0\n,\narg1\n)\n¶\nLess than or equal numerical comparison.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nand_\n(\narg0\n,\narg1\n)\n¶\nBoolean and operator.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nor_\n(\narg0\n,\narg1\n)\n¶\nBoolean or operator.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nexclusive_or\n(\narg0\n,\narg1\n)\n¶\nBoolean exclusive-or operator.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nnot_\n(\narg\n)\n¶\nBoolean negation operator.\nParameters\n:\narg\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nadd\n(\narg0\n,\narg1\n)\n¶\nNumerical addition.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nsubtract\n(\narg0\n,\narg1\n)\n¶\nNumerical subtraction.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nmultiply\n(\narg0\n,\narg1\n)\n¶\nNumerical multiplication.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\ndivide\n(\narg0\n,\narg1\n)\n¶\nNumerical division.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nmodulo\n(\narg0\n,\narg1\n)\n¶\nNumerical modulo operator.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturns\n:\nThe remainder of arg0 divided by arg1\nReturn type\n:\nExpression\nstatic\npower\n(\narg0\n,\narg1\n)\n¶\nNumerical power operator.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturns\n:\narg0 raised to the power of arg1, with type of arg0\nReturn type\n:\nExpression\nstatic\nleft_shift\n(\narg0\n,\narg1\n)\n¶\nBitwise left shift.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\nright_shift\n(\narg0\n,\narg1\n)\n¶\nBitwise right shift.\nParameters\n:\narg0\n(\nExpression\n) –\narg1\n(\nExpression\n) –\nReturn type\n:\nExpression\nstatic\ncast\n(\narg\n,\ntype\n)\n¶\nPerform a cast to the given type.\nParameters\n:\narg\n(\nExpression\n) –\ntype\n(\nType\n) – Type to cast the argument to.\nReturn type\n:\nExpression\nstatic\nparameter\n(\nname\n,\ntype\n)\n¶\nA named parameter of type double.\nParameters\n:\nname\n(\nstr\n) – The name of the parameter.\ntype\n(\nType\n) – The type of the parameter.\nReturns\n:\nA named parameter.\nReturn type\n:\nExpression\nstatic\nfunction\n(\nparameters\n,\nbody\n)\n¶\nA function.\nParameters\n:\nparameters\n(\nlist\n) – The parameters of the function.\nbody\n(\nExpression\n) – The body of the function.\nReturns\n:\nA function.\nReturn type\n:\nExpression\nstatic\ninvoke\n(\nfunction\n,\nargs\n)\n¶\nA function call.\nParameters\n:\nfunction\n(\nExpression\n) – The function to call.\nargs\n(\ndict\n) – The arguments to call the function with.\nReturns\n:\nA function call.\nReturn type\n:\nExpression\nstatic\ncreate_tuple\n(\nelements\n)\n¶\nConstruct a tuple.\nParameters\n:\nelements\n(\nlist\n) – The elements.\nReturns\n:\nThe tuple.\nReturn type\n:\nExpression\nstatic\ncreate_list\n(\nvalues\n)\n¶\nConstruct a list.\nParameters\n:\nvalues\n(\nlist\n) – The value. Should all be of the same type.\nReturns\n:\nThe list.\nReturn type\n:\nExpression\nstatic\ncreate_set\n(\nvalues\n)\n¶\nConstruct a set.\nParameters\n:\nvalues\n(\nset\n) – The values. Should all be of the same type.\nReturns\n:\nThe set.\nReturn type\n:\nExpression\nstatic\ncreate_dictionary\n(\nkeys\n,\nvalues\n)\n¶\nConstruct a dictionary, from a list of corresponding keys and values.\nParameters\n:\nkeys\n(\nlist\n) – The keys. Should all be of the same type.\nvalues\n(\nlist\n) – The values. Should all be of the same type.\nReturns\n:\nThe dictionary.\nReturn type\n:\nExpression\nstatic\nto_list\n(\narg\n)\n¶\nConvert a collection to a list.\nParameters\n:\narg\n(\nExpression\n) – The collection.\nReturns\n:\nThe collection as a list.\nReturn type\n:\nExpression\nstatic\nto_set\n(\narg\n)\n¶\nConvert a collection to a set.\nParameters\n:\narg\n(\nExpression\n) – The collection.\nReturns\n:\nThe collection as a set.\nReturn type\n:\nExpression\nstatic\nget\n(\narg\n,\nindex\n)\n¶\nAccess an element in a tuple, list or dictionary.\nParameters\n:\narg\n(\nExpression\n) – The tuple, list or dictionary.\nindex\n(\nExpression\n) – The index of the element to access. A zero indexed integer for a tuple or list, or a key for a dictionary.\nReturns\n:\nThe element.\nReturn type\n:\nExpression\nstatic\ncount\n(\narg\n)\n¶\nNumber of elements in a collection.\nParameters\n:\narg\n(\nExpression\n) – The list, set or dictionary.\nReturns\n:\nThe number of elements in the collection.\nReturn type\n:\nExpression\nstatic\nsum\n(\narg\n)\n¶\nSum all elements of a collection.\nParameters\n:\narg\n(\nExpression\n) – The list or set.\nReturns\n:\nThe sum of the elements in the collection.\nReturn type\n:\nExpression\nstatic\nmax\n(\narg\n)\n¶\nMaximum of all elements in a collection.\nParameters\n:\narg\n(\nExpression\n) – The list or set.\nReturns\n:\nThe maximum elements in the collection.\nReturn type\n:\nExpression\nstatic\nmin\n(\narg\n)\n¶\nMinimum of all elements in a collection.\nParameters\n:\narg\n(\nExpression\n) – The list or set.\nReturns\n:\nThe minimum elements in the collection.\nReturn type\n:\nExpression\nstatic\naverage\n(\narg\n)\n¶\nMinimum of all elements in a collection.\nParameters\n:\narg\n(\nExpression\n) – The list or set.\nReturns\n:\nThe minimum elements in the collection.\nReturn type\n:\nExpression\nstatic\nselect\n(\narg\n,\nfunc\n)\n¶\nRun a function on every element in the collection.\nParameters\n:\narg\n(\nExpression\n) – The list or set.\nfunc\n(\nExpression\n) – The function.\nReturns\n:\nThe modified collection.\nReturn type\n:\nExpression\nstatic\nwhere\n(\narg\n,\nfunc\n)\n¶\nRun a function on every element in the collection.\nParameters\n:\narg\n(\nExpression\n) – The list or set.\nfunc\n(\nExpression\n) – The function.\nReturns\n:\nThe modified collection.\nReturn type\n:\nExpression\nstatic\ncontains\n(\narg\n,\nvalue\n)\n¶\nDetermine if a collection contains a value.\nParameters\n:\narg\n(\nExpression\n) – The collection.\nvalue\n(\nExpression\n) – The value to look for.\nReturns\n:\nWhether the collection contains a value.\nReturn type\n:\nExpression\nstatic\naggregate\n(\narg\n,\nfunc\n)\n¶\nApplies an accumulator function over a sequence.\nParameters\n:\narg\n(\nExpression\n) – The collection.\nfunc\n(\nExpression\n) – The accumulator function.\nReturns\n:\nThe accumulated value.\nReturn type\n:\nExpression\nstatic\naggregate_with_seed\n(\narg\n,\nseed\n,\nfunc\n)\n¶\nApplies an accumulator function over a sequence, with a given seed.\nParameters\n:\narg\n(\nExpression\n) – The collection.\nseed\n(\nExpression\n) – The seed value.\nfunc\n(\nExpression\n) – The accumulator function.\nReturns\n:\nThe accumulated value.\nReturn type\n:\nExpression\nstatic\nconcat\n(\narg1\n,\narg2\n)\n¶\nConcatenate two sequences.\nParameters\n:\narg1\n(\nExpression\n) – The first sequence.\narg2\n(\nExpression\n) – The second sequence.\nReturns\n:\nThe first sequence followed by the second sequence.\nReturn type\n:\nExpression\nstatic\norder_by\n(\narg\n,\nkey\n)\n¶\nOrder a collection using a key function.\nParameters\n:\narg\n(\nExpression\n) – The collection to order.\nkey\n(\nExpression\n) – A function that takes a value from the collection and generates a key to sort on.\nReturns\n:\nThe ordered collection.\nReturn type\n:\nExpression\nstatic\nall\n(\narg\n,\npredicate\n)\n¶\nDetermine whether all items in a collection satisfy a boolean predicate.\nParameters\n:\narg\n(\nExpression\n) – The collection.\npredicate\n(\nExpression\n) – The predicate function.\nReturns\n:\nWhether all items satisfy the predicate.\nReturn type\n:\nExpression\nstatic\nany\n(\narg\n,\npredicate\n)\n¶\nDetermine whether any item in a collection satisfies a boolean predicate.\nParameters\n:\narg\n(\nExpression\n) – The collection.\npredicate\n(\nExpression\n) – The predicate function.\nReturns\n:\nWhether any item satisfies the predicate.\nReturn type\n:\nExpression\nclass\nType\n¶\nA server side expression.\nstatic\ndouble\n(\n)\n¶\nDouble type.\nReturn type\n:\nType\nstatic\nfloat\n(\n)\n¶\nFloat type.\nReturn type\n:\nType\nstatic\nint\n(\n)\n¶\nInt type.\nReturn type\n:\nType\nstatic\nbool\n(\n)\n¶\nBool type.\nReturn type\n:\nType\nstatic\nstring\n(\n)\n¶\nString type.\nReturn type\n:\nType"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/space-center.html", "title": "SpaceCenter¶", "headings": [], "anchors": ["module-SpaceCenter", "spacecenter", "SpaceCenter.science", "SpaceCenter.funds", "SpaceCenter.reputation", "SpaceCenter.active_vessel", "SpaceCenter.vessels", "SpaceCenter.launch_sites", "SpaceCenter.bodies", "SpaceCenter.target_body", "SpaceCenter.target_vessel", "SpaceCenter.target_docking_port", "SpaceCenter.clear_target", "SpaceCenter.launchable_vessels", "SpaceCenter.launch_vessel", "SpaceCenter.launch_vessel_from_vab", "SpaceCenter.launch_vessel_from_sph", "SpaceCenter.save", "SpaceCenter.load", "SpaceCenter.quicksave", "SpaceCenter.quickload", "SpaceCenter.can_revert_to_launch", "SpaceCenter.revert_to_launch", "SpaceCenter.transfer_crew", "SpaceCenter.ui_visible", "SpaceCenter.navball", "SpaceCenter.ut", "SpaceCenter.g", "SpaceCenter.warp_rate", "SpaceCenter.warp_factor", "SpaceCenter.rails_warp_factor", "SpaceCenter.physics_warp_factor", "SpaceCenter.can_rails_warp_at", "SpaceCenter.maximum_rails_warp_factor", "SpaceCenter.warp_to", "SpaceCenter.transform_position", "SpaceCenter.transform_direction", "SpaceCenter.transform_rotation", "SpaceCenter.transform_velocity", "SpaceCenter.raycast_distance", "SpaceCenter.raycast_part", "SpaceCenter.far_available", "SpaceCenter.create_kerbal", "SpaceCenter.get_kerbal", "SpaceCenter.load_space_center", "SpaceCenter.map_filter", "SpaceCenter.screenshot", "SpaceCenter.game_mode", "SpaceCenter.warp_mode", "SpaceCenter.camera", "SpaceCenter.waypoint_manager", "SpaceCenter.contract_manager", "SpaceCenter.alarm_manager", "SpaceCenter.GameMode", "SpaceCenter.GameMode.sandbox", "SpaceCenter.GameMode.career", "SpaceCenter.GameMode.science", "SpaceCenter.GameMode.science_sandbox", "SpaceCenter.GameMode.mission", "SpaceCenter.GameMode.mission_builder", "SpaceCenter.GameMode.scenario", "SpaceCenter.GameMode.scenario_non_resumable", "SpaceCenter.WarpMode", "SpaceCenter.WarpMode.rails", "SpaceCenter.WarpMode.physics", "SpaceCenter.WarpMode.none", "SpaceCenter.MapFilterType", "SpaceCenter.MapFilterType.all", "SpaceCenter.MapFilterType.none", "SpaceCenter.MapFilterType.debris", "SpaceCenter.MapFilterType.unknown", "SpaceCenter.MapFilterType.space_objects", "SpaceCenter.MapFilterType.probes", "SpaceCenter.MapFilterType.rovers", "SpaceCenter.MapFilterType.landers", "SpaceCenter.MapFilterType.ships", "SpaceCenter.MapFilterType.stations", "SpaceCenter.MapFilterType.bases", "SpaceCenter.MapFilterType.ev_as", "SpaceCenter.MapFilterType.flags", "SpaceCenter.MapFilterType.plane", "SpaceCenter.MapFilterType.relay", "SpaceCenter.MapFilterType.site", "SpaceCenter.MapFilterType.deployed_science_controller", "SpaceCenter.LaunchSite", "SpaceCenter.LaunchSite.name", "SpaceCenter.LaunchSite.body", "SpaceCenter.LaunchSite.editor_facility", "SpaceCenter.EditorFacility", "SpaceCenter.EditorFacility.vab", "SpaceCenter.EditorFacility.sph", "SpaceCenter.EditorFacility.none"], "content_text": "SpaceCenter\n¶\nProvides functionality to interact with Kerbal Space Program. This includes controlling\nthe active vessel, managing its resources, planning maneuver nodes and auto-piloting.\nscience\n¶\nThe current amount of science.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nfunds\n¶\nThe current amount of funds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nreputation\n¶\nThe current amount of reputation.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nactive_vessel\n¶\nThe currently active vessel.\nAttribute\n:\nCan be read or written\nReturn type\n:\nVessel\nvessels\n¶\nA list of all the vessels in the game.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nVessel\n)\nlaunch_sites\n¶\nA list of available launch sites.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nLaunchSite\n)\nbodies\n¶\nA dictionary of all celestial bodies (planets, moons, etc.) in the game,\nkeyed by the name of the body.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ndict(str,\nCelestialBody\n)\ntarget_body\n¶\nThe currently targeted celestial body.\nAttribute\n:\nCan be read or written\nReturn type\n:\nCelestialBody\nGame Scenes\n:\nFlight\ntarget_vessel\n¶\nThe currently targeted vessel.\nAttribute\n:\nCan be read or written\nReturn type\n:\nVessel\nGame Scenes\n:\nFlight\ntarget_docking_port\n¶\nThe currently targeted docking port.\nAttribute\n:\nCan be read or written\nReturn type\n:\nDockingPort\nGame Scenes\n:\nFlight\nstatic\nclear_target\n(\n)\n¶\nClears the current target.\nGame Scenes\n:\nFlight\nstatic\nlaunchable_vessels\n(\ncraft_directory\n)\n¶\nReturns a list of vessels from the given\ncraft_directory\nthat can be launched.\nParameters\n:\ncraft_directory\n(\nstr\n) – Name of the directory in the current saves “Ships” directory. For example\n\"VAB\"\nor\n\"SPH\"\n.\nReturn type\n:\nlist(str)\nstatic\nlaunch_vessel\n(\ncraft_directory\n,\nname\n,\nlaunch_site\n[\n,\nrecover\n=\nTrue\n]\n[\n,\ncrew\n=\nNone\n]\n[\n,\nflag_url\n=\n''\n]\n)\n¶\nLaunch a vessel.\nParameters\n:\ncraft_directory\n(\nstr\n) – Name of the directory in the current saves “Ships” directory, that contains the craft file. For example\n\"VAB\"\nor\n\"SPH\"\n.\nname\n(\nstr\n) – Name of the vessel to launch. This is the name of the “.craft” file in the save directory, without the “.craft” file extension.\nlaunch_site\n(\nstr\n) – Name of the launch site. For example\n\"LaunchPad\"\nor\n\"Runway\"\n.\nrecover\n(\nbool\n) – If true and there is a vessel on the launch site, recover it before launching.\ncrew\n(\nlist\n) – If not\nNone\n, a list of names of Kerbals to place in the craft. Otherwise the crew will use default assignments.\nflag_url\n(\nstr\n) – If not\nNone\n, the asset URL of the mission flag to use for the launch.\nNote\nThrows an exception if any of the games pre-flight checks fail.\nstatic\nlaunch_vessel_from_vab\n(\nname\n[\n,\nrecover\n=\nTrue\n]\n)\n¶\nLaunch a new vessel from the VAB onto the launchpad.\nParameters\n:\nname\n(\nstr\n) – Name of the vessel to launch.\nrecover\n(\nbool\n) – If true and there is a vessel on the launch pad, recover it before launching.\nNote\nThis is equivalent to calling\nlaunch_vessel()\nwith the craft directory\nset to “VAB” and the launch site set to “LaunchPad”.\nThrows an exception if any of the games pre-flight checks fail.\nstatic\nlaunch_vessel_from_sph\n(\nname\n[\n,\nrecover\n=\nTrue\n]\n)\n¶\nLaunch a new vessel from the SPH onto the runway.\nParameters\n:\nname\n(\nstr\n) – Name of the vessel to launch.\nrecover\n(\nbool\n) – If true and there is a vessel on the runway, recover it before launching.\nNote\nThis is equivalent to calling\nlaunch_vessel()\nwith the craft directory\nset to “SPH” and the launch site set to “Runway”.\nThrows an exception if any of the games pre-flight checks fail.\nstatic\nsave\n(\nname\n)\n¶\nSave the game with a given name.\nThis will create a save file called\nname.sfs\nin the folder of the\ncurrent save game.\nParameters\n:\nname\n(\nstr\n) – Name of the save.\nstatic\nload\n(\nname\n)\n¶\nLoad the game with the given name.\nThis will create a load a save file called\nname.sfs\nfrom the folder of the\ncurrent save game.\nParameters\n:\nname\n(\nstr\n) – Name of the save.\nstatic\nquicksave\n(\n)\n¶\nSave a quicksave.\nNote\nThis is the same as calling\nsave()\nwith the name “quicksave”.\nstatic\nquickload\n(\n)\n¶\nLoad a quicksave.\nNote\nThis is the same as calling\nload()\nwith the name “quicksave”.\nstatic\ncan_revert_to_launch\n(\n)\n¶\nWhether the current flight can be reverted to launch.\nReturn type\n:\nbool\nstatic\nrevert_to_launch\n(\n)\n¶\nRevert the current flight to launch.\nstatic\ntransfer_crew\n(\ncrew_member\n,\ntarget_part\n)\n¶\nTransfers a crew member to a different part.\nParameters\n:\ncrew_member\n(\nCrewMember\n) – The crew member to transfer.\ntarget_part\n(\nPart\n) – The part to move them to.\nGame Scenes\n:\nFlight\nui_visible\n¶\nWhether the UI is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nnavball\n¶\nWhether the navball is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nut\n¶\nThe current universal time in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ng\n¶\nThe value of the\ngravitational constant\nG in\n\\(N(m/kg)^2\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nwarp_rate\n¶\nThe current warp rate. This is the rate at which time is passing for\neither on-rails or physical time warp. For example, a value of 10 means\ntime is passing 10x faster than normal. Returns 1 if time warp is not\nactive.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nwarp_factor\n¶\nThe current warp factor. This is the index of the rate at which time\nis passing for either regular “on-rails” or physical time warp. Returns 0\nif time warp is not active. When in on-rails time warp, this is equal to\nrails_warp_factor\n, and in physics time warp, this is equal to\nphysics_warp_factor\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nrails_warp_factor\n¶\nThe time warp rate, using regular “on-rails” time warp. A value between\n0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp\nis active.\nIf requested time warp factor cannot be set, it will be set to the next\nlowest possible value. For example, if the vessel is too close to a\nplanet. See\nthe KSP wiki\nfor details.\nAttribute\n:\nCan be read or written\nReturn type\n:\nint\nGame Scenes\n:\nFlight\nphysics_warp_factor\n¶\nThe physical time warp rate. A value between 0 and 3 inclusive. 0 means\nno time warp. Returns 0 if regular “on-rails” time warp is active.\nAttribute\n:\nCan be read or written\nReturn type\n:\nint\nGame Scenes\n:\nFlight\nstatic\ncan_rails_warp_at\n(\n[\nfactor\n=\n1\n]\n)\n¶\nReturns\nTrue\nif regular “on-rails” time warp can be used, at the specified warp\nfactor\n. The maximum time warp rate is limited by various things,\nincluding how close the active vessel is to a planet. See\nthe KSP wiki\nfor details.\nParameters\n:\nfactor\n(\nint\n) – The warp factor to check.\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nmaximum_rails_warp_factor\n¶\nThe current maximum regular “on-rails” warp factor that can be set.\nA value between 0 and 7 inclusive. See\nthe KSP wiki\nfor details.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\nGame Scenes\n:\nFlight\nstatic\nwarp_to\n(\nut\n[\n,\nmax_rails_rate\n=\n100000.0\n]\n[\n,\nmax_physics_rate\n=\n2.0\n]\n)\n¶\nUses time acceleration to warp forward to a time in the future, specified\nby universal time\nut\n. This call blocks until the desired\ntime is reached. Uses regular “on-rails” or physical time warp as appropriate.\nFor example, physical time warp is used when the active vessel is traveling\nthrough an atmosphere. When using regular “on-rails” time warp, the warp\nrate is limited by\nmax_rails_rate\n, and when using physical\ntime warp, the warp rate is limited by\nmax_physics_rate\n.\nParameters\n:\nut\n(\nfloat\n) – The universal time to warp to, in seconds.\nmax_rails_rate\n(\nfloat\n) – The maximum warp rate in regular “on-rails” time warp.\nmax_physics_rate\n(\nfloat\n) – The maximum warp rate in physical time warp.\nReturns\n:\nWhen the time warp is complete.\nGame Scenes\n:\nFlight\nstatic\ntransform_position\n(\nposition\n,\nfrom\n,\nto\n)\n¶\nConverts a position from one reference frame to another.\nParameters\n:\nposition\n(\ntuple\n) – Position, as a vector, in reference frame\nfrom\n.\nfrom\n(\nReferenceFrame\n) – The reference frame that the position is in.\nto\n(\nReferenceFrame\n) – The reference frame to covert the position to.\nReturns\n:\nThe corresponding position, as a vector, in reference frame\nto\n.\nReturn type\n:\ntuple(float, float, float)\nstatic\ntransform_direction\n(\ndirection\n,\nfrom\n,\nto\n)\n¶\nConverts a direction from one reference frame to another.\nParameters\n:\ndirection\n(\ntuple\n) – Direction, as a vector, in reference frame\nfrom\n.\nfrom\n(\nReferenceFrame\n) – The reference frame that the direction is in.\nto\n(\nReferenceFrame\n) – The reference frame to covert the direction to.\nReturns\n:\nThe corresponding direction, as a vector, in reference frame\nto\n.\nReturn type\n:\ntuple(float, float, float)\nstatic\ntransform_rotation\n(\nrotation\n,\nfrom\n,\nto\n)\n¶\nConverts a rotation from one reference frame to another.\nParameters\n:\nrotation\n(\ntuple\n) – Rotation, as a quaternion of the form\n\\((x, y, z, w)\\)\n, in reference frame\nfrom\n.\nfrom\n(\nReferenceFrame\n) – The reference frame that the rotation is in.\nto\n(\nReferenceFrame\n) – The reference frame to covert the rotation to.\nReturns\n:\nThe corresponding rotation, as a quaternion of the form\n\\((x, y, z, w)\\)\n, in reference frame\nto\n.\nReturn type\n:\ntuple(float, float, float, float)\nstatic\ntransform_velocity\n(\nposition\n,\nvelocity\n,\nfrom\n,\nto\n)\n¶\nConverts a velocity (acting at the specified position) from one reference frame\nto another. The position is required to take the relative angular velocity of the\nreference frames into account.\nParameters\n:\nposition\n(\ntuple\n) – Position, as a vector, in reference frame\nfrom\n.\nvelocity\n(\ntuple\n) – Velocity, as a vector that points in the direction of travel and whose magnitude is the speed in meters per second, in reference frame\nfrom\n.\nfrom\n(\nReferenceFrame\n) – The reference frame that the position and velocity are in.\nto\n(\nReferenceFrame\n) – The reference frame to covert the velocity to.\nReturns\n:\nThe corresponding velocity, as a vector, in reference frame\nto\n.\nReturn type\n:\ntuple(float, float, float)\nstatic\nraycast_distance\n(\nposition\n,\ndirection\n,\nreference_frame\n)\n¶\nCast a ray from a given position in a given direction, and return the distance to the hit point.\nIf no hit occurs, returns infinity.\nParameters\n:\nposition\n(\ntuple\n) – Position, as a vector, of the origin of the ray.\ndirection\n(\ntuple\n) – Direction of the ray, as a unit vector.\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the position and direction are in.\nReturns\n:\nThe distance to the hit, in meters, or infinity if there was no hit.\nReturn type\n:\nfloat\nstatic\nraycast_part\n(\nposition\n,\ndirection\n,\nreference_frame\n)\n¶\nCast a ray from a given position in a given direction, and return the part that it hits.\nIf no hit occurs, returns\nNone\n.\nParameters\n:\nposition\n(\ntuple\n) – Position, as a vector, of the origin of the ray.\ndirection\n(\ntuple\n) – Direction of the ray, as a unit vector.\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the position and direction are in.\nReturns\n:\nThe part that was hit or\nNone\nif there was no hit.\nReturn type\n:\nPart\nGame Scenes\n:\nFlight\nfar_available\n¶\nWhether\nFerram Aerospace Research\nis installed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nstatic\ncreate_kerbal\n(\nname\n,\njob\n,\nmale\n)\n¶\nCreates a Kerbal.\nParameters\n:\nname\n(\nstr\n) –\njob\n(\nstr\n) –\nmale\n(\nbool\n) –\nstatic\nget_kerbal\n(\nname\n)\n¶\nFind a Kerbal by name.\nParameters\n:\nname\n(\nstr\n) –\nReturn type\n:\nCrewMember\nstatic\nload_space_center\n(\n)\n¶\nSwitch to the space center view.\nmap_filter\n¶\nThe visible objects in map mode.\nAttribute\n:\nCan be read or written\nReturn type\n:\nMapFilterType\nstatic\nscreenshot\n(\nfile_path\n[\n,\nscale\n=\n1\n]\n)\n¶\nSaves a screenshot.\nParameters\n:\nfile_path\n(\nstr\n) – The path of the file to save.\nscale\n(\nint\n) – Resolution scaling factor\nGame Scenes\n:\nFlight\ngame_mode\n¶\nThe current mode the game is in.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nGameMode\nwarp_mode\n¶\nThe current time warp mode. Returns\nWarpMode.none\nif time\nwarp is not active,\nWarpMode.rails\nif regular “on-rails” time warp\nis active, or\nWarpMode.physics\nif physical time warp is active.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nWarpMode\nGame Scenes\n:\nFlight\ncamera\n¶\nAn object that can be used to control the camera.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCamera\nGame Scenes\n:\nFlight\nwaypoint_manager\n¶\nThe waypoint manager.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nWaypointManager\nGame Scenes\n:\nFlight\ncontract_manager\n¶\nThe contract manager.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nContractManager\nalarm_manager\n¶\nThe alarm manager.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nAlarmManager\nclass\nGameMode\n¶\nThe game mode.\nReturned by\nGameMode\nsandbox\n¶\nSandbox mode.\ncareer\n¶\nCareer mode.\nscience\n¶\nScience career mode.\nscience_sandbox\n¶\nScience sandbox mode.\nmission\n¶\nMission mode.\nmission_builder\n¶\nMission builder mode.\nscenario\n¶\nScenario mode.\nscenario_non_resumable\n¶\nScenario mode that cannot be resumed.\nclass\nWarpMode\n¶\nThe time warp mode.\nReturned by\nWarpMode\nrails\n¶\nTime warp is active, and in regular “on-rails” mode.\nphysics\n¶\nTime warp is active, and in physical time warp mode.\nnone\n¶\nTime warp is not active.\nclass\nMapFilterType\n¶\nThe set of things that are visible in map mode.\nThese may be combined with bitwise logic.\nall\n¶\nEverything.\nnone\n¶\nNothing.\ndebris\n¶\nDebris.\nunknown\n¶\nUnknown.\nspace_objects\n¶\nSpaceObjects.\nprobes\n¶\nProbes.\nrovers\n¶\nRovers.\nlanders\n¶\nLanders.\nships\n¶\nShips.\nstations\n¶\nStations.\nbases\n¶\nBases.\nev_as\n¶\nEVAs.\nflags\n¶\nFlags.\nplane\n¶\nPlanes.\nrelay\n¶\nRelays.\nsite\n¶\nLaunch Sites.\ndeployed_science_controller\n¶\nDeployed Science Controllers.\nclass\nLaunchSite\n¶\nA place where craft can be launched from.\nMore of these can be added with mods like Kerbal Konstructs.\nname\n¶\nThe name of the launch site.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nbody\n¶\nThe celestial body the launch site is on.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCelestialBody\neditor_facility\n¶\nWhich editor is normally used for this launch site.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nEditorFacility\nclass\nEditorFacility\n¶\nEditor facility.\nSee\nLaunchSite.editor_facility\n.\nvab\n¶\nVehicle Assembly Building.\nsph\n¶\nSpace Plane Hanger.\nnone\n¶\nNone."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/vessel.html", "title": "Vessel¶", "headings": [], "anchors": ["vessel", "SpaceCenter.Vessel", "SpaceCenter.Vessel.name", "SpaceCenter.Vessel.type", "SpaceCenter.Vessel.situation", "SpaceCenter.Vessel.recoverable", "SpaceCenter.Vessel.recover", "SpaceCenter.Vessel.met", "SpaceCenter.Vessel.biome", "SpaceCenter.Vessel.flight", "SpaceCenter.Vessel.orbit", "SpaceCenter.Vessel.control", "SpaceCenter.Vessel.comms", "SpaceCenter.Vessel.auto_pilot", "SpaceCenter.Vessel.crew_capacity", "SpaceCenter.Vessel.crew_count", "SpaceCenter.Vessel.crew", "SpaceCenter.Vessel.resources", "SpaceCenter.Vessel.resources_in_decouple_stage", "SpaceCenter.Vessel.parts", "SpaceCenter.Vessel.mass", "SpaceCenter.Vessel.dry_mass", "SpaceCenter.Vessel.thrust", "SpaceCenter.Vessel.available_thrust", "SpaceCenter.Vessel.available_thrust_at", "SpaceCenter.Vessel.max_thrust", "SpaceCenter.Vessel.max_thrust_at", "SpaceCenter.Vessel.max_vacuum_thrust", "SpaceCenter.Vessel.specific_impulse", "SpaceCenter.Vessel.specific_impulse_at", "SpaceCenter.Vessel.vacuum_specific_impulse", "SpaceCenter.Vessel.kerbin_sea_level_specific_impulse", "SpaceCenter.Vessel.moment_of_inertia", "SpaceCenter.Vessel.inertia_tensor", "SpaceCenter.Vessel.available_torque", "SpaceCenter.Vessel.available_reaction_wheel_torque", "SpaceCenter.Vessel.available_rcs_torque", "SpaceCenter.Vessel.available_rcs_force", "SpaceCenter.Vessel.available_engine_torque", "SpaceCenter.Vessel.available_control_surface_torque", "SpaceCenter.Vessel.available_other_torque", "SpaceCenter.Vessel.reference_frame", "id6", "id7", "SpaceCenter.Vessel.orbital_reference_frame", "id8", "SpaceCenter.Vessel.surface_reference_frame", "id9", "SpaceCenter.Vessel.surface_velocity_reference_frame", "id10", "SpaceCenter.Vessel.position", "SpaceCenter.Vessel.bounding_box", "SpaceCenter.Vessel.velocity", "SpaceCenter.Vessel.rotation", "SpaceCenter.Vessel.direction", "SpaceCenter.Vessel.angular_velocity", "SpaceCenter.VesselType", "SpaceCenter.VesselType.base", "SpaceCenter.VesselType.debris", "SpaceCenter.VesselType.lander", "SpaceCenter.VesselType.plane", "SpaceCenter.VesselType.probe", "SpaceCenter.VesselType.relay", "SpaceCenter.VesselType.rover", "SpaceCenter.VesselType.ship", "SpaceCenter.VesselType.station", "SpaceCenter.VesselType.space_object", "SpaceCenter.VesselType.unknown", "SpaceCenter.VesselType.eva", "SpaceCenter.VesselType.flag", "SpaceCenter.VesselType.deployed_science_controller", "SpaceCenter.VesselType.deployed_science_part", "SpaceCenter.VesselType.dropped_part", "SpaceCenter.VesselType.deployed_ground_part", "SpaceCenter.VesselSituation", "SpaceCenter.VesselSituation.docked", "SpaceCenter.VesselSituation.escaping", "SpaceCenter.VesselSituation.flying", "SpaceCenter.VesselSituation.landed", "SpaceCenter.VesselSituation.orbiting", "SpaceCenter.VesselSituation.pre_launch", "SpaceCenter.VesselSituation.splashed", "SpaceCenter.VesselSituation.sub_orbital", "SpaceCenter.CrewMember", "SpaceCenter.CrewMember.name", "SpaceCenter.CrewMember.type", "SpaceCenter.CrewMember.on_mission", "SpaceCenter.CrewMember.courage", "SpaceCenter.CrewMember.stupidity", "SpaceCenter.CrewMember.experience", "SpaceCenter.CrewMember.badass", "SpaceCenter.CrewMember.veteran", "SpaceCenter.CrewMember.trait", "SpaceCenter.CrewMember.gender", "SpaceCenter.CrewMember.roster_status", "SpaceCenter.CrewMember.suit_type", "SpaceCenter.CrewMember.career_log_flights", "SpaceCenter.CrewMember.career_log_types", "SpaceCenter.CrewMember.career_log_targets", "SpaceCenter.CrewMemberType", "SpaceCenter.CrewMemberType.applicant", "SpaceCenter.CrewMemberType.crew", "SpaceCenter.CrewMemberType.tourist", "SpaceCenter.CrewMemberType.unowned", "SpaceCenter.CrewMemberGender", "SpaceCenter.CrewMemberGender.male", "SpaceCenter.CrewMemberGender.female", "SpaceCenter.RosterStatus", "SpaceCenter.RosterStatus.available", "SpaceCenter.RosterStatus.assigned", "SpaceCenter.RosterStatus.dead", "SpaceCenter.RosterStatus.missing", "SpaceCenter.SuitType", "SpaceCenter.SuitType.default", "SpaceCenter.SuitType.vintage", "SpaceCenter.SuitType.future", "SpaceCenter.SuitType.slim"], "content_text": "Vessel\n¶\nclass\nVessel\n¶\nThese objects are used to interact with vessels in KSP. This includes getting\norbital and flight data, manipulating control inputs and managing resources.\nCreated using\nactive_vessel\nor\nvessels\n.\nname\n¶\nThe name of the vessel.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\ntype\n¶\nThe type of the vessel.\nAttribute\n:\nCan be read or written\nReturn type\n:\nVesselType\nsituation\n¶\nThe situation the vessel is in.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nVesselSituation\nrecoverable\n¶\nWhether the vessel is recoverable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nrecover\n(\n)\n¶\nRecover the vessel.\nmet\n¶\nThe mission elapsed time in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nbiome\n¶\nThe name of the biome the vessel is currently in.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nflight\n(\n[\nreference_frame\n=\nNone\n]\n)\n¶\nReturns a\nFlight\nobject that can be used to get flight\ntelemetry for the vessel, in the specified reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – Reference frame. Defaults to the vessel’s surface reference frame (\nVessel.surface_reference_frame\n).\nReturn type\n:\nFlight\nGame Scenes\n:\nFlight\nNote\nWhen this is called with no arguments, the vessel’s surface reference\nframe is used. This reference frame moves with the vessel, therefore\nvelocities and speeds returned by the flight object will be zero. See\nthe\nreference frames tutorial\nfor examples of getting\nthe orbital and surface speeds of a\nvessel\n.\norbit\n¶\nThe current orbit of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nOrbit\ncontrol\n¶\nReturns a\nControl\nobject that can be used to manipulate\nthe vessel’s control inputs. For example, its pitch/yaw/roll controls,\nRCS and thrust.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nControl\nGame Scenes\n:\nFlight\ncomms\n¶\nReturns a\nComms\nobject that can be used to interact\nwith CommNet for this vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nComms\nGame Scenes\n:\nFlight\nauto_pilot\n¶\nAn\nAutoPilot\nobject, that can be used to perform\nsimple auto-piloting of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nAutoPilot\nGame Scenes\n:\nFlight\ncrew_capacity\n¶\nThe number of crew that can occupy the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\ncrew_count\n¶\nThe number of crew that are occupying the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\ncrew\n¶\nThe crew in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nCrewMember\n)\nresources\n¶\nA\nResources\nobject, that can used to get information\nabout resources stored in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nResources\nGame Scenes\n:\nFlight\nresources_in_decouple_stage\n(\nstage\n[\n,\ncumulative\n=\nTrue\n]\n)\n¶\nReturns a\nResources\nobject, that can used to get\ninformation about resources stored in a given\nstage\n.\nParameters\n:\nstage\n(\nint\n) – Get resources for parts that are decoupled in this stage.\ncumulative\n(\nbool\n) – When\nFalse\n, returns the resources for parts decoupled in just the given stage. When\nTrue\nreturns the resources decoupled in the given stage and all subsequent stages combined.\nReturn type\n:\nResources\nGame Scenes\n:\nFlight\nNote\nFor details on stage numbering, see the\ndiscussion on\nStaging\n.\nparts\n¶\nA\nParts\nobject, that can used to interact with the parts that make up this vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nParts\nGame Scenes\n:\nFlight\nmass\n¶\nThe total mass of the vessel, including resources, in kg.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ndry_mass\n¶\nThe total mass of the vessel, excluding resources, in kg.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nthrust\n¶\nThe total thrust currently being produced by the vessel’s engines, in\nNewtons. This is computed by summing\nEngine.thrust\nfor\nevery engine in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\navailable_thrust\n¶\nGets the total available thrust that can be produced by the vessel’s\nactive engines, in Newtons. This is computed by summing\nEngine.available_thrust\nfor every active engine in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\navailable_thrust_at\n(\npressure\n)\n¶\nGets the total available thrust that can be produced by the vessel’s\nactive engines, in Newtons. This is computed by summing\nEngine.available_thrust_at()\nfor every active engine in the vessel.\nTakes the given pressure into account.\nParameters\n:\npressure\n(\nfloat\n) – Atmospheric pressure in atmospheres\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax_thrust\n¶\nThe total maximum thrust that can be produced by the vessel’s active\nengines, in Newtons. This is computed by summing\nEngine.max_thrust\nfor every active engine.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax_thrust_at\n(\npressure\n)\n¶\nThe total maximum thrust that can be produced by the vessel’s active\nengines, in Newtons. This is computed by summing\nEngine.max_thrust_at()\nfor every active engine.\nTakes the given pressure into account.\nParameters\n:\npressure\n(\nfloat\n) – Atmospheric pressure in atmospheres\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax_vacuum_thrust\n¶\nThe total maximum thrust that can be produced by the vessel’s active\nengines when the vessel is in a vacuum, in Newtons. This is computed by\nsumming\nEngine.max_vacuum_thrust\nfor every active engine.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nspecific_impulse\n¶\nThe combined specific impulse of all active engines, in seconds. This is computed using the formula\ndescribed here\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nspecific_impulse_at\n(\npressure\n)\n¶\nThe combined specific impulse of all active engines, in seconds. This is computed using the formula\ndescribed here\n.\nTakes the given pressure into account.\nParameters\n:\npressure\n(\nfloat\n) – Atmospheric pressure in atmospheres\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nvacuum_specific_impulse\n¶\nThe combined vacuum specific impulse of all active engines, in seconds. This is computed using the formula\ndescribed here\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nkerbin_sea_level_specific_impulse\n¶\nThe combined specific impulse of all active engines at sea level on Kerbin, in seconds.\nThis is computed using the formula\ndescribed here\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmoment_of_inertia\n¶\nThe moment of inertia of the vessel around its center of mass in\n\\(kg.m^2\\)\n.\nThe inertia values in the returned 3-tuple are around the\npitch, roll and yaw directions respectively.\nThis corresponds to the vessels reference frame (\nReferenceFrame\n).\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\ninertia_tensor\n¶\nThe inertia tensor of the vessel around its center of mass,\nin the vessels reference frame (\nReferenceFrame\n).\nReturns the 3x3 matrix as a list of elements, in row-major order.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(float)\navailable_torque\n¶\nThe maximum torque that the vessel generates. Includes contributions from\nreaction wheels, RCS, gimballed engines and aerodynamic control surfaces.\nReturns the torques in\n\\(N.m\\)\naround each of the coordinate axes of the\nvessels reference frame (\nReferenceFrame\n).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\navailable_reaction_wheel_torque\n¶\nThe maximum torque that the currently active and powered reaction wheels can generate.\nReturns the torques in\n\\(N.m\\)\naround each of the coordinate axes of the\nvessels reference frame (\nReferenceFrame\n).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\navailable_rcs_torque\n¶\nThe maximum torque that the currently active RCS thrusters can generate.\nReturns the torques in\n\\(N.m\\)\naround each of the coordinate axes of the\nvessels reference frame (\nReferenceFrame\n).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\navailable_rcs_force\n¶\nThe maximum force that the currently active RCS thrusters can generate.\nReturns the forces in\n\\(N\\)\nalong each of the coordinate axes of the\nvessels reference frame (\nReferenceFrame\n).\nThese axes are equivalent to the right, forward and bottom directions of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\navailable_engine_torque\n¶\nThe maximum torque that the currently active and gimballed engines can generate.\nReturns the torques in\n\\(N.m\\)\naround each of the coordinate axes of the\nvessels reference frame (\nReferenceFrame\n).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\navailable_control_surface_torque\n¶\nThe maximum torque that the aerodynamic control surfaces can generate.\nReturns the torques in\n\\(N.m\\)\naround each of the coordinate axes of the\nvessels reference frame (\nReferenceFrame\n).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\navailable_other_torque\n¶\nThe maximum torque that parts (excluding reaction wheels, gimballed engines,\nRCS and control surfaces) can generate.\nReturns the torques in\n\\(N.m\\)\naround each of the coordinate axes of the\nvessels reference frame (\nReferenceFrame\n).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\nreference_frame\n¶\nThe reference frame that is fixed relative to the vessel,\nand orientated with the vessel.\nThe origin is at the center of mass of the vessel.\nThe axes rotate with the vessel.\nThe x-axis points out to the right of the vessel.\nThe y-axis points in the forward direction of the vessel.\nThe z-axis points out of the bottom off the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nGame Scenes\n:\nFlight\nVessel reference frame origin and axes for the Aeris 3A aircraft\n¶\nVessel reference frame origin and axes for the Kerbal-X rocket\n¶\norbital_reference_frame\n¶\nThe reference frame that is fixed relative to the vessel,\nand orientated with the vessels orbital prograde/normal/radial directions.\nThe origin is at the center of mass of the vessel.\nThe axes rotate with the orbital prograde/normal/radial directions.\nThe x-axis points in the orbital anti-radial direction.\nThe y-axis points in the orbital prograde direction.\nThe z-axis points in the orbital normal direction.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nGame Scenes\n:\nFlight\nNote\nBe careful not to confuse this with ‘orbit’ mode on the navball.\nVessel orbital reference frame origin and axes\n¶\nsurface_reference_frame\n¶\nThe reference frame that is fixed relative to the vessel,\nand orientated with the surface of the body being orbited.\nThe origin is at the center of mass of the vessel.\nThe axes rotate with the north and up directions on the surface of the body.\nThe x-axis points in the\nzenith\ndirection (upwards, normal to the body being orbited, from the center of the body towards the center of\nmass of the vessel).\nThe y-axis points northwards towards the\nastronomical horizon\n(north, and tangential to the\nsurface of the body – the direction in which a compass would point when on the surface).\nThe z-axis points eastwards towards the\nastronomical horizon\n(east, and tangential to the\nsurface of the body – east on a compass when on the surface).\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nGame Scenes\n:\nFlight\nNote\nBe careful not to confuse this with ‘surface’ mode on the navball.\nVessel surface reference frame origin and axes\n¶\nsurface_velocity_reference_frame\n¶\nThe reference frame that is fixed relative to the vessel,\nand orientated with the velocity vector of the vessel relative\nto the surface of the body being orbited.\nThe origin is at the center of mass of the vessel.\nThe axes rotate with the vessel’s velocity vector.\nThe y-axis points in the direction of the vessel’s velocity vector,\nrelative to the surface of the body being orbited.\nThe z-axis is in the plane of the\nastronomical horizon\n.\nThe x-axis is orthogonal to the other two axes.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nGame Scenes\n:\nFlight\nVessel surface velocity reference frame origin and axes\n¶\nposition\n(\nreference_frame\n)\n¶\nThe position of the center of mass of the vessel, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nbounding_box\n(\nreference_frame\n)\n¶\nThe axis-aligned bounding box of the vessel in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vectors are in.\nReturns\n:\nThe positions of the minimum and maximum vertices of the box, as position vectors.\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nGame Scenes\n:\nFlight\nvelocity\n(\nreference_frame\n)\n¶\nThe velocity of the center of mass of the vessel, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned velocity vector is in.\nReturns\n:\nThe velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the body in meters per second.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nrotation\n(\nreference_frame\n)\n¶\nThe rotation of the vessel, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned rotation is in.\nReturns\n:\nThe rotation as a quaternion of the form\n\\((x, y, z, w)\\)\n.\nReturn type\n:\ntuple(float, float, float, float)\nGame Scenes\n:\nFlight\ndirection\n(\nreference_frame\n)\n¶\nThe direction in which the vessel is pointing, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nangular_velocity\n(\nreference_frame\n)\n¶\nThe angular velocity of the vessel, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame the returned angular velocity is in.\nReturns\n:\nThe angular velocity as a vector. The magnitude of the vector is the rotational speed of the vessel, in radians per second. The direction of the vector indicates the axis of rotation, using the right-hand rule.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nclass\nVesselType\n¶\nThe type of a vessel.\nSee\nVessel.type\n.\nbase\n¶\nBase.\ndebris\n¶\nDebris.\nlander\n¶\nLander.\nplane\n¶\nPlane.\nprobe\n¶\nProbe.\nrelay\n¶\nRelay.\nrover\n¶\nRover.\nship\n¶\nShip.\nstation\n¶\nStation.\nspace_object\n¶\nSpaceObject.\nunknown\n¶\nUnknown.\neva\n¶\nEVA.\nflag\n¶\nFlag.\ndeployed_science_controller\n¶\nDeployedScienceController.\ndeployed_science_part\n¶\nDeploedSciencePart.\ndropped_part\n¶\nDroppedPart.\ndeployed_ground_part\n¶\nDeployedGroundPart.\nclass\nVesselSituation\n¶\nThe situation a vessel is in.\nSee\nVessel.situation\n.\ndocked\n¶\nVessel is docked to another.\nescaping\n¶\nEscaping.\nflying\n¶\nVessel is flying through an atmosphere.\nlanded\n¶\nVessel is landed on the surface of a body.\norbiting\n¶\nVessel is orbiting a body.\npre_launch\n¶\nVessel is awaiting launch.\nsplashed\n¶\nVessel has splashed down in an ocean.\nsub_orbital\n¶\nVessel is on a sub-orbital trajectory.\nclass\nCrewMember\n¶\nRepresents crew in a vessel. Can be obtained using\nVessel.crew\n.\nname\n¶\nThe crew members name.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\ntype\n¶\nThe type of crew member.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCrewMemberType\non_mission\n¶\nWhether the crew member is on a mission.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ncourage\n¶\nThe crew members courage.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nstupidity\n¶\nThe crew members stupidity.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nexperience\n¶\nThe crew members experience.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nbadass\n¶\nWhether the crew member is a badass.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nveteran\n¶\nWhether the crew member is a veteran.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ntrait\n¶\nThe crew member’s job.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ngender\n¶\nThe crew member’s gender.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCrewMemberGender\nroster_status\n¶\nThe crew member’s current roster status.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRosterStatus\nsuit_type\n¶\nThe crew member’s suit type.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSuitType\ncareer_log_flights\n¶\nThe flight IDs for each entry in the career flight log.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(int)\ncareer_log_types\n¶\nThe type for each entry in the career flight log.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\ncareer_log_targets\n¶\nThe body name for each entry in the career flight log.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nclass\nCrewMemberType\n¶\nThe type of a crew member.\nSee\nCrewMember.type\n.\napplicant\n¶\nAn applicant for crew.\ncrew\n¶\nRocket crew.\ntourist\n¶\nA tourist.\nunowned\n¶\nAn unowned crew member.\nclass\nCrewMemberGender\n¶\nA crew member’s gender.\nSee\nCrewMember.gender\n.\nmale\n¶\nMale.\nfemale\n¶\nFemale.\nclass\nRosterStatus\n¶\nA crew member’s roster status.\nSee\nCrewMember.roster_status\n.\navailable\n¶\nAvailable.\nassigned\n¶\nAssigned.\ndead\n¶\nDead.\nmissing\n¶\nMissing.\nclass\nSuitType\n¶\nA crew member’s suit type.\nSee\nCrewMember.suit_type\n.\ndefault\n¶\nDefault.\nvintage\n¶\nVintage.\nfuture\n¶\nFuture.\nslim\n¶\nSlim."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/celestial-body.html", "title": "CelestialBody¶", "headings": [], "anchors": ["celestialbody", "SpaceCenter.CelestialBody", "SpaceCenter.CelestialBody.name", "SpaceCenter.CelestialBody.satellites", "SpaceCenter.CelestialBody.orbit", "SpaceCenter.CelestialBody.mass", "SpaceCenter.CelestialBody.gravitational_parameter", "SpaceCenter.CelestialBody.surface_gravity", "SpaceCenter.CelestialBody.rotational_period", "SpaceCenter.CelestialBody.rotational_speed", "SpaceCenter.CelestialBody.rotation_angle", "SpaceCenter.CelestialBody.initial_rotation", "SpaceCenter.CelestialBody.equatorial_radius", "SpaceCenter.CelestialBody.surface_height", "SpaceCenter.CelestialBody.bedrock_height", "SpaceCenter.CelestialBody.msl_position", "SpaceCenter.CelestialBody.surface_position", "SpaceCenter.CelestialBody.bedrock_position", "SpaceCenter.CelestialBody.position_at_altitude", "SpaceCenter.CelestialBody.altitude_at_position", "SpaceCenter.CelestialBody.latitude_at_position", "SpaceCenter.CelestialBody.longitude_at_position", "SpaceCenter.CelestialBody.sphere_of_influence", "SpaceCenter.CelestialBody.is_star", "SpaceCenter.CelestialBody.has_solid_surface", "SpaceCenter.CelestialBody.has_atmosphere", "SpaceCenter.CelestialBody.atmosphere_depth", "SpaceCenter.CelestialBody.atmospheric_density_at_position", "SpaceCenter.CelestialBody.has_atmospheric_oxygen", "SpaceCenter.CelestialBody.temperature_at", "SpaceCenter.CelestialBody.density_at", "SpaceCenter.CelestialBody.pressure_at", "SpaceCenter.CelestialBody.biomes", "SpaceCenter.CelestialBody.biome_at", "SpaceCenter.CelestialBody.flying_high_altitude_threshold", "SpaceCenter.CelestialBody.space_high_altitude_threshold", "SpaceCenter.CelestialBody.reference_frame", "id1", "SpaceCenter.CelestialBody.non_rotating_reference_frame", "SpaceCenter.CelestialBody.orbital_reference_frame", "SpaceCenter.CelestialBody.position", "SpaceCenter.CelestialBody.velocity", "SpaceCenter.CelestialBody.rotation", "SpaceCenter.CelestialBody.direction", "SpaceCenter.CelestialBody.angular_velocity"], "content_text": "CelestialBody\n¶\nclass\nCelestialBody\n¶\nRepresents a celestial body (such as a planet or moon).\nSee\nbodies\n.\nname\n¶\nThe name of the body.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nsatellites\n¶\nA list of celestial bodies that are in orbit around this celestial body.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nCelestialBody\n)\norbit\n¶\nThe orbit of the body.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nOrbit\nmass\n¶\nThe mass of the body, in kilograms.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ngravitational_parameter\n¶\nThe\nstandard gravitational parameter\nof the body in\n\\(m^3s^{-2}\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsurface_gravity\n¶\nThe acceleration due to gravity at sea level (mean altitude) on the body,\nin\n\\(m/s^2\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrotational_period\n¶\nThe sidereal rotational period of the body, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrotational_speed\n¶\nThe rotational speed of the body, in radians per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrotation_angle\n¶\nThe current rotation angle of the body, in radians.\nA value between 0 and\n\\(2\\pi\\)\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ninitial_rotation\n¶\nThe initial rotation angle of the body (at UT 0), in radians.\nA value between 0 and\n\\(2\\pi\\)\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nequatorial_radius\n¶\nThe equatorial radius of the body, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsurface_height\n(\nlatitude\n,\nlongitude\n)\n¶\nThe height of the surface relative to mean sea level, in meters,\nat the given position. When over water this is equal to 0.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude in degrees.\nlongitude\n(\nfloat\n) – Longitude in degrees.\nReturn type\n:\nfloat\nbedrock_height\n(\nlatitude\n,\nlongitude\n)\n¶\nThe height of the surface relative to mean sea level, in meters,\nat the given position. When over water, this is the height\nof the sea-bed and is therefore  negative value.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude in degrees.\nlongitude\n(\nfloat\n) – Longitude in degrees.\nReturn type\n:\nfloat\nmsl_position\n(\nlatitude\n,\nlongitude\n,\nreference_frame\n)\n¶\nThe position at mean sea level at the given latitude and longitude,\nin the given reference frame.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude in degrees.\nlongitude\n(\nfloat\n) – Longitude in degrees.\nreference_frame\n(\nReferenceFrame\n) – Reference frame for the returned position vector.\nReturns\n:\nPosition as a vector.\nReturn type\n:\ntuple(float, float, float)\nsurface_position\n(\nlatitude\n,\nlongitude\n,\nreference_frame\n)\n¶\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position of the surface of the water.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude in degrees.\nlongitude\n(\nfloat\n) – Longitude in degrees.\nreference_frame\n(\nReferenceFrame\n) – Reference frame for the returned position vector.\nReturns\n:\nPosition as a vector.\nReturn type\n:\ntuple(float, float, float)\nbedrock_position\n(\nlatitude\n,\nlongitude\n,\nreference_frame\n)\n¶\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position at the bottom of the sea-bed.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude in degrees.\nlongitude\n(\nfloat\n) – Longitude in degrees.\nreference_frame\n(\nReferenceFrame\n) – Reference frame for the returned position vector.\nReturns\n:\nPosition as a vector.\nReturn type\n:\ntuple(float, float, float)\nposition_at_altitude\n(\nlatitude\n,\nlongitude\n,\naltitude\n,\nreference_frame\n)\n¶\nThe position at the given latitude, longitude and altitude, in the given reference frame.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude in degrees.\nlongitude\n(\nfloat\n) – Longitude in degrees.\naltitude\n(\nfloat\n) – Altitude in meters above sea level.\nreference_frame\n(\nReferenceFrame\n) – Reference frame for the returned position vector.\nReturns\n:\nPosition as a vector.\nReturn type\n:\ntuple(float, float, float)\naltitude_at_position\n(\nposition\n,\nreference_frame\n)\n¶\nThe altitude, in meters, of the given position in the given reference frame.\nParameters\n:\nposition\n(\ntuple\n) – Position as a vector.\nreference_frame\n(\nReferenceFrame\n) – Reference frame for the position vector.\nReturn type\n:\nfloat\nlatitude_at_position\n(\nposition\n,\nreference_frame\n)\n¶\nThe latitude of the given position, in the given reference frame.\nParameters\n:\nposition\n(\ntuple\n) – Position as a vector.\nreference_frame\n(\nReferenceFrame\n) – Reference frame for the position vector.\nReturn type\n:\nfloat\nlongitude_at_position\n(\nposition\n,\nreference_frame\n)\n¶\nThe longitude of the given position, in the given reference frame.\nParameters\n:\nposition\n(\ntuple\n) – Position as a vector.\nreference_frame\n(\nReferenceFrame\n) – Reference frame for the position vector.\nReturn type\n:\nfloat\nsphere_of_influence\n¶\nThe radius of the sphere of influence of the body, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nis_star\n¶\nWhether or not the body is a star.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_solid_surface\n¶\nWhether or not the body has a solid surface.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_atmosphere\n¶\nTrue\nif the body has an atmosphere.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\natmosphere_depth\n¶\nThe depth of the atmosphere, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\natmospheric_density_at_position\n(\nposition\n,\nreference_frame\n)\n¶\nThe atmospheric density at the given position, in\n\\(kg/m^3\\)\n,\nin the given reference frame.\nParameters\n:\nposition\n(\ntuple\n) – The position vector at which to measure the density.\nreference_frame\n(\nReferenceFrame\n) – Reference frame that the position vector is in.\nReturn type\n:\nfloat\nhas_atmospheric_oxygen\n¶\nTrue\nif there is oxygen in the atmosphere, required for air-breathing engines.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ntemperature_at\n(\nposition\n,\nreference_frame\n)\n¶\nThe temperature on the body at the given position, in the given reference frame.\nParameters\n:\nposition\n(\ntuple\n) – Position as a vector.\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the position is in.\nReturn type\n:\nfloat\nNote\nThis calculation is performed using the bodies current position, which means that\nthe value could be wrong if you want to know the temperature in the far future.\ndensity_at\n(\naltitude\n)\n¶\nGets the air density, in\n\\(kg/m^3\\)\n, for the specified\naltitude above sea level, in meters.\nParameters\n:\naltitude\n(\nfloat\n) –\nReturn type\n:\nfloat\nNote\nThis is an approximation, because actual calculations, taking sun exposure into account\nto compute air temperature, require us to know the exact point on the body where the\ndensity is to be computed (knowing the altitude is not enough).\nHowever, the difference is small for high altitudes, so it makes very little difference\nfor trajectory prediction.\npressure_at\n(\naltitude\n)\n¶\nGets the air pressure, in Pascals, for the specified\naltitude above sea level, in meters.\nParameters\n:\naltitude\n(\nfloat\n) –\nReturn type\n:\nfloat\nbiomes\n¶\nThe biomes present on this body.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nset(str)\nbiome_at\n(\nlatitude\n,\nlongitude\n)\n¶\nThe biome at the given latitude and longitude, in degrees.\nParameters\n:\nlatitude\n(\nfloat\n) –\nlongitude\n(\nfloat\n) –\nReturn type\n:\nstr\nflying_high_altitude_threshold\n¶\nThe altitude, in meters, above which a vessel is considered to be\nflying “high” when doing science.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nspace_high_altitude_threshold\n¶\nThe altitude, in meters, above which a vessel is considered to be\nin “high” space when doing science.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nreference_frame\n¶\nThe reference frame that is fixed relative to the celestial body.\nThe origin is at the center of the body.\nThe axes rotate with the body.\nThe x-axis points from the center of the body\ntowards the intersection of the prime meridian and equator (the\nposition at 0° longitude, 0° latitude).\nThe y-axis points from the center of the body\ntowards the north pole.\nThe z-axis points from the center of the body\ntowards the equator at 90°E longitude.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nCelestial body reference frame origin and axes. The equator is shown in\nblue, and the prime meridian in red.\n¶\nnon_rotating_reference_frame\n¶\nThe reference frame that is fixed relative to this celestial body, and\norientated in a fixed direction (it does not rotate with the body).\nThe origin is at the center of the body.\nThe axes do not rotate.\nThe x-axis points in an arbitrary direction through the\nequator.\nThe y-axis points from the center of the body towards\nthe north pole.\nThe z-axis points in an arbitrary direction through the\nequator.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\norbital_reference_frame\n¶\nThe reference frame that is fixed relative to this celestial body, but\norientated with the body’s orbital prograde/normal/radial directions.\nThe origin is at the center of the body.\nThe axes rotate with the orbital prograde/normal/radial\ndirections.\nThe x-axis points in the orbital anti-radial direction.\nThe y-axis points in the orbital prograde direction.\nThe z-axis points in the orbital normal direction.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nposition\n(\nreference_frame\n)\n¶\nThe position of the center of the body, in the specified reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nvelocity\n(\nreference_frame\n)\n¶\nThe linear velocity of the body, in the specified reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned velocity vector is in.\nReturns\n:\nThe velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the body in meters per second.\nReturn type\n:\ntuple(float, float, float)\nrotation\n(\nreference_frame\n)\n¶\nThe rotation of the body, in the specified reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned rotation is in.\nReturns\n:\nThe rotation as a quaternion of the form\n\\((x, y, z, w)\\)\n.\nReturn type\n:\ntuple(float, float, float, float)\ndirection\n(\nreference_frame\n)\n¶\nThe direction in which the north pole of the celestial body is pointing,\nin the specified reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nangular_velocity\n(\nreference_frame\n)\n¶\nThe angular velocity of the body in the specified reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame the returned angular velocity is in.\nReturns\n:\nThe angular velocity as a vector. The magnitude of the vector is the rotational speed of the body, in radians per second. The direction of the vector indicates the axis of rotation, using the right-hand rule.\nReturn type\n:\ntuple(float, float, float)"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/flight.html", "title": "Flight¶", "headings": [], "anchors": ["flight", "SpaceCenter.Flight", "SpaceCenter.Flight.g_force", "SpaceCenter.Flight.mean_altitude", "SpaceCenter.Flight.surface_altitude", "SpaceCenter.Flight.bedrock_altitude", "SpaceCenter.Flight.elevation", "SpaceCenter.Flight.latitude", "SpaceCenter.Flight.longitude", "SpaceCenter.Flight.velocity", "SpaceCenter.Flight.speed", "SpaceCenter.Flight.horizontal_speed", "SpaceCenter.Flight.vertical_speed", "SpaceCenter.Flight.center_of_mass", "SpaceCenter.Flight.rotation", "SpaceCenter.Flight.direction", "SpaceCenter.Flight.pitch", "SpaceCenter.Flight.heading", "SpaceCenter.Flight.roll", "SpaceCenter.Flight.prograde", "SpaceCenter.Flight.retrograde", "SpaceCenter.Flight.normal", "SpaceCenter.Flight.anti_normal", "SpaceCenter.Flight.radial", "SpaceCenter.Flight.anti_radial", "SpaceCenter.Flight.atmosphere_density", "SpaceCenter.Flight.dynamic_pressure", "SpaceCenter.Flight.static_pressure", "SpaceCenter.Flight.static_pressure_at_msl", "SpaceCenter.Flight.aerodynamic_force", "SpaceCenter.Flight.simulate_aerodynamic_force_at", "SpaceCenter.Flight.lift", "SpaceCenter.Flight.drag", "SpaceCenter.Flight.speed_of_sound", "SpaceCenter.Flight.mach", "SpaceCenter.Flight.reynolds_number", "SpaceCenter.Flight.true_air_speed", "SpaceCenter.Flight.equivalent_air_speed", "SpaceCenter.Flight.terminal_velocity", "SpaceCenter.Flight.angle_of_attack", "SpaceCenter.Flight.sideslip_angle", "SpaceCenter.Flight.total_air_temperature", "SpaceCenter.Flight.static_air_temperature", "SpaceCenter.Flight.stall_fraction", "SpaceCenter.Flight.drag_coefficient", "SpaceCenter.Flight.lift_coefficient", "SpaceCenter.Flight.ballistic_coefficient", "SpaceCenter.Flight.thrust_specific_fuel_consumption"], "content_text": "Flight\n¶\nclass\nFlight\n¶\nUsed to get flight telemetry for a vessel, by calling\nVessel.flight()\n.\nAll of the information returned by this class is given in the reference frame\npassed to that method.\nObtained by calling\nVessel.flight()\n.\nNote\nTo get orbital information, such as the apoapsis or inclination, see\nOrbit\n.\ng_force\n¶\nThe current G force acting on the vessel in\n\\(g\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmean_altitude\n¶\nThe altitude above sea level, in meters.\nMeasured from the center of mass of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nsurface_altitude\n¶\nThe altitude above the surface of the body or sea level, whichever is closer, in meters.\nMeasured from the center of mass of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nbedrock_altitude\n¶\nThe altitude above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\nMeasured from the center of mass of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nelevation\n¶\nThe elevation of the terrain under the vessel, in meters. This is the height of the terrain above sea level,\nand is negative when the vessel is over the sea.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nlatitude\n¶\nThe\nlatitude\nof the vessel for the body being orbited, in degrees.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nlongitude\n¶\nThe\nlongitude\nof the vessel for the body being orbited, in degrees.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nvelocity\n¶\nThe velocity of the vessel, in the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the vessel in meters per second.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nspeed\n¶\nThe speed of the vessel in meters per second,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nhorizontal_speed\n¶\nThe horizontal speed of the vessel in meters per second,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nvertical_speed\n¶\nThe vertical speed of the vessel in meters per second,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncenter_of_mass\n¶\nThe position of the center of mass of the vessel,\nin the reference frame\nReferenceFrame\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nrotation\n¶\nThe rotation of the vessel, in the reference frame\nReferenceFrame\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe rotation as a quaternion of the form\n\\((x, y, z, w)\\)\n.\nReturn type\n:\ntuple(float, float, float, float)\nGame Scenes\n:\nFlight\ndirection\n¶\nThe direction that the vessel is pointing in,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\npitch\n¶\nThe pitch of the vessel relative to the horizon, in degrees.\nA value between -90° and +90°.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nheading\n¶\nThe heading of the vessel (its angle relative to north), in degrees.\nA value between 0° and 360°.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nroll\n¶\nThe roll of the vessel relative to the horizon, in degrees.\nA value between -180° and +180°.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nprograde\n¶\nThe prograde direction of the vessels orbit,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nretrograde\n¶\nThe retrograde direction of the vessels orbit,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nnormal\n¶\nThe direction normal to the vessels orbit,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nanti_normal\n¶\nThe direction opposite to the normal of the vessels orbit,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nradial\n¶\nThe radial direction of the vessels orbit,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nanti_radial\n¶\nThe direction opposite to the radial direction of the vessels orbit,\nin the reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\natmosphere_density\n¶\nThe current density of the atmosphere around the vessel, in\n\\(kg/m^3\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ndynamic_pressure\n¶\nThe dynamic pressure acting on the vessel, in Pascals. This is a measure of the\nstrength of the aerodynamic forces. It is equal to\n\\(\\frac{1}{2} . \\mbox{air density} . \\mbox{velocity}^2\\)\n.\nIt is commonly denoted\n\\(Q\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstatic_pressure\n¶\nThe static atmospheric pressure acting on the vessel, in Pascals.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstatic_pressure_at_msl\n¶\nThe static atmospheric pressure at mean sea level, in Pascals.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\naerodynamic_force\n¶\nThe total aerodynamic forces acting on the vessel,\nin reference frame\nReferenceFrame\n.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nA vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nsimulate_aerodynamic_force_at\n(\nbody\n,\nposition\n,\nvelocity\n)\n¶\nSimulate and return the total aerodynamic forces acting on the vessel,\nif it where to be traveling with the given velocity at the given position in the\natmosphere of the given celestial body.\nParameters\n:\nbody\n(\nCelestialBody\n) –\nposition\n(\ntuple\n) –\nvelocity\n(\ntuple\n) –\nReturns\n:\nA vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nlift\n¶\nThe\naerodynamic lift\ncurrently acting on the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nA vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\ndrag\n¶\nThe\naerodynamic drag\ncurrently acting on the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturns\n:\nA vector pointing in the direction of the force, with its magnitude equal to the strength of the force in Newtons.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nspeed_of_sound\n¶\nThe speed of sound, in the atmosphere around the vessel, in\n\\(m/s\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmach\n¶\nThe speed of the vessel, in multiples of the speed of sound.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nreynolds_number\n¶\nThe vessels Reynolds number.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nNote\nRequires\nFerram Aerospace Research\n.\ntrue_air_speed\n¶\nThe\ntrue air speed\nof the vessel, in meters per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nequivalent_air_speed\n¶\nThe\nequivalent air speed\nof the vessel, in meters per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nterminal_velocity\n¶\nAn estimate of the current terminal velocity of the vessel, in meters per second.\nThis is the speed at which the drag forces cancel out the force of gravity.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nangle_of_attack\n¶\nThe pitch angle between the orientation of the vessel and its velocity vector,\nin degrees.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nsideslip_angle\n¶\nThe yaw angle between the orientation of the vessel and its velocity vector, in degrees.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ntotal_air_temperature\n¶\nThe\ntotal air temperature\nof the atmosphere around the vessel, in Kelvin.\nThis includes the\nFlight.static_air_temperature\nand the vessel’s kinetic energy.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstatic_air_temperature\n¶\nThe\nstatic (ambient) temperature\nof the atmosphere around the vessel, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstall_fraction\n¶\nThe current amount of stall, between 0 and 1. A value greater than 0.005 indicates\na minor stall and a value greater than 0.5 indicates a large-scale stall.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nNote\nRequires\nFerram Aerospace Research\n.\ndrag_coefficient\n¶\nThe coefficient of drag. This is the amount of drag produced by the vessel.\nIt depends on air speed, air density and wing area.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nNote\nRequires\nFerram Aerospace Research\n.\nlift_coefficient\n¶\nThe coefficient of lift. This is the amount of lift produced by the vessel, and\ndepends on air speed, air density and wing area.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nNote\nRequires\nFerram Aerospace Research\n.\nballistic_coefficient\n¶\nThe\nballistic coefficient\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nNote\nRequires\nFerram Aerospace Research\n.\nthrust_specific_fuel_consumption\n¶\nThe thrust specific fuel consumption for the jet engines on the vessel. This is a\nmeasure of the efficiency of the engines, with a lower value indicating a more\nefficient vessel. This value is the number of Newtons of fuel that are burned,\nper hour, to produce one newton of thrust.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nNote\nRequires\nFerram Aerospace Research\n."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/orbit.html", "title": "Orbit¶", "headings": [], "anchors": ["orbit", "SpaceCenter.Orbit", "SpaceCenter.Orbit.body", "SpaceCenter.Orbit.apoapsis", "SpaceCenter.Orbit.periapsis", "SpaceCenter.Orbit.apoapsis_altitude", "SpaceCenter.Orbit.periapsis_altitude", "SpaceCenter.Orbit.semi_major_axis", "SpaceCenter.Orbit.semi_minor_axis", "SpaceCenter.Orbit.radius", "SpaceCenter.Orbit.radius_at", "SpaceCenter.Orbit.position_at", "SpaceCenter.Orbit.speed", "SpaceCenter.Orbit.period", "SpaceCenter.Orbit.time_to_apoapsis", "SpaceCenter.Orbit.time_to_periapsis", "SpaceCenter.Orbit.eccentricity", "SpaceCenter.Orbit.inclination", "SpaceCenter.Orbit.longitude_of_ascending_node", "SpaceCenter.Orbit.argument_of_periapsis", "SpaceCenter.Orbit.mean_anomaly_at_epoch", "SpaceCenter.Orbit.epoch", "SpaceCenter.Orbit.mean_anomaly", "SpaceCenter.Orbit.mean_anomaly_at_ut", "SpaceCenter.Orbit.eccentric_anomaly", "SpaceCenter.Orbit.eccentric_anomaly_at_ut", "SpaceCenter.Orbit.true_anomaly", "SpaceCenter.Orbit.true_anomaly_at_ut", "SpaceCenter.Orbit.true_anomaly_at_radius", "SpaceCenter.Orbit.ut_at_true_anomaly", "SpaceCenter.Orbit.radius_at_true_anomaly", "SpaceCenter.Orbit.true_anomaly_at_an", "SpaceCenter.Orbit.true_anomaly_at_dn", "SpaceCenter.Orbit.orbital_speed", "SpaceCenter.Orbit.orbital_speed_at", "SpaceCenter.Orbit.reference_plane_normal", "SpaceCenter.Orbit.reference_plane_direction", "SpaceCenter.Orbit.relative_inclination", "SpaceCenter.Orbit.time_to_soi_change", "SpaceCenter.Orbit.next_orbit", "SpaceCenter.Orbit.time_of_closest_approach", "SpaceCenter.Orbit.distance_at_closest_approach", "SpaceCenter.Orbit.list_closest_approaches"], "content_text": "Orbit\n¶\nclass\nOrbit\n¶\nDescribes an orbit. For example, the orbit of a vessel, obtained by calling\nVessel.orbit\n, or a celestial body, obtained by calling\nCelestialBody.orbit\n.\nbody\n¶\nThe celestial body (e.g. planet or moon) around which the object is orbiting.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCelestialBody\napoapsis\n¶\nGets the apoapsis of the orbit, in meters, from the center of mass\nof the body being orbited.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nNote\nFor the apoapsis altitude reported on the in-game map view,\nuse\nOrbit.apoapsis_altitude\n.\nperiapsis\n¶\nThe periapsis of the orbit, in meters, from the center of mass\nof the body being orbited.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nNote\nFor the periapsis altitude reported on the in-game map view,\nuse\nOrbit.periapsis_altitude\n.\napoapsis_altitude\n¶\nThe apoapsis of the orbit, in meters, above the sea level of the body being orbited.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nNote\nThis is equal to\nOrbit.apoapsis\nminus the equatorial radius of the body.\nperiapsis_altitude\n¶\nThe periapsis of the orbit, in meters, above the sea level of the body being orbited.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nNote\nThis is equal to\nOrbit.periapsis\nminus the equatorial radius of the body.\nsemi_major_axis\n¶\nThe semi-major axis of the orbit, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsemi_minor_axis\n¶\nThe semi-minor axis of the orbit, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nradius\n¶\nThe current radius of the orbit, in meters. This is the distance between the center\nof mass of the object in orbit, and the center of mass of the body around which it\nis orbiting.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nNote\nThis value will change over time if the orbit is elliptical.\nradius_at\n(\nut\n)\n¶\nThe orbital radius at the given time, in meters.\nParameters\n:\nut\n(\nfloat\n) – The universal time to measure the radius at.\nReturn type\n:\nfloat\nposition_at\n(\nut\n,\nreference_frame\n)\n¶\nThe position at a given time, in the specified reference frame.\nParameters\n:\nut\n(\nfloat\n) – The universal time to measure the position at.\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nspeed\n¶\nThe current orbital speed of the object in meters per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nNote\nThis value will change over time if the orbit is elliptical.\nperiod\n¶\nThe orbital period, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntime_to_apoapsis\n¶\nThe time until the object reaches apoapsis, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntime_to_periapsis\n¶\nThe time until the object reaches periapsis, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\neccentricity\n¶\nThe\neccentricity\nof the orbit.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ninclination\n¶\nThe\ninclination\nof the orbit,\nin radians.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nlongitude_of_ascending_node\n¶\nThe\nlongitude of the ascending node\n, in radians.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nargument_of_periapsis\n¶\nThe\nargument of periapsis\n, in radians.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmean_anomaly_at_epoch\n¶\nThe\nmean anomaly at epoch\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nepoch\n¶\nThe time since the epoch (the point at which the\nmean anomaly at epoch\nwas measured, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmean_anomaly\n¶\nThe\nmean anomaly\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmean_anomaly_at_ut\n(\nut\n)\n¶\nThe mean anomaly at the given time.\nParameters\n:\nut\n(\nfloat\n) – The universal time in seconds.\nReturn type\n:\nfloat\neccentric_anomaly\n¶\nThe\neccentric anomaly\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\neccentric_anomaly_at_ut\n(\nut\n)\n¶\nThe eccentric anomaly at the given universal time.\nParameters\n:\nut\n(\nfloat\n) – The universal time, in seconds.\nReturn type\n:\nfloat\ntrue_anomaly\n¶\nThe\ntrue anomaly\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntrue_anomaly_at_ut\n(\nut\n)\n¶\nThe true anomaly at the given time.\nParameters\n:\nut\n(\nfloat\n) – The universal time in seconds.\nReturn type\n:\nfloat\ntrue_anomaly_at_radius\n(\nradius\n)\n¶\nThe true anomaly at the given orbital radius.\nParameters\n:\nradius\n(\nfloat\n) – The orbital radius in meters.\nReturn type\n:\nfloat\nut_at_true_anomaly\n(\ntrue_anomaly\n)\n¶\nThe universal time, in seconds, corresponding to the given true anomaly.\nParameters\n:\ntrue_anomaly\n(\nfloat\n) – True anomaly.\nReturn type\n:\nfloat\nradius_at_true_anomaly\n(\ntrue_anomaly\n)\n¶\nThe orbital radius at the point in the orbit given by the true anomaly.\nParameters\n:\ntrue_anomaly\n(\nfloat\n) – The true anomaly.\nReturn type\n:\nfloat\ntrue_anomaly_at_an\n(\ntarget\n)\n¶\nThe true anomaly of the ascending node with the given target orbit.\nParameters\n:\ntarget\n(\nOrbit\n) – Target orbit.\nReturn type\n:\nfloat\ntrue_anomaly_at_dn\n(\ntarget\n)\n¶\nThe true anomaly of the descending node with the given target orbit.\nParameters\n:\ntarget\n(\nOrbit\n) – Target orbit.\nReturn type\n:\nfloat\norbital_speed\n¶\nThe current orbital speed in meters per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\norbital_speed_at\n(\ntime\n)\n¶\nThe orbital speed at the given time, in meters per second.\nParameters\n:\ntime\n(\nfloat\n) – Time from now, in seconds.\nReturn type\n:\nfloat\nstatic\nreference_plane_normal\n(\nreference_frame\n)\n¶\nThe direction that is normal to the orbits reference plane,\nin the given reference frame.\nThe reference plane is the plane from which the orbits inclination is measured.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nstatic\nreference_plane_direction\n(\nreference_frame\n)\n¶\nThe direction from which the orbits longitude of ascending node is measured,\nin the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nrelative_inclination\n(\ntarget\n)\n¶\nRelative inclination of this orbit and the target orbit, in radians.\nParameters\n:\ntarget\n(\nOrbit\n) – Target orbit.\nReturn type\n:\nfloat\ntime_to_soi_change\n¶\nThe time until the object changes sphere of influence, in seconds. Returns\nNaN\nif the object is not going to change sphere of influence.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nnext_orbit\n¶\nIf the object is going to change sphere of influence in the future, returns the new\norbit after the change. Otherwise returns\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nOrbit\ntime_of_closest_approach\n(\ntarget\n)\n¶\nEstimates and returns the time at closest approach to a target orbit.\nParameters\n:\ntarget\n(\nOrbit\n) – Target orbit.\nReturns\n:\nThe universal time at closest approach, in seconds.\nReturn type\n:\nfloat\ndistance_at_closest_approach\n(\ntarget\n)\n¶\nEstimates and returns the distance at closest approach to a target orbit, in meters.\nParameters\n:\ntarget\n(\nOrbit\n) – Target orbit.\nReturn type\n:\nfloat\nlist_closest_approaches\n(\ntarget\n,\norbits\n)\n¶\nReturns the times at closest approach and corresponding distances, to a target orbit.\nParameters\n:\ntarget\n(\nOrbit\n) – Target orbit.\norbits\n(\nint\n) – The number of future orbits to search.\nReturns\n:\nA list of two lists. The first is a list of times at closest approach, as universal times in seconds. The second is a list of corresponding distances at closest approach, in meters.\nReturn type\n:\nlist(list(float))"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/control.html", "title": "Control¶", "headings": [], "anchors": ["control", "SpaceCenter.Control", "SpaceCenter.Control.source", "SpaceCenter.Control.state", "SpaceCenter.Control.sas", "SpaceCenter.Control.sas_mode", "SpaceCenter.Control.speed_mode", "SpaceCenter.Control.rcs", "SpaceCenter.Control.reaction_wheels", "SpaceCenter.Control.gear", "SpaceCenter.Control.legs", "SpaceCenter.Control.wheels", "SpaceCenter.Control.lights", "SpaceCenter.Control.brakes", "SpaceCenter.Control.antennas", "SpaceCenter.Control.cargo_bays", "SpaceCenter.Control.intakes", "SpaceCenter.Control.parachutes", "SpaceCenter.Control.radiators", "SpaceCenter.Control.resource_harvesters", "SpaceCenter.Control.resource_harvesters_active", "SpaceCenter.Control.solar_panels", "SpaceCenter.Control.abort", "SpaceCenter.Control.throttle", "SpaceCenter.Control.input_mode", "SpaceCenter.Control.pitch", "SpaceCenter.Control.yaw", "SpaceCenter.Control.roll", "SpaceCenter.Control.forward", "SpaceCenter.Control.up", "SpaceCenter.Control.right", "SpaceCenter.Control.wheel_throttle", "SpaceCenter.Control.wheel_steering", "SpaceCenter.Control.custom_axis01", "SpaceCenter.Control.custom_axis02", "SpaceCenter.Control.custom_axis03", "SpaceCenter.Control.custom_axis04", "SpaceCenter.Control.current_stage", "SpaceCenter.Control.activate_next_stage", "SpaceCenter.Control.stage_lock", "SpaceCenter.Control.get_action_group", "SpaceCenter.Control.set_action_group", "SpaceCenter.Control.toggle_action_group", "SpaceCenter.Control.add_node", "SpaceCenter.Control.nodes", "SpaceCenter.Control.remove_nodes", "SpaceCenter.ControlState", "SpaceCenter.ControlState.full", "SpaceCenter.ControlState.partial", "SpaceCenter.ControlState.none", "SpaceCenter.ControlSource", "SpaceCenter.ControlSource.kerbal", "SpaceCenter.ControlSource.probe", "SpaceCenter.ControlSource.none", "SpaceCenter.SASMode", "SpaceCenter.SASMode.stability_assist", "SpaceCenter.SASMode.maneuver", "SpaceCenter.SASMode.prograde", "SpaceCenter.SASMode.retrograde", "SpaceCenter.SASMode.normal", "SpaceCenter.SASMode.anti_normal", "SpaceCenter.SASMode.radial", "SpaceCenter.SASMode.anti_radial", "SpaceCenter.SASMode.target", "SpaceCenter.SASMode.anti_target", "SpaceCenter.SpeedMode", "SpaceCenter.SpeedMode.orbit", "SpaceCenter.SpeedMode.surface", "SpaceCenter.SpeedMode.target", "SpaceCenter.ControlInputMode", "SpaceCenter.ControlInputMode.additive", "SpaceCenter.ControlInputMode.override"], "content_text": "Control\n¶\nclass\nControl\n¶\nUsed to manipulate the controls of a vessel. This includes adjusting the\nthrottle, enabling/disabling systems such as SAS and RCS, or altering the\ndirection in which the vessel is pointing.\nObtained by calling\nVessel.control\n.\nNote\nControl inputs (such as pitch, yaw and roll) are zeroed when all clients\nthat have set one or more of these inputs are no longer connected.\nsource\n¶\nThe source of the vessels control, for example by a kerbal or a probe core.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nControlSource\nGame Scenes\n:\nFlight\nstate\n¶\nThe control state of the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nControlState\nGame Scenes\n:\nFlight\nsas\n¶\nThe state of SAS.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nNote\nEquivalent to\nAutoPilot.sas\nsas_mode\n¶\nThe current\nSASMode\n.\nThese modes are equivalent to the mode buttons to\nthe left of the navball that appear when SAS is enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSASMode\nGame Scenes\n:\nFlight\nNote\nEquivalent to\nAutoPilot.sas_mode\nspeed_mode\n¶\nThe current\nSpeedMode\nof the navball.\nThis is the mode displayed next to the speed at the top of the navball.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpeedMode\nGame Scenes\n:\nFlight\nrcs\n¶\nThe state of RCS.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nreaction_wheels\n¶\nReturns whether all reactive wheels on the vessel are active,\nand sets the active state of all reaction wheels.\nSee\nReactionWheel.active\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\ngear\n¶\nThe state of the landing gear/legs.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nlegs\n¶\nReturns whether all landing legs on the vessel are deployed,\nand sets the deployment state of all landing legs.\nDoes not include wheels (for example landing gear).\nSee\nLeg.deployed\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nwheels\n¶\nReturns whether all wheels on the vessel are deployed,\nand sets the deployment state of all wheels.\nDoes not include landing legs.\nSee\nWheel.deployed\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nlights\n¶\nThe state of the lights.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nbrakes\n¶\nThe state of the wheel brakes.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nantennas\n¶\nReturns whether all antennas on the vessel are deployed,\nand sets the deployment state of all antennas.\nSee\nAntenna.deployed\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\ncargo_bays\n¶\nReturns whether any of the cargo bays on the vessel are open,\nand sets the open state of all cargo bays.\nSee\nCargoBay.open\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nintakes\n¶\nReturns whether all of the air intakes on the vessel are open,\nand sets the open state of all air intakes.\nSee\nIntake.open\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nparachutes\n¶\nReturns whether all parachutes on the vessel are deployed,\nand sets the deployment state of all parachutes.\nCannot be set to\nFalse\n.\nSee\nParachute.deployed\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nradiators\n¶\nReturns whether all radiators on the vessel are deployed,\nand sets the deployment state of all radiators.\nSee\nRadiator.deployed\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nresource_harvesters\n¶\nReturns whether all of the resource harvesters on the vessel are deployed,\nand sets the deployment state of all resource harvesters.\nSee\nResourceHarvester.deployed\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nresource_harvesters_active\n¶\nReturns whether any of the resource harvesters on the vessel are active,\nand sets the active state of all resource harvesters.\nSee\nResourceHarvester.active\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nsolar_panels\n¶\nReturns whether all solar panels on the vessel are deployed,\nand sets the deployment state of all solar panels.\nSee\nSolarPanel.deployed\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nabort\n¶\nThe state of the abort action group.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nthrottle\n¶\nThe state of the throttle. A value between 0 and 1.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ninput_mode\n¶\nSets the behavior of the pitch, yaw, roll and translation control inputs.\nWhen set to additive, these inputs are added to the vessels current inputs.\nThis mode is the default.\nWhen set to override, these inputs (if non-zero) override the vessels inputs.\nThis mode prevents keyboard control, or SAS, from interfering with the controls when\nthey are set.\nAttribute\n:\nCan be read or written\nReturn type\n:\nControlInputMode\nGame Scenes\n:\nFlight\npitch\n¶\nThe state of the pitch control.\nA value between -1 and 1.\nEquivalent to the w and s keys.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nyaw\n¶\nThe state of the yaw control.\nA value between -1 and 1.\nEquivalent to the a and d keys.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nroll\n¶\nThe state of the roll control.\nA value between -1 and 1.\nEquivalent to the q and e keys.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nforward\n¶\nThe state of the forward translational control.\nA value between -1 and 1.\nEquivalent to the h and n keys.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nup\n¶\nThe state of the up translational control.\nA value between -1 and 1.\nEquivalent to the i and k keys.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nright\n¶\nThe state of the right translational control.\nA value between -1 and 1.\nEquivalent to the j and l keys.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nwheel_throttle\n¶\nThe state of the wheel throttle.\nA value between -1 and 1.\nA value of 1 rotates the wheels forwards, a value of -1 rotates\nthe wheels backwards.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nwheel_steering\n¶\nThe state of the wheel steering.\nA value between -1 and 1.\nA value of 1 steers to the left, and a value of -1 steers to the right.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncustom_axis01\n¶\nThe state of CustomAxis01.\nA value between -1 and 1.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncustom_axis02\n¶\nThe state of CustomAxis02.\nA value between -1 and 1.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncustom_axis03\n¶\nThe state of CustomAxis03.\nA value between -1 and 1.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncustom_axis04\n¶\nThe state of CustomAxis04.\nA value between -1 and 1.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncurrent_stage\n¶\nThe current stage of the vessel. Corresponds to the stage number in\nthe in-game UI.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\nGame Scenes\n:\nFlight\nactivate_next_stage\n(\n)\n¶\nActivates the next stage. Equivalent to pressing the space bar in-game.\nReturns\n:\nA list of vessel objects that are jettisoned from the active vessel.\nReturn type\n:\nlist(\nVessel\n)\nGame Scenes\n:\nFlight\nNote\nWhen called, the active vessel may change. It is therefore possible that,\nafter calling this function, the object(s) returned by previous call(s) to\nactive_vessel\nno longer refer to the active vessel.\nThrows an exception if staging is locked.\nstage_lock\n¶\nWhether staging is locked on the vessel.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nNote\nThis is equivalent to locking the staging using Alt+L\nget_action_group\n(\ngroup\n)\n¶\nReturns\nTrue\nif the given action group is enabled.\nParameters\n:\ngroup\n(\nint\n) – A number between 0 and 9 inclusive, or between 0 and 250 inclusive when the\nExtended Action Groups mod\nis installed.\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nset_action_group\n(\ngroup\n,\nstate\n)\n¶\nSets the state of the given action group.\nParameters\n:\ngroup\n(\nint\n) –\nA number between 0 and 9 inclusive, or between 0 and 250 inclusive when the\nExtended Action Groups mod\nis installed.\nstate\n(\nbool\n) –\nGame Scenes\n:\nFlight\ntoggle_action_group\n(\ngroup\n)\n¶\nToggles the state of the given action group.\nParameters\n:\ngroup\n(\nint\n) –\nA number between 0 and 9 inclusive, or between 0 and 250 inclusive when the\nExtended Action Groups mod\nis installed.\nGame Scenes\n:\nFlight\nadd_node\n(\nut\n[\n,\nprograde\n=\n0.0\n]\n[\n,\nnormal\n=\n0.0\n]\n[\n,\nradial\n=\n0.0\n]\n)\n¶\nCreates a maneuver node at the given universal time, and returns a\nNode\nobject that can be used to modify it.\nOptionally sets the magnitude of the delta-v for the maneuver node\nin the prograde, normal and radial directions.\nParameters\n:\nut\n(\nfloat\n) – Universal time of the maneuver node.\nprograde\n(\nfloat\n) – Delta-v in the prograde direction.\nnormal\n(\nfloat\n) – Delta-v in the normal direction.\nradial\n(\nfloat\n) – Delta-v in the radial direction.\nReturn type\n:\nNode\nGame Scenes\n:\nFlight\nnodes\n¶\nReturns a list of all existing maneuver nodes, ordered by time from first to last.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nNode\n)\nGame Scenes\n:\nFlight\nremove_nodes\n(\n)\n¶\nRemove all maneuver nodes.\nGame Scenes\n:\nFlight\nclass\nControlState\n¶\nThe control state of a vessel.\nSee\nControl.state\n.\nfull\n¶\nFull controllable.\npartial\n¶\nPartially controllable.\nnone\n¶\nNot controllable.\nclass\nControlSource\n¶\nThe control source of a vessel.\nSee\nControl.source\n.\nkerbal\n¶\nVessel is controlled by a Kerbal.\nprobe\n¶\nVessel is controlled by a probe core.\nnone\n¶\nVessel is not controlled.\nclass\nSASMode\n¶\nThe behavior of the SAS auto-pilot. See\nAutoPilot.sas_mode\n.\nstability_assist\n¶\nStability assist mode. Dampen out any rotation.\nmaneuver\n¶\nPoint in the burn direction of the next maneuver node.\nprograde\n¶\nPoint in the prograde direction.\nretrograde\n¶\nPoint in the retrograde direction.\nnormal\n¶\nPoint in the orbit normal direction.\nanti_normal\n¶\nPoint in the orbit anti-normal direction.\nradial\n¶\nPoint in the orbit radial direction.\nanti_radial\n¶\nPoint in the orbit anti-radial direction.\ntarget\n¶\nPoint in the direction of the current target.\nanti_target\n¶\nPoint away from the current target.\nclass\nSpeedMode\n¶\nThe mode of the speed reported in the navball.\nSee\nControl.speed_mode\n.\norbit\n¶\nSpeed is relative to the vessel’s orbit.\nsurface\n¶\nSpeed is relative to the surface of the body being orbited.\ntarget\n¶\nSpeed is relative to the current target.\nclass\nControlInputMode\n¶\nSee\nControl.input_mode\n.\nadditive\n¶\nControl inputs are added to the vessels current control inputs.\noverride\n¶\nControl inputs (when they are non-zero) override the vessels current control inputs."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/comms.html", "title": "Communications¶", "headings": [], "anchors": ["communications", "SpaceCenter.Comms", "SpaceCenter.Comms.can_communicate", "SpaceCenter.Comms.can_transmit_science", "SpaceCenter.Comms.signal_strength", "SpaceCenter.Comms.signal_delay", "SpaceCenter.Comms.power", "SpaceCenter.Comms.control_path", "SpaceCenter.CommLink", "SpaceCenter.CommLink.type", "SpaceCenter.CommLink.signal_strength", "SpaceCenter.CommLink.start", "SpaceCenter.CommLink.end", "SpaceCenter.CommLinkType", "SpaceCenter.CommLinkType.home", "SpaceCenter.CommLinkType.control", "SpaceCenter.CommLinkType.relay", "SpaceCenter.CommNode", "SpaceCenter.CommNode.name", "SpaceCenter.CommNode.is_home", "SpaceCenter.CommNode.is_control_point", "SpaceCenter.CommNode.is_vessel", "SpaceCenter.CommNode.vessel"], "content_text": "Communications\n¶\nclass\nComms\n¶\nUsed to interact with CommNet for a given vessel.\nObtained by calling\nVessel.comms\n.\ncan_communicate\n¶\nWhether the vessel can communicate with KSC.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\ncan_transmit_science\n¶\nWhether the vessel can transmit science data to KSC.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nsignal_strength\n¶\nSignal strength to KSC.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nsignal_delay\n¶\nSignal delay to KSC in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\npower\n¶\nThe combined power of all active antennae on the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncontrol_path\n¶\nThe communication path used to control the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nCommLink\n)\nGame Scenes\n:\nFlight\nclass\nCommLink\n¶\nRepresents a communication node in the network. For example, a vessel or the KSC.\ntype\n¶\nThe type of link.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCommLinkType\nsignal_strength\n¶\nSignal strength of the link.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nstart\n¶\nStart point of the link.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCommNode\nend\n¶\nStart point of the link.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCommNode\nclass\nCommLinkType\n¶\nThe type of a communication link.\nSee\nCommLink.type\n.\nhome\n¶\nLink is to a base station on Kerbin.\ncontrol\n¶\nLink is to a control source, for example a manned spacecraft.\nrelay\n¶\nLink is to a relay satellite.\nclass\nCommNode\n¶\nRepresents a communication node in the network. For example, a vessel or the KSC.\nname\n¶\nName of the communication node.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nis_home\n¶\nWhether the communication node is on Kerbin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nis_control_point\n¶\nWhether the communication node is a control point, for example a manned vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nis_vessel\n¶\nWhether the communication node is a vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nvessel\n¶\nThe vessel for this communication node.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nVessel"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/parts.html", "title": "Parts¶", "headings": ["Parts¶", "Part¶", "Module¶", "Specific Types of Part¶", "Antenna¶", "Cargo Bay¶", "Control Surface¶", "Decoupler¶", "Docking Port¶", "Engine¶", "Experiment¶", "Fairing¶", "Intake¶", "Leg¶", "Launch Clamp¶", "Light¶", "Parachute¶", "Radiator¶", "Resource Converter¶", "Resource Harvester¶", "Reaction Wheel¶", "Resource Drain¶", "Robotic Controller¶", "Robotic Hinge¶", "Robotic Piston¶", "Robotic Rotation¶", "Robotic Rotor¶", "RCS¶", "Sensor¶", "Solar Panel¶", "Thruster¶", "Wheel¶", "Trees of Parts¶", "Traversing the Tree¶", "Attachment Modes¶", "Fuel Lines¶", "Staging¶"], "anchors": ["parts", "python-api-parts", "id1", "SpaceCenter.Parts", "SpaceCenter.Parts.all", "SpaceCenter.Parts.root", "SpaceCenter.Parts.controlling", "SpaceCenter.Parts.with_name", "SpaceCenter.Parts.with_title", "SpaceCenter.Parts.with_tag", "SpaceCenter.Parts.with_module", "SpaceCenter.Parts.in_stage", "SpaceCenter.Parts.in_decouple_stage", "SpaceCenter.Parts.modules_with_name", "SpaceCenter.Parts.antennas", "SpaceCenter.Parts.cargo_bays", "SpaceCenter.Parts.control_surfaces", "SpaceCenter.Parts.decouplers", "SpaceCenter.Parts.docking_ports", "SpaceCenter.Parts.engines", "SpaceCenter.Parts.experiments", "SpaceCenter.Parts.fairings", "SpaceCenter.Parts.intakes", "SpaceCenter.Parts.legs", "SpaceCenter.Parts.launch_clamps", "SpaceCenter.Parts.lights", "SpaceCenter.Parts.parachutes", "SpaceCenter.Parts.radiators", "SpaceCenter.Parts.resource_drains", "SpaceCenter.Parts.rcs", "SpaceCenter.Parts.reaction_wheels", "SpaceCenter.Parts.resource_converters", "SpaceCenter.Parts.resource_harvesters", "SpaceCenter.Parts.robotic_hinges", "SpaceCenter.Parts.robotic_pistons", "SpaceCenter.Parts.robotic_rotations", "SpaceCenter.Parts.robotic_rotors", "SpaceCenter.Parts.sensors", "SpaceCenter.Parts.solar_panels", "SpaceCenter.Parts.wheels", "part", "SpaceCenter.Part", "SpaceCenter.Part.name", "SpaceCenter.Part.title", "SpaceCenter.Part.tag", "SpaceCenter.Part.flag_url", "SpaceCenter.Part.highlighted", "SpaceCenter.Part.highlight_color", "SpaceCenter.Part.cost", "SpaceCenter.Part.vessel", "SpaceCenter.Part.parent", "SpaceCenter.Part.children", "SpaceCenter.Part.axially_attached", "SpaceCenter.Part.radially_attached", "SpaceCenter.Part.stage", "SpaceCenter.Part.decouple_stage", "SpaceCenter.Part.massless", "SpaceCenter.Part.mass", "SpaceCenter.Part.dry_mass", "SpaceCenter.Part.shielded", "SpaceCenter.Part.dynamic_pressure", "SpaceCenter.Part.impact_tolerance", "SpaceCenter.Part.temperature", "SpaceCenter.Part.skin_temperature", "SpaceCenter.Part.max_temperature", "SpaceCenter.Part.max_skin_temperature", "SpaceCenter.Part.thermal_mass", "SpaceCenter.Part.thermal_skin_mass", "SpaceCenter.Part.thermal_resource_mass", "SpaceCenter.Part.thermal_conduction_flux", "SpaceCenter.Part.thermal_convection_flux", "SpaceCenter.Part.thermal_radiation_flux", "SpaceCenter.Part.thermal_internal_flux", "SpaceCenter.Part.thermal_skin_to_internal_flux", "SpaceCenter.Part.available_seats", "SpaceCenter.Part.resources", "SpaceCenter.Part.crossfeed", "SpaceCenter.Part.is_fuel_line", "SpaceCenter.Part.fuel_lines_from", "SpaceCenter.Part.fuel_lines_to", "SpaceCenter.Part.modules", "SpaceCenter.Part.antenna", "SpaceCenter.Part.cargo_bay", "SpaceCenter.Part.control_surface", "SpaceCenter.Part.decoupler", "SpaceCenter.Part.docking_port", "SpaceCenter.Part.engine", "SpaceCenter.Part.experiment", "SpaceCenter.Part.experiments", "SpaceCenter.Part.fairing", "SpaceCenter.Part.intake", "SpaceCenter.Part.leg", "SpaceCenter.Part.launch_clamp", "SpaceCenter.Part.light", "SpaceCenter.Part.parachute", "SpaceCenter.Part.radiator", "SpaceCenter.Part.resource_drain", "SpaceCenter.Part.rcs", "SpaceCenter.Part.reaction_wheel", "SpaceCenter.Part.resource_converter", "SpaceCenter.Part.resource_harvester", "SpaceCenter.Part.robotic_controller", "SpaceCenter.Part.robotic_hinge", "SpaceCenter.Part.robotic_piston", "SpaceCenter.Part.robotic_rotation", "SpaceCenter.Part.robotic_rotor", "SpaceCenter.Part.sensor", "SpaceCenter.Part.solar_panel", "SpaceCenter.Part.wheel", "SpaceCenter.Part.position", "SpaceCenter.Part.center_of_mass", "SpaceCenter.Part.bounding_box", "SpaceCenter.Part.direction", "SpaceCenter.Part.velocity", "SpaceCenter.Part.rotation", "SpaceCenter.Part.moment_of_inertia", "SpaceCenter.Part.inertia_tensor", "SpaceCenter.Part.reference_frame", "id4", "SpaceCenter.Part.center_of_mass_reference_frame", "SpaceCenter.Part.add_force", "SpaceCenter.Part.instantaneous_force", "SpaceCenter.Part.glow", "SpaceCenter.Part.auto_strut_mode", "SpaceCenter.AutoStrutMode", "SpaceCenter.AutoStrutMode.off", "SpaceCenter.AutoStrutMode.root", "SpaceCenter.AutoStrutMode.heaviest", "SpaceCenter.AutoStrutMode.grandparent", "SpaceCenter.AutoStrutMode.force_root", "SpaceCenter.AutoStrutMode.force_heaviest", "SpaceCenter.AutoStrutMode.force_grandparent", "SpaceCenter.Force", "SpaceCenter.Force.part", "SpaceCenter.Force.force_vector", "SpaceCenter.Force.position", "SpaceCenter.Force.reference_frame", "SpaceCenter.Force.remove", "module", "SpaceCenter.Module", "SpaceCenter.Module.name", "SpaceCenter.Module.part", "SpaceCenter.Module.fields", "SpaceCenter.Module.fields_by_id", "SpaceCenter.Module.has_field", "SpaceCenter.Module.has_field_with_id", "SpaceCenter.Module.get_field", "SpaceCenter.Module.get_field_by_id", "SpaceCenter.Module.set_field_int", "SpaceCenter.Module.set_field_int_by_id", "SpaceCenter.Module.set_field_float", "SpaceCenter.Module.set_field_float_by_id", "SpaceCenter.Module.set_field_string", "SpaceCenter.Module.set_field_string_by_id", "SpaceCenter.Module.set_field_bool", "SpaceCenter.Module.set_field_bool_by_id", "SpaceCenter.Module.reset_field", "SpaceCenter.Module.reset_field_by_id", "SpaceCenter.Module.events", "SpaceCenter.Module.events_by_id", "SpaceCenter.Module.has_event", "SpaceCenter.Module.has_event_with_id", "SpaceCenter.Module.trigger_event", "SpaceCenter.Module.trigger_event_by_id", "SpaceCenter.Module.actions", "SpaceCenter.Module.actions_by_id", "SpaceCenter.Module.has_action", "SpaceCenter.Module.has_action_with_id", "SpaceCenter.Module.set_action", "SpaceCenter.Module.set_action_by_id", "specific-types-of-part", "antenna", "SpaceCenter.Antenna", "SpaceCenter.Antenna.part", "SpaceCenter.Antenna.state", "SpaceCenter.Antenna.deployable", "SpaceCenter.Antenna.deployed", "SpaceCenter.Antenna.can_transmit", "SpaceCenter.Antenna.transmit", "SpaceCenter.Antenna.cancel", "SpaceCenter.Antenna.allow_partial", "SpaceCenter.Antenna.power", "SpaceCenter.Antenna.combinable", "SpaceCenter.Antenna.combinable_exponent", "SpaceCenter.Antenna.packet_interval", "SpaceCenter.Antenna.packet_size", "SpaceCenter.Antenna.packet_resource_cost", "SpaceCenter.AntennaState", "SpaceCenter.AntennaState.deployed", "SpaceCenter.AntennaState.retracted", "SpaceCenter.AntennaState.deploying", "SpaceCenter.AntennaState.retracting", "SpaceCenter.AntennaState.broken", "cargo-bay", "SpaceCenter.CargoBay", "SpaceCenter.CargoBay.part", "SpaceCenter.CargoBay.state", "SpaceCenter.CargoBay.open", "SpaceCenter.CargoBayState", "SpaceCenter.CargoBayState.open", "SpaceCenter.CargoBayState.closed", "SpaceCenter.CargoBayState.opening", "SpaceCenter.CargoBayState.closing", "control-surface", "SpaceCenter.ControlSurface", "SpaceCenter.ControlSurface.part", "SpaceCenter.ControlSurface.pitch_enabled", "SpaceCenter.ControlSurface.yaw_enabled", "SpaceCenter.ControlSurface.roll_enabled", "SpaceCenter.ControlSurface.authority_limiter", "SpaceCenter.ControlSurface.inverted", "SpaceCenter.ControlSurface.deployed", "SpaceCenter.ControlSurface.surface_area", "SpaceCenter.ControlSurface.available_torque", "decoupler", "SpaceCenter.Decoupler", "SpaceCenter.Decoupler.part", "SpaceCenter.Decoupler.decouple", "SpaceCenter.Decoupler.decoupled", "SpaceCenter.Decoupler.staged", "SpaceCenter.Decoupler.impulse", "SpaceCenter.Decoupler.is_omni_decoupler", "SpaceCenter.Decoupler.attached_part", "docking-port", "SpaceCenter.DockingPort", "SpaceCenter.DockingPort.part", "SpaceCenter.DockingPort.state", "SpaceCenter.DockingPort.docked_part", "SpaceCenter.DockingPort.undock", "SpaceCenter.DockingPort.reengage_distance", "SpaceCenter.DockingPort.has_shield", "SpaceCenter.DockingPort.shielded", "SpaceCenter.DockingPort.can_rotate", "SpaceCenter.DockingPort.maximum_rotation", "SpaceCenter.DockingPort.minimum_rotation", "SpaceCenter.DockingPort.rotation_target", "SpaceCenter.DockingPort.rotation_locked", "SpaceCenter.DockingPort.position", "SpaceCenter.DockingPort.direction", "SpaceCenter.DockingPort.rotation", "SpaceCenter.DockingPort.reference_frame", "id5", "id6", "SpaceCenter.DockingPortState", "SpaceCenter.DockingPortState.ready", "SpaceCenter.DockingPortState.docked", "SpaceCenter.DockingPortState.docking", "SpaceCenter.DockingPortState.undocking", "SpaceCenter.DockingPortState.shielded", "SpaceCenter.DockingPortState.moving", "engine", "SpaceCenter.Engine", "SpaceCenter.Engine.part", "SpaceCenter.Engine.active", "SpaceCenter.Engine.thrust", "SpaceCenter.Engine.available_thrust", "SpaceCenter.Engine.available_thrust_at", "SpaceCenter.Engine.max_thrust", "SpaceCenter.Engine.max_thrust_at", "SpaceCenter.Engine.max_vacuum_thrust", "SpaceCenter.Engine.thrust_limit", "SpaceCenter.Engine.thrusters", "SpaceCenter.Engine.specific_impulse", "SpaceCenter.Engine.specific_impulse_at", "SpaceCenter.Engine.vacuum_specific_impulse", "SpaceCenter.Engine.kerbin_sea_level_specific_impulse", "SpaceCenter.Engine.propellant_names", "SpaceCenter.Engine.propellant_ratios", "SpaceCenter.Engine.propellants", "SpaceCenter.Engine.has_fuel", "SpaceCenter.Engine.throttle", "SpaceCenter.Engine.throttle_locked", "SpaceCenter.Engine.independent_throttle", "SpaceCenter.Engine.can_restart", "SpaceCenter.Engine.can_shutdown", "SpaceCenter.Engine.has_modes", "SpaceCenter.Engine.mode", "SpaceCenter.Engine.modes", "SpaceCenter.Engine.toggle_mode", "SpaceCenter.Engine.auto_mode_switch", "SpaceCenter.Engine.gimballed", "SpaceCenter.Engine.gimbal_range", "SpaceCenter.Engine.gimbal_locked", "SpaceCenter.Engine.gimbal_limit", "SpaceCenter.Engine.available_torque", "SpaceCenter.Propellant", "SpaceCenter.Propellant.name", "SpaceCenter.Propellant.current_amount", "SpaceCenter.Propellant.current_requirement", "SpaceCenter.Propellant.total_resource_available", "SpaceCenter.Propellant.total_resource_capacity", "SpaceCenter.Propellant.ignore_for_isp", "SpaceCenter.Propellant.ignore_for_thrust_curve", "SpaceCenter.Propellant.draw_stack_gauge", "SpaceCenter.Propellant.is_deprived", "SpaceCenter.Propellant.ratio", "experiment", "SpaceCenter.Experiment", "SpaceCenter.Experiment.part", "SpaceCenter.Experiment.name", "SpaceCenter.Experiment.title", "SpaceCenter.Experiment.run", "SpaceCenter.Experiment.transmit", "SpaceCenter.Experiment.dump", "SpaceCenter.Experiment.reset", "SpaceCenter.Experiment.deployed", "SpaceCenter.Experiment.rerunnable", "SpaceCenter.Experiment.inoperable", "SpaceCenter.Experiment.has_data", "SpaceCenter.Experiment.data", "SpaceCenter.Experiment.biome", "SpaceCenter.Experiment.available", "SpaceCenter.Experiment.science_subject", "SpaceCenter.ScienceData", "SpaceCenter.ScienceData.data_amount", "SpaceCenter.ScienceData.science_value", "SpaceCenter.ScienceData.transmit_value", "SpaceCenter.ScienceSubject", "SpaceCenter.ScienceSubject.title", "SpaceCenter.ScienceSubject.is_complete", "SpaceCenter.ScienceSubject.science", "SpaceCenter.ScienceSubject.science_cap", "SpaceCenter.ScienceSubject.data_scale", "SpaceCenter.ScienceSubject.subject_value", "SpaceCenter.ScienceSubject.scientific_value", "fairing", "SpaceCenter.Fairing", "SpaceCenter.Fairing.part", "SpaceCenter.Fairing.jettison", "SpaceCenter.Fairing.jettisoned", "intake", "SpaceCenter.Intake", "SpaceCenter.Intake.part", "SpaceCenter.Intake.open", "SpaceCenter.Intake.speed", "SpaceCenter.Intake.flow", "SpaceCenter.Intake.area", "leg", "SpaceCenter.Leg", "SpaceCenter.Leg.part", "SpaceCenter.Leg.state", "SpaceCenter.Leg.deployable", "SpaceCenter.Leg.deployed", "SpaceCenter.Leg.is_grounded", "SpaceCenter.LegState", "SpaceCenter.LegState.deployed", "SpaceCenter.LegState.retracted", "SpaceCenter.LegState.deploying", "SpaceCenter.LegState.retracting", "SpaceCenter.LegState.broken", "launch-clamp", "SpaceCenter.LaunchClamp", "SpaceCenter.LaunchClamp.part", "SpaceCenter.LaunchClamp.release", "light", "SpaceCenter.Light", "SpaceCenter.Light.part", "SpaceCenter.Light.active", "SpaceCenter.Light.color", "SpaceCenter.Light.blink", "SpaceCenter.Light.blink_rate", "SpaceCenter.Light.power_usage", "parachute", "SpaceCenter.Parachute", "SpaceCenter.Parachute.part", "SpaceCenter.Parachute.deploy", "SpaceCenter.Parachute.deployed", "SpaceCenter.Parachute.arm", "SpaceCenter.Parachute.armed", "SpaceCenter.Parachute.cut", "SpaceCenter.Parachute.state", "SpaceCenter.Parachute.deploy_altitude", "SpaceCenter.Parachute.deploy_min_pressure", "SpaceCenter.ParachuteState", "SpaceCenter.ParachuteState.stowed", "SpaceCenter.ParachuteState.armed", "SpaceCenter.ParachuteState.semi_deployed", "SpaceCenter.ParachuteState.deployed", "SpaceCenter.ParachuteState.cut", "radiator", "SpaceCenter.Radiator", "SpaceCenter.Radiator.part", "SpaceCenter.Radiator.deployable", "SpaceCenter.Radiator.deployed", "SpaceCenter.Radiator.state", "SpaceCenter.RadiatorState", "SpaceCenter.RadiatorState.extended", "SpaceCenter.RadiatorState.retracted", "SpaceCenter.RadiatorState.extending", "SpaceCenter.RadiatorState.retracting", "SpaceCenter.RadiatorState.broken", "resource-converter", "SpaceCenter.ResourceConverter", "SpaceCenter.ResourceConverter.part", "SpaceCenter.ResourceConverter.count", "SpaceCenter.ResourceConverter.name", "SpaceCenter.ResourceConverter.active", "SpaceCenter.ResourceConverter.start", "SpaceCenter.ResourceConverter.stop", "SpaceCenter.ResourceConverter.state", "SpaceCenter.ResourceConverter.status_info", "SpaceCenter.ResourceConverter.inputs", "SpaceCenter.ResourceConverter.outputs", "SpaceCenter.ResourceConverter.optimum_core_temperature", "SpaceCenter.ResourceConverter.core_temperature", "SpaceCenter.ResourceConverter.thermal_efficiency", "SpaceCenter.ResourceConverterState", "SpaceCenter.ResourceConverterState.running", "SpaceCenter.ResourceConverterState.idle", "SpaceCenter.ResourceConverterState.missing_resource", "SpaceCenter.ResourceConverterState.storage_full", "SpaceCenter.ResourceConverterState.capacity", "SpaceCenter.ResourceConverterState.unknown", "resource-harvester", "SpaceCenter.ResourceHarvester", "SpaceCenter.ResourceHarvester.part", "SpaceCenter.ResourceHarvester.state", "SpaceCenter.ResourceHarvester.deployed", "SpaceCenter.ResourceHarvester.active", "SpaceCenter.ResourceHarvester.extraction_rate", "SpaceCenter.ResourceHarvester.thermal_efficiency", "SpaceCenter.ResourceHarvester.core_temperature", "SpaceCenter.ResourceHarvester.optimum_core_temperature", "SpaceCenter.ResourceHarvesterState", "SpaceCenter.ResourceHarvesterState.deploying", "SpaceCenter.ResourceHarvesterState.deployed", "SpaceCenter.ResourceHarvesterState.retracting", "SpaceCenter.ResourceHarvesterState.retracted", "SpaceCenter.ResourceHarvesterState.active", "reaction-wheel", "SpaceCenter.ReactionWheel", "SpaceCenter.ReactionWheel.part", "SpaceCenter.ReactionWheel.active", "SpaceCenter.ReactionWheel.broken", "SpaceCenter.ReactionWheel.available_torque", "SpaceCenter.ReactionWheel.max_torque", "resource-drain", "SpaceCenter.ResourceDrain", "SpaceCenter.ResourceDrain.part", "SpaceCenter.ResourceDrain.available_resources", "SpaceCenter.ResourceDrain.set_resource", "SpaceCenter.ResourceDrain.check_resource", "SpaceCenter.ResourceDrain.drain_mode", "SpaceCenter.ResourceDrain.min_rate", "SpaceCenter.ResourceDrain.max_rate", "SpaceCenter.ResourceDrain.rate", "SpaceCenter.ResourceDrain.start", "SpaceCenter.ResourceDrain.stop", "SpaceCenter.DrainMode", "SpaceCenter.DrainMode.part", "SpaceCenter.DrainMode.vessel", "robotic-controller", "SpaceCenter.RoboticController", "SpaceCenter.RoboticController.part", "SpaceCenter.RoboticController.has_part", "SpaceCenter.RoboticController.axes", "SpaceCenter.RoboticController.add_axis", "SpaceCenter.RoboticController.add_key_frame", "SpaceCenter.RoboticController.clear_axis", "robotic-hinge", "SpaceCenter.RoboticHinge", "SpaceCenter.RoboticHinge.part", "SpaceCenter.RoboticHinge.target_angle", "SpaceCenter.RoboticHinge.current_angle", "SpaceCenter.RoboticHinge.rate", "SpaceCenter.RoboticHinge.damping", "SpaceCenter.RoboticHinge.locked", "SpaceCenter.RoboticHinge.motor_engaged", "SpaceCenter.RoboticHinge.move_home", "robotic-piston", "SpaceCenter.RoboticPiston", "SpaceCenter.RoboticPiston.part", "SpaceCenter.RoboticPiston.target_extension", "SpaceCenter.RoboticPiston.current_extension", "SpaceCenter.RoboticPiston.rate", "SpaceCenter.RoboticPiston.damping", "SpaceCenter.RoboticPiston.locked", "SpaceCenter.RoboticPiston.motor_engaged", "SpaceCenter.RoboticPiston.move_home", "robotic-rotation", "SpaceCenter.RoboticRotation", "SpaceCenter.RoboticRotation.part", "SpaceCenter.RoboticRotation.target_angle", "SpaceCenter.RoboticRotation.current_angle", "SpaceCenter.RoboticRotation.rate", "SpaceCenter.RoboticRotation.damping", "SpaceCenter.RoboticRotation.locked", "SpaceCenter.RoboticRotation.motor_engaged", "SpaceCenter.RoboticRotation.move_home", "robotic-rotor", "SpaceCenter.RoboticRotor", "SpaceCenter.RoboticRotor.part", "SpaceCenter.RoboticRotor.target_rpm", "SpaceCenter.RoboticRotor.current_rpm", "SpaceCenter.RoboticRotor.inverted", "SpaceCenter.RoboticRotor.torque_limit", "SpaceCenter.RoboticRotor.locked", "SpaceCenter.RoboticRotor.motor_engaged", "rcs", "SpaceCenter.RCS", "SpaceCenter.RCS.part", "SpaceCenter.RCS.active", "SpaceCenter.RCS.enabled", "SpaceCenter.RCS.pitch_enabled", "SpaceCenter.RCS.yaw_enabled", "SpaceCenter.RCS.roll_enabled", "SpaceCenter.RCS.forward_enabled", "SpaceCenter.RCS.up_enabled", "SpaceCenter.RCS.right_enabled", "SpaceCenter.RCS.available_torque", "SpaceCenter.RCS.available_force", "SpaceCenter.RCS.available_thrust", "SpaceCenter.RCS.max_thrust", "SpaceCenter.RCS.max_vacuum_thrust", "SpaceCenter.RCS.thrust_limit", "SpaceCenter.RCS.thrusters", "SpaceCenter.RCS.specific_impulse", "SpaceCenter.RCS.vacuum_specific_impulse", "SpaceCenter.RCS.kerbin_sea_level_specific_impulse", "SpaceCenter.RCS.propellants", "SpaceCenter.RCS.propellant_ratios", "SpaceCenter.RCS.has_fuel", "sensor", "SpaceCenter.Sensor", "SpaceCenter.Sensor.part", "SpaceCenter.Sensor.active", "SpaceCenter.Sensor.value", "solar-panel", "SpaceCenter.SolarPanel", "SpaceCenter.SolarPanel.part", "SpaceCenter.SolarPanel.deployable", "SpaceCenter.SolarPanel.deployed", "SpaceCenter.SolarPanel.state", "SpaceCenter.SolarPanel.energy_flow", "SpaceCenter.SolarPanel.sun_exposure", "SpaceCenter.SolarPanelState", "SpaceCenter.SolarPanelState.extended", "SpaceCenter.SolarPanelState.retracted", "SpaceCenter.SolarPanelState.extending", "SpaceCenter.SolarPanelState.retracting", "SpaceCenter.SolarPanelState.broken", "thruster", "SpaceCenter.Thruster", "SpaceCenter.Thruster.part", "SpaceCenter.Thruster.thrust_position", "SpaceCenter.Thruster.thrust_direction", "SpaceCenter.Thruster.thrust_reference_frame", "SpaceCenter.Thruster.gimballed", "SpaceCenter.Thruster.gimbal_position", "SpaceCenter.Thruster.gimbal_angle", "SpaceCenter.Thruster.initial_thrust_position", "SpaceCenter.Thruster.initial_thrust_direction", "wheel", "SpaceCenter.Wheel", "SpaceCenter.Wheel.part", "SpaceCenter.Wheel.state", "SpaceCenter.Wheel.radius", "SpaceCenter.Wheel.grounded", "SpaceCenter.Wheel.has_brakes", "SpaceCenter.Wheel.brakes", "SpaceCenter.Wheel.auto_friction_control", "SpaceCenter.Wheel.manual_friction_control", "SpaceCenter.Wheel.deployable", "SpaceCenter.Wheel.deployed", "SpaceCenter.Wheel.powered", "SpaceCenter.Wheel.motor_enabled", "SpaceCenter.Wheel.motor_inverted", "SpaceCenter.Wheel.motor_state", "SpaceCenter.Wheel.motor_output", "SpaceCenter.Wheel.traction_control_enabled", "SpaceCenter.Wheel.traction_control", "SpaceCenter.Wheel.drive_limiter", "SpaceCenter.Wheel.steerable", "SpaceCenter.Wheel.steering_enabled", "SpaceCenter.Wheel.steering_inverted", "SpaceCenter.Wheel.steering_angle_limit", "SpaceCenter.Wheel.steering_response_time", "SpaceCenter.Wheel.has_suspension", "SpaceCenter.Wheel.suspension_spring_strength", "SpaceCenter.Wheel.suspension_damper_strength", "SpaceCenter.Wheel.broken", "SpaceCenter.Wheel.repairable", "SpaceCenter.Wheel.stress", "SpaceCenter.Wheel.stress_tolerance", "SpaceCenter.Wheel.stress_percentage", "SpaceCenter.Wheel.deflection", "SpaceCenter.Wheel.slip", "SpaceCenter.WheelState", "SpaceCenter.WheelState.deployed", "SpaceCenter.WheelState.retracted", "SpaceCenter.WheelState.deploying", "SpaceCenter.WheelState.retracting", "SpaceCenter.WheelState.broken", "SpaceCenter.MotorState", "SpaceCenter.MotorState.idle", "SpaceCenter.MotorState.running", "SpaceCenter.MotorState.disabled", "SpaceCenter.MotorState.inoperable", "SpaceCenter.MotorState.not_enough_resources", "trees-of-parts", "python-api-parts-trees-of-parts", "id7", "id8", "traversing-the-tree", "attachment-modes", "python-api-parts-attachment-modes", "fuel-lines", "python-api-parts-fuel-lines", "id9", "id10", "staging", "python-api-parts-staging", "id11", "id12", "id13"], "content_text": "Parts\n¶\nThe following classes allow interaction with a vessels individual parts.\nParts\n¶\nclass\nParts\n¶\nInstances of this class are used to interact with the parts of a vessel.\nAn instance can be obtained by calling\nVessel.parts\n.\nall\n¶\nA list of all of the vessels parts.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nPart\n)\nroot\n¶\nThe vessels root part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nNote\nSee the discussion on\nTrees of Parts\n.\ncontrolling\n¶\nThe part from which the vessel is controlled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nPart\nwith_name\n(\nname\n)\n¶\nA list of parts whose\nPart.name\nis\nname\n.\nParameters\n:\nname\n(\nstr\n) –\nReturn type\n:\nlist(\nPart\n)\nwith_title\n(\ntitle\n)\n¶\nA list of all parts whose\nPart.title\nis\ntitle\n.\nParameters\n:\ntitle\n(\nstr\n) –\nReturn type\n:\nlist(\nPart\n)\nwith_tag\n(\ntag\n)\n¶\nA list of all parts whose\nPart.tag\nis\ntag\n.\nParameters\n:\ntag\n(\nstr\n) –\nReturn type\n:\nlist(\nPart\n)\nwith_module\n(\nmodule_name\n)\n¶\nA list of all parts that contain a\nModule\nwhose\nModule.name\nis\nmodule_name\n.\nParameters\n:\nmodule_name\n(\nstr\n) –\nReturn type\n:\nlist(\nPart\n)\nin_stage\n(\nstage\n)\n¶\nA list of all parts that are activated in the given\nstage\n.\nParameters\n:\nstage\n(\nint\n) –\nReturn type\n:\nlist(\nPart\n)\nNote\nSee the discussion on\nStaging\n.\nin_decouple_stage\n(\nstage\n)\n¶\nA list of all parts that are decoupled in the given\nstage\n.\nParameters\n:\nstage\n(\nint\n) –\nReturn type\n:\nlist(\nPart\n)\nNote\nSee the discussion on\nStaging\n.\nmodules_with_name\n(\nmodule_name\n)\n¶\nA list of modules (combined across all parts in the vessel) whose\nModule.name\nis\nmodule_name\n.\nParameters\n:\nmodule_name\n(\nstr\n) –\nReturn type\n:\nlist(\nModule\n)\nantennas\n¶\nA list of all antennas in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nAntenna\n)\nNote\nIf RemoteTech is installed, this will always return an empty list.\nTo interact with RemoteTech antennas, use the RemoteTech service APIs.\ncargo_bays\n¶\nA list of all cargo bays in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nCargoBay\n)\ncontrol_surfaces\n¶\nA list of all control surfaces in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nControlSurface\n)\ndecouplers\n¶\nA list of all decouplers in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nDecoupler\n)\ndocking_ports\n¶\nA list of all docking ports in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nDockingPort\n)\nengines\n¶\nA list of all engines in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nEngine\n)\nNote\nThis includes any part that generates thrust. This covers many different types\nof engine, including liquid fuel rockets, solid rocket boosters, jet engines and\nRCS thrusters.\nexperiments\n¶\nA list of all science experiments in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nExperiment\n)\nfairings\n¶\nA list of all fairings in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nFairing\n)\nintakes\n¶\nA list of all intakes in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nIntake\n)\nlegs\n¶\nA list of all landing legs attached to the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nLeg\n)\nlaunch_clamps\n¶\nA list of all launch clamps attached to the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nLaunchClamp\n)\nlights\n¶\nA list of all lights in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nLight\n)\nparachutes\n¶\nA list of all parachutes in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nParachute\n)\nradiators\n¶\nA list of all radiators in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nRadiator\n)\nresource_drains\n¶\nA list of all resource drains in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nResourceDrain\n)\nrcs\n¶\nA list of all RCS blocks/thrusters in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nRCS\n)\nreaction_wheels\n¶\nA list of all reaction wheels in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nReactionWheel\n)\nresource_converters\n¶\nA list of all resource converters in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nResourceConverter\n)\nresource_harvesters\n¶\nA list of all resource harvesters in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nResourceHarvester\n)\nrobotic_hinges\n¶\nA list of all robotic hinges in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nRoboticHinge\n)\nrobotic_pistons\n¶\nA list of all robotic pistons in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nRoboticPiston\n)\nrobotic_rotations\n¶\nA list of all robotic rotations in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nRoboticRotation\n)\nrobotic_rotors\n¶\nA list of all robotic rotors in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nRoboticRotor\n)\nsensors\n¶\nA list of all sensors in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nSensor\n)\nsolar_panels\n¶\nA list of all solar panels in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nSolarPanel\n)\nwheels\n¶\nA list of all wheels in the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nWheel\n)\nPart\n¶\nclass\nPart\n¶\nRepresents an individual part. Vessels are made up of multiple parts.\nInstances of this class can be obtained by several methods in\nParts\n.\nname\n¶\nInternal name of the part, as used in\npart cfg files\n.\nFor example “Mark1-2Pod”.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ntitle\n¶\nTitle of the part, as shown when the part is right clicked in-game. For example “Mk1-2 Command Pod”.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ntag\n¶\nThe name tag for the part. Can be set to a custom string using the\nin-game user interface.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nNote\nThis string is shared with\nkOS\nif it is installed.\nflag_url\n¶\nThe asset URL for the part’s flag.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nhighlighted\n¶\nWhether the part is highlighted.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nhighlight_color\n¶\nThe color used to highlight the part, as an RGB triple.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\ncost\n¶\nThe cost of the part, in units of funds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nvessel\n¶\nThe vessel that contains this part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nVessel\nparent\n¶\nThe parts parent. Returns\nNone\nif the part does not have a parent.\nThis, in combination with\nPart.children\n, can be used to traverse the vessels\nparts tree.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nNote\nSee the discussion on\nTrees of Parts\n.\nchildren\n¶\nThe parts children. Returns an empty list if the part has no children.\nThis, in combination with\nPart.parent\n, can be used to traverse the vessels\nparts tree.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nPart\n)\nNote\nSee the discussion on\nTrees of Parts\n.\naxially_attached\n¶\nWhether the part is axially attached to its parent, i.e. on the top\nor bottom of its parent. If the part has no parent, returns\nFalse\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nNote\nSee the discussion on\nAttachment Modes\n.\nradially_attached\n¶\nWhether the part is radially attached to its parent, i.e. on the side of its parent.\nIf the part has no parent, returns\nFalse\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nNote\nSee the discussion on\nAttachment Modes\n.\nstage\n¶\nThe stage in which this part will be activated. Returns -1 if the part is not\nactivated by staging.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\nNote\nSee the discussion on\nStaging\n.\ndecouple_stage\n¶\nThe stage in which this part will be decoupled. Returns -1 if the part is never\ndecoupled from the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\nNote\nSee the discussion on\nStaging\n.\nmassless\n¶\nWhether the part is\nmassless\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nmass\n¶\nThe current mass of the part, including resources it contains, in kilograms.\nReturns zero if the part is massless.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ndry_mass\n¶\nThe mass of the part, not including any resources it contains, in kilograms.\nReturns zero if the part is massless.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nshielded\n¶\nWhether the part is shielded from the exterior of the vessel, for example by a fairing.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndynamic_pressure\n¶\nThe dynamic pressure acting on the part, in Pascals.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nimpact_tolerance\n¶\nThe impact tolerance of the part, in meters per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntemperature\n¶\nTemperature of the part, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nskin_temperature\n¶\nTemperature of the skin of the part, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmax_temperature\n¶\nMaximum temperature that the part can survive, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmax_skin_temperature\n¶\nMaximum temperature that the skin of the part can survive, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_mass\n¶\nA measure of how much energy it takes to increase the internal temperature of the part,\nin Joules per Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_skin_mass\n¶\nA measure of how much energy it takes to increase the skin temperature of the part,\nin Joules per Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_resource_mass\n¶\nA measure of how much energy it takes to increase the temperature of the resources\ncontained in the part, in Joules per Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_conduction_flux\n¶\nThe rate at which heat energy is conducting into or out of the part via contact with\nother parts. Measured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is\nlosing heat energy.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_convection_flux\n¶\nThe rate at which heat energy is convecting into or out of the part from the\nsurrounding atmosphere. Measured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is\nlosing heat energy.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_radiation_flux\n¶\nThe rate at which heat energy is radiating into or out of the part from the surrounding\nenvironment. Measured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is\nlosing heat energy.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_internal_flux\n¶\nThe rate at which heat energy is begin generated by the part.\nFor example, some engines generate heat by combusting fuel.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing\nheat energy.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_skin_to_internal_flux\n¶\nThe rate at which heat energy is transferring between the part’s skin and its internals.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part’s internals are gaining heat energy,\nand negative means its skin is gaining heat energy.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\navailable_seats\n¶\nHow many open seats the part has.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\nresources\n¶\nA\nResources\nobject for the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nResources\ncrossfeed\n¶\nWhether this part is crossfeed capable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nis_fuel_line\n¶\nWhether this part is a fuel line.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nfuel_lines_from\n¶\nThe parts that are connected to this part via fuel lines, where the direction of the\nfuel line is into this part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nPart\n)\nNote\nSee the discussion on\nFuel Lines\n.\nfuel_lines_to\n¶\nThe parts that are connected to this part via fuel lines, where the direction of the\nfuel line is out of this part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nPart\n)\nNote\nSee the discussion on\nFuel Lines\n.\nmodules\n¶\nThe modules for this part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nModule\n)\nantenna\n¶\nAn\nAntenna\nif the part is an antenna, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nAntenna\nNote\nIf RemoteTech is installed, this will always return\nNone\n.\nTo interact with RemoteTech antennas, use the RemoteTech service APIs.\ncargo_bay\n¶\nA\nCargoBay\nif the part is a cargo bay, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCargoBay\ncontrol_surface\n¶\nA\nControlSurface\nif the part is an aerodynamic control surface,\notherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nControlSurface\ndecoupler\n¶\nA\nDecoupler\nif the part is a decoupler, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nDecoupler\ndocking_port\n¶\nA\nDockingPort\nif the part is a docking port, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nDockingPort\nengine\n¶\nAn\nEngine\nif the part is an engine, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nEngine\nexperiment\n¶\nAn\nExperiment\nif the part contains a\nsingle science experiment, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nExperiment\nNote\nThrows an exception if the part contains more than one experiment.\nIn that case, use\nPart.experiments\nto get the list of experiments in the part.\nexperiments\n¶\nA list of\nExperiment\nobjects that the part contains.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nExperiment\n)\nfairing\n¶\nA\nFairing\nif the part is a fairing, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nFairing\nintake\n¶\nAn\nIntake\nif the part is an intake, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nIntake\nNote\nThis includes any part that generates thrust. This covers many different types\nof engine, including liquid fuel rockets, solid rocket boosters and jet engines.\nFor RCS thrusters see\nRCS\n.\nleg\n¶\nA\nLeg\nif the part is a landing leg, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nLeg\nlaunch_clamp\n¶\nA\nLaunchClamp\nif the part is a launch clamp, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nLaunchClamp\nlight\n¶\nA\nLight\nif the part is a light, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nLight\nparachute\n¶\nA\nParachute\nif the part is a parachute, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nParachute\nradiator\n¶\nA\nRadiator\nif the part is a radiator, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRadiator\nresource_drain\n¶\nA\nResourceDrain\nif the part is a resource drain, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nResourceDrain\nrcs\n¶\nA\nRCS\nif the part is an RCS block/thruster, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRCS\nreaction_wheel\n¶\nA\nReactionWheel\nif the part is a reaction wheel, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReactionWheel\nresource_converter\n¶\nA\nResourceConverter\nif the part is a resource converter,\notherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nResourceConverter\nresource_harvester\n¶\nA\nResourceHarvester\nif the part is a resource harvester,\notherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nResourceHarvester\nrobotic_controller\n¶\nA\nRoboticController\nif the part is a robotic controller,\notherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRoboticController\nrobotic_hinge\n¶\nA\nRoboticHinge\nif the part is a robotic hinge, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRoboticHinge\nrobotic_piston\n¶\nA\nRoboticPiston\nif the part is a robotic piston, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRoboticPiston\nrobotic_rotation\n¶\nA\nRoboticRotation\nif the part is a robotic rotation servo, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRoboticRotation\nrobotic_rotor\n¶\nA\nRoboticRotor\nif the part is a robotic rotor, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRoboticRotor\nsensor\n¶\nA\nSensor\nif the part is a sensor, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSensor\nsolar_panel\n¶\nA\nSolarPanel\nif the part is a solar panel, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSolarPanel\nwheel\n¶\nA\nWheel\nif the part is a wheel, otherwise\nNone\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nWheel\nposition\n(\nreference_frame\n)\n¶\nThe position of the part in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nNote\nThis is a fixed position in the part, defined by the parts model.\nIt s not necessarily the same as the parts center of mass.\nUse\nPart.center_of_mass()\nto get the parts center of mass.\ncenter_of_mass\n(\nreference_frame\n)\n¶\nThe position of the parts center of mass in the given reference frame.\nIf the part is physicsless, this is equivalent to\nPart.position()\n.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nbounding_box\n(\nreference_frame\n)\n¶\nThe axis-aligned bounding box of the part in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vectors are in.\nReturns\n:\nThe positions of the minimum and maximum vertices of the box, as position vectors.\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nNote\nThis is computed from the collision mesh of the part.\nIf the part is not collidable, the box has zero volume and is centered on\nthe\nPart.position()\nof the part.\ndirection\n(\nreference_frame\n)\n¶\nThe direction the part points in, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nvelocity\n(\nreference_frame\n)\n¶\nThe linear velocity of the part in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned velocity vector is in.\nReturns\n:\nThe velocity as a vector. The vector points in the direction of travel, and its magnitude is the speed of the body in meters per second.\nReturn type\n:\ntuple(float, float, float)\nrotation\n(\nreference_frame\n)\n¶\nThe rotation of the part, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned rotation is in.\nReturns\n:\nThe rotation as a quaternion of the form\n\\((x, y, z, w)\\)\n.\nReturn type\n:\ntuple(float, float, float, float)\nmoment_of_inertia\n¶\nThe moment of inertia of the part in\n\\(kg.m^2\\)\naround its center of mass\nin the parts reference frame (\nReferenceFrame\n).\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(float, float, float)\ninertia_tensor\n¶\nThe inertia tensor of the part in the parts reference frame\n(\nReferenceFrame\n).\nReturns the 3x3 matrix as a list of elements, in row-major order.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(float)\nreference_frame\n¶\nThe reference frame that is fixed relative to this part, and centered on a fixed\nposition within the part, defined by the parts model.\nThe origin is at the position of the part, as returned by\nPart.position()\n.\nThe axes rotate with the part.\nThe x, y and z axis directions depend on the design of the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nNote\nFor docking port parts, this reference frame is not necessarily equivalent to the\nreference frame for the docking port, returned by\nDockingPort.reference_frame\n.\nMk1 Command Pod reference frame origin and axes\n¶\ncenter_of_mass_reference_frame\n¶\nThe reference frame that is fixed relative to this part, and centered on its\ncenter of mass.\nThe origin is at the center of mass of the part, as returned by\nPart.center_of_mass()\n.\nThe axes rotate with the part.\nThe x, y and z axis directions depend on the design of the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nNote\nFor docking port parts, this reference frame is not necessarily equivalent to the\nreference frame for the docking port, returned by\nDockingPort.reference_frame\n.\nadd_force\n(\nforce\n,\nposition\n,\nreference_frame\n)\n¶\nExert a constant force on the part, acting at the given position.\nParameters\n:\nforce\n(\ntuple\n) – A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.\nposition\n(\ntuple\n) – The position at which the force acts, as a vector.\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the force and position are in.\nReturns\n:\nAn object that can be used to remove or modify the force.\nReturn type\n:\nForce\ninstantaneous_force\n(\nforce\n,\nposition\n,\nreference_frame\n)\n¶\nExert an instantaneous force on the part, acting at the given position.\nParameters\n:\nforce\n(\ntuple\n) – A vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.\nposition\n(\ntuple\n) – The position at which the force acts, as a vector.\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the force and position are in.\nNote\nThe force is applied instantaneously in a single physics update.\nglow\n¶\nWhether the part is glowing.\nAttribute\n:\nWrite-only, cannot be read\nReturn type\n:\nbool\nauto_strut_mode\n¶\nAuto-strut mode.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nAutoStrutMode\nclass\nAutoStrutMode\n¶\nThe state of an auto-strut.\nPart.auto_strut_mode\noff\n¶\nOff\nroot\n¶\nRoot\nheaviest\n¶\nHeaviest\ngrandparent\n¶\nGrandparent\nforce_root\n¶\nForceRoot\nforce_heaviest\n¶\nForceHeaviest\nforce_grandparent\n¶\nForceGrandparent\nclass\nForce\n¶\nObtained by calling\nPart.add_force()\n.\npart\n¶\nThe part that this force is applied to.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nforce_vector\n¶\nThe force vector, in Newtons.\nAttribute\n:\nCan be read or written\nReturns\n:\nA vector pointing in the direction that the force acts, with its magnitude equal to the strength of the force in Newtons.\nReturn type\n:\ntuple(float, float, float)\nposition\n¶\nThe position at which the force acts, in reference frame\nReferenceFrame\n.\nAttribute\n:\nCan be read or written\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nreference_frame\n¶\nThe reference frame of the force vector and position.\nAttribute\n:\nCan be read or written\nReturn type\n:\nReferenceFrame\nremove\n(\n)\n¶\nRemove the force.\nModule\n¶\nclass\nModule\n¶\nThis can be used to interact with a specific part module. This includes part modules in\nstock KSP, and those added by mods.\nIn KSP, each part has zero or more\nPartModules\nassociated with it. Each one contains some of the functionality of the part.\nFor example, an engine has a “ModuleEngines” part module that contains all the\nfunctionality of an engine.\nname\n¶\nName of the PartModule. For example, “ModuleEngines”.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\npart\n¶\nThe part that contains this module.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nfields\n¶\nThe modules field names and their associated values, as a dictionary.\nThese are the values visible in the right-click menu of the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ndict(str, str)\nNote\nThrows an exception if there is more than one field with the same name.\nIn that case, use\nModule.fields_by_id\nto get the fields by identifier.\nfields_by_id\n¶\nThe modules field identifiers and their associated values, as a dictionary.\nThese are the values visible in the right-click menu of the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ndict(str, str)\nhas_field\n(\nname\n)\n¶\nReturns\nTrue\nif the module has a field with the given name.\nParameters\n:\nname\n(\nstr\n) – Name of the field.\nReturn type\n:\nbool\nhas_field_with_id\n(\nid\n)\n¶\nReturns\nTrue\nif the module has a field with the given identifier.\nParameters\n:\nid\n(\nstr\n) – Identifier of the field.\nReturn type\n:\nbool\nget_field\n(\nname\n)\n¶\nReturns the value of a field with the given name.\nParameters\n:\nname\n(\nstr\n) – Name of the field.\nReturn type\n:\nstr\nget_field_by_id\n(\nid\n)\n¶\nReturns the value of a field with the given identifier.\nParameters\n:\nid\n(\nstr\n) – Identifier of the field.\nReturn type\n:\nstr\nset_field_int\n(\nname\n,\nvalue\n)\n¶\nSet the value of a field to the given integer number.\nParameters\n:\nname\n(\nstr\n) – Name of the field.\nvalue\n(\nint\n) – Value to set.\nset_field_int_by_id\n(\nid\n,\nvalue\n)\n¶\nSet the value of a field to the given integer number.\nParameters\n:\nid\n(\nstr\n) – Identifier of the field.\nvalue\n(\nint\n) – Value to set.\nset_field_float\n(\nname\n,\nvalue\n)\n¶\nSet the value of a field to the given floating point number.\nParameters\n:\nname\n(\nstr\n) – Name of the field.\nvalue\n(\nfloat\n) – Value to set.\nset_field_float_by_id\n(\nid\n,\nvalue\n)\n¶\nSet the value of a field to the given floating point number.\nParameters\n:\nid\n(\nstr\n) – Identifier of the field.\nvalue\n(\nfloat\n) – Value to set.\nset_field_string\n(\nname\n,\nvalue\n)\n¶\nSet the value of a field to the given string.\nParameters\n:\nname\n(\nstr\n) – Name of the field.\nvalue\n(\nstr\n) – Value to set.\nset_field_string_by_id\n(\nid\n,\nvalue\n)\n¶\nSet the value of a field to the given string.\nParameters\n:\nid\n(\nstr\n) – Identifier of the field.\nvalue\n(\nstr\n) – Value to set.\nset_field_bool\n(\nname\n,\nvalue\n)\n¶\nSet the value of a field to true or false.\nParameters\n:\nname\n(\nstr\n) – Name of the field.\nvalue\n(\nbool\n) – Value to set.\nset_field_bool_by_id\n(\nid\n,\nvalue\n)\n¶\nSet the value of a field to true or false.\nParameters\n:\nid\n(\nstr\n) – Identifier of the field.\nvalue\n(\nbool\n) – Value to set.\nreset_field\n(\nname\n)\n¶\nSet the value of a field to its original value.\nParameters\n:\nname\n(\nstr\n) – Name of the field.\nreset_field_by_id\n(\nid\n)\n¶\nSet the value of a field to its original value.\nParameters\n:\nid\n(\nstr\n) – Identifier of the field.\nevents\n¶\nA list of the names of all of the modules events. Events are the clickable buttons\nvisible in the right-click menu of the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nevents_by_id\n¶\nA list of the identifiers of all of the modules events. Events are the clickable buttons\nvisible in the right-click menu of the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nhas_event\n(\nname\n)\n¶\nTrue\nif the module has an event with the given name.\nParameters\n:\nname\n(\nstr\n) –\nReturn type\n:\nbool\nhas_event_with_id\n(\nid\n)\n¶\nTrue\nif the module has an event with the given identifier.\nParameters\n:\nid\n(\nstr\n) –\nReturn type\n:\nbool\ntrigger_event\n(\nname\n)\n¶\nTrigger the named event. Equivalent to clicking the button in the right-click menu\nof the part.\nParameters\n:\nname\n(\nstr\n) –\ntrigger_event_by_id\n(\nid\n)\n¶\nTrigger the event with the given identifier.\nEquivalent to clicking the button in the right-click menu of the part.\nParameters\n:\nid\n(\nstr\n) –\nactions\n¶\nA list of all the names of the modules actions. These are the parts actions that can\nbe assigned to action groups in the in-game editor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nactions_by_id\n¶\nA list of all the identifiers of the modules actions. These are the parts actions\nthat can be assigned to action groups in the in-game editor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nhas_action\n(\nname\n)\n¶\nTrue\nif the part has an action with the given name.\nParameters\n:\nname\n(\nstr\n) –\nReturn type\n:\nbool\nhas_action_with_id\n(\nid\n)\n¶\nTrue\nif the part has an action with the given identifier.\nParameters\n:\nid\n(\nstr\n) –\nReturn type\n:\nbool\nset_action\n(\nname\n[\n,\nvalue\n=\nTrue\n]\n)\n¶\nSet the value of an action with the given name.\nParameters\n:\nname\n(\nstr\n) –\nvalue\n(\nbool\n) –\nset_action_by_id\n(\nid\n[\n,\nvalue\n=\nTrue\n]\n)\n¶\nSet the value of an action with the given identifier.\nParameters\n:\nid\n(\nstr\n) –\nvalue\n(\nbool\n) –\nSpecific Types of Part\n¶\nThe following classes provide functionality for specific types of part.\nAntenna\n¶\nNote\nIf RemoteTech is installed, use the RemoteTech service APIs to interact with antennas.\nThis class is only for stock KSP antennas.\nclass\nAntenna\n¶\nAn antenna. Obtained by calling\nPart.antenna\n.\npart\n¶\nThe part object for this antenna.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nstate\n¶\nThe current state of the antenna.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nAntennaState\ndeployable\n¶\nWhether the antenna is deployable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndeployed\n¶\nWhether the antenna is deployed.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nNote\nFixed antennas are always deployed.\nReturns an error if you try to deploy a fixed antenna.\ncan_transmit\n¶\nWhether data can be transmitted by this antenna.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ntransmit\n(\n)\n¶\nTransmit data.\ncancel\n(\n)\n¶\nCancel current transmission of data.\nallow_partial\n¶\nWhether partial data transmission is permitted.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\npower\n¶\nThe power of the antenna.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ncombinable\n¶\nWhether the antenna can be combined with other antennae on the vessel\nto boost the power.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ncombinable_exponent\n¶\nExponent used to calculate the combined power of multiple antennae on a vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\npacket_interval\n¶\nInterval between sending packets in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\npacket_size\n¶\nAmount of data sent per packet in Mits.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\npacket_resource_cost\n¶\nUnits of electric charge consumed per packet sent.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nclass\nAntennaState\n¶\nThe state of an antenna. See\nAntenna.state\n.\ndeployed\n¶\nAntenna is fully deployed.\nretracted\n¶\nAntenna is fully retracted.\ndeploying\n¶\nAntenna is being deployed.\nretracting\n¶\nAntenna is being retracted.\nbroken\n¶\nAntenna is broken.\nCargo Bay\n¶\nclass\nCargoBay\n¶\nA cargo bay. Obtained by calling\nPart.cargo_bay\n.\npart\n¶\nThe part object for this cargo bay.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nstate\n¶\nThe state of the cargo bay.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCargoBayState\nopen\n¶\nWhether the cargo bay is open.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nclass\nCargoBayState\n¶\nThe state of a cargo bay. See\nCargoBay.state\n.\nopen\n¶\nCargo bay is fully open.\nclosed\n¶\nCargo bay closed and locked.\nopening\n¶\nCargo bay is opening.\nclosing\n¶\nCargo bay is closing.\nControl Surface\n¶\nclass\nControlSurface\n¶\nAn aerodynamic control surface. Obtained by calling\nPart.control_surface\n.\npart\n¶\nThe part object for this control surface.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\npitch_enabled\n¶\nWhether the control surface has pitch control enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nyaw_enabled\n¶\nWhether the control surface has yaw control enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nroll_enabled\n¶\nWhether the control surface has roll control enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nauthority_limiter\n¶\nThe authority limiter for the control surface, which controls how far the\ncontrol surface will move.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ninverted\n¶\nWhether the control surface movement is inverted.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ndeployed\n¶\nWhether the control surface has been fully deployed.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nsurface_area\n¶\nSurface area of the control surface in\n\\(m^2\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\navailable_torque\n¶\nThe available torque, in Newton meters, that can be produced by this control surface,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the\nVessel.reference_frame\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nDecoupler\n¶\nclass\nDecoupler\n¶\nA decoupler. Obtained by calling\nPart.decoupler\npart\n¶\nThe part object for this decoupler.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ndecouple\n(\n)\n¶\nFires the decoupler. Returns the new vessel created when the decoupler fires.\nThrows an exception if the decoupler has already fired.\nReturn type\n:\nVessel\nNote\nWhen called, the active vessel may change. It is therefore possible that,\nafter calling this function, the object(s) returned by previous call(s) to\nactive_vessel\nno longer refer to the active vessel.\ndecoupled\n¶\nWhether the decoupler has fired.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nstaged\n¶\nWhether the decoupler is enabled in the staging sequence.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nimpulse\n¶\nThe impulse that the decoupler imparts when it is fired, in Newton seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nis_omni_decoupler\n¶\nWhether the decoupler is an omni-decoupler (e.g. stack separator)\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nattached_part\n¶\nThe part attached to this decoupler’s explosive node.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nDocking Port\n¶\nclass\nDockingPort\n¶\nA docking port. Obtained by calling\nPart.docking_port\npart\n¶\nThe part object for this docking port.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nstate\n¶\nThe current state of the docking port.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nDockingPortState\ndocked_part\n¶\nThe part that this docking port is docked to. Returns\nNone\nif this\ndocking port is not docked to anything.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nundock\n(\n)\n¶\nUndocks the docking port and returns the new\nVessel\nthat is created.\nThis method can be called for either docking port in a docked pair.\nThrows an exception if the docking port is not docked to anything.\nReturn type\n:\nVessel\nNote\nWhen called, the active vessel may change. It is therefore possible that,\nafter calling this function, the object(s) returned by previous call(s) to\nactive_vessel\nno longer refer to the active vessel.\nreengage_distance\n¶\nThe distance a docking port must move away when it undocks before it\nbecomes ready to dock with another port, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nhas_shield\n¶\nWhether the docking port has a shield.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nshielded\n¶\nThe state of the docking ports shield, if it has one.\nReturns\nTrue\nif the docking port has a shield, and the shield is\nclosed. Otherwise returns\nFalse\n. When set to\nTrue\n, the shield is\nclosed, and when set to\nFalse\nthe shield is opened. If the docking\nport does not have a shield, setting this attribute has no effect.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ncan_rotate\n¶\nWhether the docking port can be commanded to rotate while docked.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nmaximum_rotation\n¶\nMaximum rotation angle in degrees.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nminimum_rotation\n¶\nMinimum rotation angle in degrees.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrotation_target\n¶\nRotation target angle in degrees.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nrotation_locked\n¶\nLock rotation. When locked, allows auto-strut to work across the joint.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nposition\n(\nreference_frame\n)\n¶\nThe position of the docking port, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\ndirection\n(\nreference_frame\n)\n¶\nThe direction that docking port points in, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nrotation\n(\nreference_frame\n)\n¶\nThe rotation of the docking port, in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned rotation is in.\nReturns\n:\nThe rotation as a quaternion of the form\n\\((x, y, z, w)\\)\n.\nReturn type\n:\ntuple(float, float, float, float)\nreference_frame\n¶\nThe reference frame that is fixed relative to this docking port, and\noriented with the port.\nThe origin is at the position of the docking port.\nThe axes rotate with the docking port.\nThe x-axis points out to the right side of the docking port.\nThe y-axis points in the direction the docking port is facing.\nThe z-axis points out of the bottom off the docking port.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nNote\nThis reference frame is not necessarily equivalent to the reference frame\nfor the part, returned by\nPart.reference_frame\n.\nDocking port reference frame origin and axes\n¶\nInline docking port reference frame origin and axes\n¶\nclass\nDockingPortState\n¶\nThe state of a docking port. See\nDockingPort.state\n.\nready\n¶\nThe docking port is ready to dock to another docking port.\ndocked\n¶\nThe docking port is docked to another docking port, or docked to\nanother part (from the VAB/SPH).\ndocking\n¶\nThe docking port is very close to another docking port,\nbut has not docked. It is using magnetic force to acquire a solid dock.\nundocking\n¶\nThe docking port has just been undocked from another docking port,\nand is disabled until it moves away by a sufficient distance\n(\nDockingPort.reengage_distance\n).\nshielded\n¶\nThe docking port has a shield, and the shield is closed.\nmoving\n¶\nThe docking ports shield is currently opening/closing.\nEngine\n¶\nclass\nEngine\n¶\nAn engine, including ones of various types.\nFor example liquid fuelled gimballed engines, solid rocket boosters and jet engines.\nObtained by calling\nPart.engine\n.\nNote\nFor RCS thrusters\nPart.rcs\n.\npart\n¶\nThe part object for this engine.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nactive\n¶\nWhether the engine is active. Setting this attribute may have no effect,\ndepending on\nEngine.can_shutdown\nand\nEngine.can_restart\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nthrust\n¶\nThe current amount of thrust being produced by the engine, in Newtons.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\navailable_thrust\n¶\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and with its throttle set to 100%.\nReturns zero if the engine does not have any fuel.\nTakes the engine’s current\nEngine.thrust_limit\nand atmospheric conditions\ninto account.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\navailable_thrust_at\n(\npressure\n)\n¶\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and with its throttle set to 100%.\nReturns zero if the engine does not have any fuel.\nTakes the given pressure into account.\nParameters\n:\npressure\n(\nfloat\n) – Atmospheric pressure in atmospheres\nReturn type\n:\nfloat\nmax_thrust\n¶\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and fueled, with its throttle and throttle limiter set to 100%.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmax_thrust_at\n(\npressure\n)\n¶\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and fueled, with its throttle and throttle limiter set to 100%.\nTakes the given pressure into account.\nParameters\n:\npressure\n(\nfloat\n) – Atmospheric pressure in atmospheres\nReturn type\n:\nfloat\nmax_vacuum_thrust\n¶\nThe maximum amount of thrust that can be produced by the engine in a\nvacuum, in Newtons. This is the amount of thrust produced by the engine\nwhen activated,\nEngine.thrust_limit\nis set to 100%, the main\nvessel’s throttle is set to 100% and the engine is in a vacuum.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthrust_limit\n¶\nThe thrust limiter of the engine. A value between 0 and 1. Setting this\nattribute may have no effect, for example the thrust limit for a solid\nrocket booster cannot be changed in flight.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nthrusters\n¶\nThe components of the engine that generate thrust.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nThruster\n)\nNote\nFor example, this corresponds to the rocket nozzel on a solid rocket booster,\nor the individual nozzels on a RAPIER engine.\nThe overall thrust produced by the engine, as reported by\nEngine.available_thrust\n,\nEngine.max_thrust\nand others, is the sum of the thrust generated by each thruster.\nspecific_impulse\n¶\nThe current specific impulse of the engine, in seconds. Returns zero\nif the engine is not active.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nspecific_impulse_at\n(\npressure\n)\n¶\nThe specific impulse of the engine under the given pressure, in seconds. Returns zero\nif the engine is not active.\nParameters\n:\npressure\n(\nfloat\n) – Atmospheric pressure in atmospheres\nReturn type\n:\nfloat\nvacuum_specific_impulse\n¶\nThe vacuum specific impulse of the engine, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nkerbin_sea_level_specific_impulse\n¶\nThe specific impulse of the engine at sea level on Kerbin, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\npropellant_names\n¶\nThe names of the propellants that the engine consumes.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\npropellant_ratios\n¶\nThe ratio of resources that the engine consumes. A dictionary mapping resource names\nto the ratio at which they are consumed by the engine.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ndict(str, float)\nNote\nFor example, if the ratios are 0.6 for LiquidFuel and 0.4 for Oxidizer, then for every\n0.6 units of LiquidFuel that the engine burns, it will burn 0.4 units of Oxidizer.\npropellants\n¶\nThe propellants that the engine consumes.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nPropellant\n)\nhas_fuel\n¶\nWhether the engine has any fuel available.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nthrottle\n¶\nThe current throttle setting for the engine. A value between 0 and 1.\nThis is not necessarily the same as the vessel’s main throttle\nsetting, as some engines take time to adjust their throttle\n(such as jet engines), or independent throttle may be enabled.\nWhen the engine’s independent throttle is enabled\n(see\nEngine.independent_throttle\n), can be used to set the throttle percentage.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nthrottle_locked\n¶\nWhether the\nControl.throttle\naffects the engine. For example,\nthis is\nTrue\nfor liquid fueled rockets, and\nFalse\nfor solid rocket\nboosters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nindependent_throttle\n¶\nWhether the independent throttle is enabled for the engine.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ncan_restart\n¶\nWhether the engine can be restarted once shutdown. If the engine cannot be shutdown,\nreturns\nFalse\n. For example, this is\nTrue\nfor liquid fueled rockets\nand\nFalse\nfor solid rocket boosters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ncan_shutdown\n¶\nWhether the engine can be shutdown once activated. For example, this is\nTrue\nfor liquid fueled rockets and\nFalse\nfor solid rocket boosters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_modes\n¶\nWhether the engine has multiple modes of operation.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nmode\n¶\nThe name of the current engine mode.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nmodes\n¶\nThe available modes for the engine.\nA dictionary mapping mode names to\nEngine\nobjects.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ndict(str,\nEngine\n)\ntoggle_mode\n(\n)\n¶\nToggle the current engine mode.\nauto_mode_switch\n¶\nWhether the engine will automatically switch modes.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ngimballed\n¶\nWhether the engine is gimballed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ngimbal_range\n¶\nThe range over which the gimbal can move, in degrees.\nReturns 0 if the engine is not gimballed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ngimbal_locked\n¶\nWhether the engines gimbal is locked in place. Setting this attribute has\nno effect if the engine is not gimballed.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ngimbal_limit\n¶\nThe gimbal limiter of the engine. A value between 0 and 1.\nReturns 0 if the gimbal is locked.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\navailable_torque\n¶\nThe available torque, in Newton meters, that can be produced by this engine,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the\nVessel.reference_frame\n.\nReturns zero if the engine is inactive, or not gimballed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nclass\nPropellant\n¶\nA propellant for an engine. Obtains by calling\nEngine.propellants\n.\nname\n¶\nThe name of the propellant.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ncurrent_amount\n¶\nThe current amount of propellant.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ncurrent_requirement\n¶\nThe required amount of propellant.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntotal_resource_available\n¶\nThe total amount of the underlying resource currently reachable given\nresource flow rules.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntotal_resource_capacity\n¶\nThe total vehicle capacity for the underlying propellant resource,\nrestricted by resource flow rules.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nignore_for_isp\n¶\nIf this propellant should be ignored when calculating required mass flow\ngiven specific impulse.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nignore_for_thrust_curve\n¶\nIf this propellant should be ignored for thrust curve calculations.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndraw_stack_gauge\n¶\nIf this propellant has a stack gauge or not.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nis_deprived\n¶\nIf this propellant is deprived.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nratio\n¶\nThe propellant ratio.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nExperiment\n¶\nclass\nExperiment\n¶\nObtained by calling\nPart.experiment\n.\npart\n¶\nThe part object for this experiment.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nname\n¶\nInternal name of the experiment, as used in\npart cfg files\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ntitle\n¶\nTitle of the experiment, as shown on the in-game UI.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nrun\n(\n)\n¶\nRun the experiment.\ntransmit\n(\n)\n¶\nTransmit all experimental data contained by this part.\ndump\n(\n)\n¶\nDump the experimental data contained by the experiment.\nreset\n(\n)\n¶\nReset the experiment.\ndeployed\n¶\nWhether the experiment has been deployed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nrerunnable\n¶\nWhether the experiment can be re-run.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ninoperable\n¶\nWhether the experiment is inoperable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_data\n¶\nWhether the experiment contains data.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndata\n¶\nThe data contained in this experiment.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nScienceData\n)\nbiome\n¶\nThe name of the biome the experiment is currently in.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\navailable\n¶\nDetermines if the experiment is available given the current conditions.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nscience_subject\n¶\nContaining information on the corresponding specific science result for the current\nconditions. Returns\nNone\nif the experiment is unavailable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nScienceSubject\nclass\nScienceData\n¶\nObtained by calling\nExperiment.data\n.\ndata_amount\n¶\nData amount.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nscience_value\n¶\nScience value.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntransmit_value\n¶\nTransmit value.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nclass\nScienceSubject\n¶\nObtained by calling\nExperiment.science_subject\n.\ntitle\n¶\nTitle of science subject, displayed in science archives\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nis_complete\n¶\nWhether the experiment has been completed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nscience\n¶\nAmount of science already earned from this subject, not updated until after\ntransmission/recovery.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nscience_cap\n¶\nTotal science allowable for this subject.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ndata_scale\n¶\nMultiply science value by this to determine data amount in mits.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsubject_value\n¶\nMultiplier for specific Celestial Body/Experiment Situation combination.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nscientific_value\n¶\nDiminishing value multiplier for decreasing the science value returned from repeated\nexperiments.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nFairing\n¶\nclass\nFairing\n¶\nA fairing. Obtained by calling\nPart.fairing\n.\nSupports both stock fairings, and those from the ProceduralFairings mod.\npart\n¶\nThe part object for this fairing.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\njettison\n(\n)\n¶\nJettison the fairing. Has no effect if it has already been jettisoned.\njettisoned\n¶\nWhether the fairing has been jettisoned.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nIntake\n¶\nclass\nIntake\n¶\nAn air intake. Obtained by calling\nPart.intake\n.\npart\n¶\nThe part object for this intake.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nopen\n¶\nWhether the intake is open.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nspeed\n¶\nSpeed of the flow into the intake, in\n\\(m/s\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nflow\n¶\nThe rate of flow into the intake, in units of resource per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\narea\n¶\nThe area of the intake’s opening, in square meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nLeg\n¶\nclass\nLeg\n¶\nA landing leg. Obtained by calling\nPart.leg\n.\npart\n¶\nThe part object for this landing leg.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nstate\n¶\nThe current state of the landing leg.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nLegState\ndeployable\n¶\nWhether the leg is deployable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndeployed\n¶\nWhether the landing leg is deployed.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nNote\nFixed landing legs are always deployed.\nReturns an error if you try to deploy fixed landing gear.\nis_grounded\n¶\nReturns whether the leg is touching the ground.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nclass\nLegState\n¶\nThe state of a landing leg. See\nLeg.state\n.\ndeployed\n¶\nLanding leg is fully deployed.\nretracted\n¶\nLanding leg is fully retracted.\ndeploying\n¶\nLanding leg is being deployed.\nretracting\n¶\nLanding leg is being retracted.\nbroken\n¶\nLanding leg is broken.\nLaunch Clamp\n¶\nclass\nLaunchClamp\n¶\nA launch clamp. Obtained by calling\nPart.launch_clamp\n.\npart\n¶\nThe part object for this launch clamp.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nrelease\n(\n)\n¶\nReleases the docking clamp. Has no effect if the clamp has already been released.\nLight\n¶\nclass\nLight\n¶\nA light. Obtained by calling\nPart.light\n.\npart\n¶\nThe part object for this light.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nactive\n¶\nWhether the light is switched on.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ncolor\n¶\nThe color of the light, as an RGB triple.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nblink\n¶\nWhether blinking is enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nblink_rate\n¶\nThe blink rate of the light.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\npower_usage\n¶\nThe current power usage, in units of charge per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nParachute\n¶\nclass\nParachute\n¶\nA parachute. Obtained by calling\nPart.parachute\n.\npart\n¶\nThe part object for this parachute.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ndeploy\n(\n)\n¶\nDeploys the parachute. This has no effect if the parachute has already\nbeen deployed.\ndeployed\n¶\nWhether the parachute has been deployed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\narm\n(\n)\n¶\nDeploys the parachute. This has no effect if the parachute has already\nbeen armed or deployed.\narmed\n¶\nWhether the parachute has been armed or deployed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ncut\n(\n)\n¶\nCuts the parachute.\nstate\n¶\nThe current state of the parachute.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nParachuteState\ndeploy_altitude\n¶\nThe altitude at which the parachute will full deploy, in meters.\nOnly applicable to stock parachutes.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ndeploy_min_pressure\n¶\nThe minimum pressure at which the parachute will semi-deploy, in atmospheres.\nOnly applicable to stock parachutes.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nclass\nParachuteState\n¶\nThe state of a parachute. See\nParachute.state\n.\nstowed\n¶\nThe parachute is safely tucked away inside its housing.\narmed\n¶\nThe parachute is armed for deployment.\nsemi_deployed\n¶\nThe parachute has been deployed and is providing some drag,\nbut is not fully deployed yet. (Stock parachutes only)\ndeployed\n¶\nThe parachute is fully deployed.\ncut\n¶\nThe parachute has been cut.\nRadiator\n¶\nclass\nRadiator\n¶\nA radiator. Obtained by calling\nPart.radiator\n.\npart\n¶\nThe part object for this radiator.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ndeployable\n¶\nWhether the radiator is deployable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndeployed\n¶\nFor a deployable radiator,\nTrue\nif the radiator is extended.\nIf the radiator is not deployable, this is always\nTrue\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nstate\n¶\nThe current state of the radiator.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRadiatorState\nNote\nA fixed radiator is always\nRadiatorState.extended\n.\nclass\nRadiatorState\n¶\nThe state of a radiator.\nRadiator.state\nextended\n¶\nRadiator is fully extended.\nretracted\n¶\nRadiator is fully retracted.\nextending\n¶\nRadiator is being extended.\nretracting\n¶\nRadiator is being retracted.\nbroken\n¶\nRadiator is broken.\nResource Converter\n¶\nclass\nResourceConverter\n¶\nA resource converter. Obtained by calling\nPart.resource_converter\n.\npart\n¶\nThe part object for this converter.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ncount\n¶\nThe number of converters in the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\nname\n(\nindex\n)\n¶\nThe name of the specified converter.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nReturn type\n:\nstr\nactive\n(\nindex\n)\n¶\nTrue if the specified converter is active.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nReturn type\n:\nbool\nstart\n(\nindex\n)\n¶\nStart the specified converter.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nstop\n(\nindex\n)\n¶\nStop the specified converter.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nstate\n(\nindex\n)\n¶\nThe state of the specified converter.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nReturn type\n:\nResourceConverterState\nstatus_info\n(\nindex\n)\n¶\nStatus information for the specified converter.\nThis is the full status message shown in the in-game UI.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nReturn type\n:\nstr\ninputs\n(\nindex\n)\n¶\nList of the names of resources consumed by the specified converter.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nReturn type\n:\nlist(str)\noutputs\n(\nindex\n)\n¶\nList of the names of resources produced by the specified converter.\nParameters\n:\nindex\n(\nint\n) – Index of the converter.\nReturn type\n:\nlist(str)\noptimum_core_temperature\n¶\nThe core temperature at which the converter will operate with peak efficiency, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ncore_temperature\n¶\nThe core temperature of the converter, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_efficiency\n¶\nThe thermal efficiency of the converter, as a percentage of its maximum.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nclass\nResourceConverterState\n¶\nThe state of a resource converter. See\nResourceConverter.state()\n.\nrunning\n¶\nConverter is running.\nidle\n¶\nConverter is idle.\nmissing_resource\n¶\nConverter is missing a required resource.\nstorage_full\n¶\nNo available storage for output resource.\ncapacity\n¶\nAt preset resource capacity.\nunknown\n¶\nUnknown state. Possible with modified resource converters.\nIn this case, check\nResourceConverter.status_info()\nfor more information.\nResource Harvester\n¶\nclass\nResourceHarvester\n¶\nA resource harvester (drill). Obtained by calling\nPart.resource_harvester\n.\npart\n¶\nThe part object for this harvester.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nstate\n¶\nThe state of the harvester.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nResourceHarvesterState\ndeployed\n¶\nWhether the harvester is deployed.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nactive\n¶\nWhether the harvester is actively drilling.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nextraction_rate\n¶\nThe rate at which the drill is extracting ore, in units per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthermal_efficiency\n¶\nThe thermal efficiency of the drill, as a percentage of its maximum.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ncore_temperature\n¶\nThe core temperature of the drill, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\noptimum_core_temperature\n¶\nThe core temperature at which the drill will operate with peak efficiency, in Kelvin.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nclass\nResourceHarvesterState\n¶\nThe state of a resource harvester. See\nResourceHarvester.state\n.\ndeploying\n¶\nThe drill is deploying.\ndeployed\n¶\nThe drill is deployed and ready.\nretracting\n¶\nThe drill is retracting.\nretracted\n¶\nThe drill is retracted.\nactive\n¶\nThe drill is running.\nReaction Wheel\n¶\nclass\nReactionWheel\n¶\nA reaction wheel. Obtained by calling\nPart.reaction_wheel\n.\npart\n¶\nThe part object for this reaction wheel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nactive\n¶\nWhether the reaction wheel is active.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nbroken\n¶\nWhether the reaction wheel is broken.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\navailable_torque\n¶\nThe available torque, in Newton meters, that can be produced by this reaction wheel,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the\nVessel.reference_frame\n.\nReturns zero if the reaction wheel is inactive or broken.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nmax_torque\n¶\nThe maximum torque, in Newton meters, that can be produced by this reaction wheel,\nwhen it is active, in the positive and negative pitch, roll and yaw axes of the vessel.\nThese axes correspond to the coordinate axes of the\nVessel.reference_frame\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\nResource Drain\n¶\nclass\nResourceDrain\n¶\nA resource drain. Obtained by calling\nPart.resource_drain\n.\npart\n¶\nThe part object for this resource drain.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\navailable_resources\n¶\nList of available resources.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nResource\n)\nset_resource\n(\nresource\n,\nenabled\n)\n¶\nWhether the given resource should be drained.\nParameters\n:\nresource\n(\nResource\n) –\nenabled\n(\nbool\n) –\ncheck_resource\n(\nresource\n)\n¶\nWhether the provided resource is enabled for draining.\nParameters\n:\nresource\n(\nResource\n) –\nReturn type\n:\nbool\ndrain_mode\n¶\nThe drain mode.\nAttribute\n:\nCan be read or written\nReturn type\n:\nDrainMode\nmin_rate\n¶\nMinimum possible drain rate\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmax_rate\n¶\nMaximum possible drain rate.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrate\n¶\nCurrent drain rate.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nstart\n(\n)\n¶\nActivates resource draining for all enabled parts.\nstop\n(\n)\n¶\nTurns off resource draining.\nclass\nDrainMode\n¶\nResource drain mode.\nSee\nResourceDrain.drain_mode\n.\npart\n¶\nDrains from the parent part.\nvessel\n¶\nDrains from all available parts.\nRobotic Controller\n¶\nclass\nRoboticController\n¶\nA robotic controller. Obtained by calling\nPart.robotic_controller\n.\npart\n¶\nThe part object for this controller.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nhas_part\n(\npart\n)\n¶\nWhether the controller has a part.\nParameters\n:\npart\n(\nPart\n) –\nReturn type\n:\nbool\naxes\n(\n)\n¶\nThe axes for the controller.\nReturn type\n:\nlist(list(str))\nadd_axis\n(\nmodule\n,\nfield_name\n)\n¶\nAdd an axis to the controller.\nParameters\n:\nmodule\n(\nModule\n) –\nfield_name\n(\nstr\n) –\nReturns\n:\nReturns\nTrue\nif the axis is added successfully.\nReturn type\n:\nbool\nadd_key_frame\n(\nmodule\n,\nfield_name\n,\ntime\n,\nvalue\n)\n¶\nAdd key frame value for controller axis.\nParameters\n:\nmodule\n(\nModule\n) –\nfield_name\n(\nstr\n) –\ntime\n(\nfloat\n) –\nvalue\n(\nfloat\n) –\nReturns\n:\nReturns\nTrue\nif the key frame is added successfully.\nReturn type\n:\nbool\nclear_axis\n(\nmodule\n,\nfield_name\n)\n¶\nClear axis.\nParameters\n:\nmodule\n(\nModule\n) –\nfield_name\n(\nstr\n) –\nReturns\n:\nReturns\nTrue\nif the axis is cleared successfully.\nReturn type\n:\nbool\nRobotic Hinge\n¶\nclass\nRoboticHinge\n¶\nA robotic hinge. Obtained by calling\nPart.robotic_hinge\n.\npart\n¶\nThe part object for this robotic hinge.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ntarget_angle\n¶\nTarget angle.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ncurrent_angle\n¶\nCurrent angle.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrate\n¶\nTarget movement rate in degrees per second.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ndamping\n¶\nDamping percentage.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nlocked\n¶\nLock movement.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmotor_engaged\n¶\nWhether the motor is engaged.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmove_home\n(\n)\n¶\nMove hinge to it’s built position.\nRobotic Piston\n¶\nclass\nRoboticPiston\n¶\nA robotic piston part. Obtained by calling\nPart.robotic_piston\n.\npart\n¶\nThe part object for this robotic piston.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ntarget_extension\n¶\nTarget extension of the piston.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ncurrent_extension\n¶\nCurrent extension of the piston.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrate\n¶\nTarget movement rate in degrees per second.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ndamping\n¶\nDamping percentage.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nlocked\n¶\nLock movement.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmotor_engaged\n¶\nWhether the motor is engaged.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmove_home\n(\n)\n¶\nMove piston to it’s built position.\nRobotic Rotation\n¶\nclass\nRoboticRotation\n¶\nA robotic rotation servo. Obtained by calling\nPart.robotic_rotation\n.\npart\n¶\nThe part object for this robotic rotation servo.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ntarget_angle\n¶\nTarget angle.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ncurrent_angle\n¶\nCurrent angle.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrate\n¶\nTarget movement rate in degrees per second.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ndamping\n¶\nDamping percentage.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nlocked\n¶\nLock Movement\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmotor_engaged\n¶\nWhether the motor is engaged.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmove_home\n(\n)\n¶\nMove rotation servo to it’s built position.\nRobotic Rotor\n¶\nclass\nRoboticRotor\n¶\nA robotic rotor. Obtained by calling\nPart.robotic_rotor\n.\npart\n¶\nThe part object for this robotic rotor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ntarget_rpm\n¶\nTarget RPM.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ncurrent_rpm\n¶\nCurrent RPM.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ninverted\n¶\nWhether the rotor direction is inverted.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ntorque_limit\n¶\nTorque limit percentage.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nlocked\n¶\nLock movement.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmotor_engaged\n¶\nWhether the motor is engaged.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nRCS\n¶\nclass\nRCS\n¶\nAn RCS block or thruster. Obtained by calling\nPart.rcs\n.\npart\n¶\nThe part object for this RCS.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nactive\n¶\nWhether the RCS thrusters are active.\nAn RCS thruster is inactive if the RCS action group is disabled\n(\nControl.rcs\n), the RCS thruster itself is not enabled\n(\nRCS.enabled\n) or it is covered by a fairing (\nPart.shielded\n).\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nenabled\n¶\nWhether the RCS thrusters are enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\npitch_enabled\n¶\nWhether the RCS thruster will fire when pitch control input is given.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nyaw_enabled\n¶\nWhether the RCS thruster will fire when yaw control input is given.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nroll_enabled\n¶\nWhether the RCS thruster will fire when roll control input is given.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nforward_enabled\n¶\nWhether the RCS thruster will fire when pitch control input is given.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nup_enabled\n¶\nWhether the RCS thruster will fire when yaw control input is given.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nright_enabled\n¶\nWhether the RCS thruster will fire when roll control input is given.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\navailable_torque\n¶\nThe available torque, in Newton meters, that can be produced by this RCS,\nin the positive and negative pitch, roll and yaw axes of the vessel. These axes\ncorrespond to the coordinate axes of the\nVessel.reference_frame\n.\nReturns zero if RCS is disable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\navailable_force\n¶\nThe available force, in Newtons, that can be produced by this RCS,\nin the positive and negative x, y and z axes of the vessel. These axes\ncorrespond to the coordinate axes of the\nVessel.reference_frame\n.\nReturns zero if RCS is disabled.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(tuple(float, float, float), tuple(float, float, float))\navailable_thrust\n¶\nThe amount of thrust, in Newtons, that would be produced by the thruster when activated.\nReturns zero if the thruster does not have any fuel.\nTakes the thrusters current\nRCS.thrust_limit\nand atmospheric conditions\ninto account.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmax_thrust\n¶\nThe maximum amount of thrust that can be produced by the RCS thrusters when active,\nin Newtons.\nTakes the thrusters current\nRCS.thrust_limit\nand atmospheric conditions\ninto account.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmax_vacuum_thrust\n¶\nThe maximum amount of thrust that can be produced by the RCS thrusters when active\nin a vacuum, in Newtons.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nthrust_limit\n¶\nThe thrust limiter of the thruster. A value between 0 and 1.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nthrusters\n¶\nA list of thrusters, one of each nozzel in the RCS part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nThruster\n)\nspecific_impulse\n¶\nThe current specific impulse of the RCS, in seconds. Returns zero\nif the RCS is not active.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nvacuum_specific_impulse\n¶\nThe vacuum specific impulse of the RCS, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nkerbin_sea_level_specific_impulse\n¶\nThe specific impulse of the RCS at sea level on Kerbin, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\npropellants\n¶\nThe names of resources that the RCS consumes.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\npropellant_ratios\n¶\nThe ratios of resources that the RCS consumes. A dictionary mapping resource names\nto the ratios at which they are consumed by the RCS.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ndict(str, float)\nhas_fuel\n¶\nWhether the RCS has fuel available.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nSensor\n¶\nclass\nSensor\n¶\nA sensor, such as a thermometer. Obtained by calling\nPart.sensor\n.\npart\n¶\nThe part object for this sensor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nactive\n¶\nWhether the sensor is active.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nvalue\n¶\nThe current value of the sensor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nSolar Panel\n¶\nclass\nSolarPanel\n¶\nA solar panel. Obtained by calling\nPart.solar_panel\n.\npart\n¶\nThe part object for this solar panel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\ndeployable\n¶\nWhether the solar panel is deployable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndeployed\n¶\nWhether the solar panel is extended.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nstate\n¶\nThe current state of the solar panel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSolarPanelState\nenergy_flow\n¶\nThe current amount of energy being generated by the solar panel, in\nunits of charge per second.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsun_exposure\n¶\nThe current amount of sunlight that is incident on the solar panel,\nas a percentage. A value between 0 and 1.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nclass\nSolarPanelState\n¶\nThe state of a solar panel. See\nSolarPanel.state\n.\nextended\n¶\nSolar panel is fully extended.\nretracted\n¶\nSolar panel is fully retracted.\nextending\n¶\nSolar panel is being extended.\nretracting\n¶\nSolar panel is being retracted.\nbroken\n¶\nSolar panel is broken.\nThruster\n¶\nclass\nThruster\n¶\nThe component of an\nEngine\nor\nRCS\npart that generates thrust.\nCan obtained by calling\nEngine.thrusters\nor\nRCS.thrusters\n.\nNote\nEngines can consist of multiple thrusters.\nFor example, the S3 KS-25x4 “Mammoth” has four rocket nozzels, and so consists of\nfour thrusters.\npart\n¶\nThe\nPart\nthat contains this thruster.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nthrust_position\n(\nreference_frame\n)\n¶\nThe position at which the thruster generates thrust, in the given reference frame.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nthrust_direction\n(\nreference_frame\n)\n¶\nThe direction of the force generated by the thruster, in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nthrust_reference_frame\n¶\nA reference frame that is fixed relative to the thruster and orientated with\nits thrust direction (\nThruster.thrust_direction()\n).\nFor gimballed engines, this takes into account the current rotation of the gimbal.\nThe origin is at the position of thrust for this thruster\n(\nThruster.thrust_position()\n).\nThe axes rotate with the thrust direction.\nThis is the direction in which the thruster expels propellant, including any gimballing.\nThe y-axis points along the thrust direction.\nThe x-axis and z-axis are perpendicular to the thrust direction.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\ngimballed\n¶\nWhether the thruster is gimballed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ngimbal_position\n(\nreference_frame\n)\n¶\nPosition around which the gimbal pivots.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\ngimbal_angle\n¶\nThe current gimbal angle in the pitch, roll and yaw axes, in degrees.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ntuple(float, float, float)\ninitial_thrust_position\n(\nreference_frame\n)\n¶\nThe position at which the thruster generates thrust, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nNote\nThis position can move when the gimbal rotates. This is because the thrust position and\ngimbal position are not necessarily the same.\ninitial_thrust_direction\n(\nreference_frame\n)\n¶\nThe direction of the force generated by the thruster, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nWheel\n¶\nclass\nWheel\n¶\nA wheel. Includes landing gear and rover wheels.\nObtained by calling\nPart.wheel\n.\nCan be used to control the motors, steering and deployment of wheels, among other things.\npart\n¶\nThe part object for this wheel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\nstate\n¶\nThe current state of the wheel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nWheelState\nradius\n¶\nRadius of the wheel, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ngrounded\n¶\nWhether the wheel is touching the ground.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_brakes\n¶\nWhether the wheel has brakes.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nbrakes\n¶\nThe braking force, as a percentage of maximum, when the brakes are applied.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nauto_friction_control\n¶\nWhether automatic friction control is enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmanual_friction_control\n¶\nManual friction control value. Only has an effect if automatic friction control is disabled.\nA value between 0 and 5 inclusive.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ndeployable\n¶\nWhether the wheel is deployable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ndeployed\n¶\nWhether the wheel is deployed.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\npowered\n¶\nWhether the wheel is powered by a motor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nmotor_enabled\n¶\nWhether the motor is enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmotor_inverted\n¶\nWhether the direction of the motor is inverted.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nmotor_state\n¶\nWhether the direction of the motor is inverted.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nMotorState\nmotor_output\n¶\nThe output of the motor. This is the torque currently being generated, in Newton meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntraction_control_enabled\n¶\nWhether automatic traction control is enabled.\nA wheel only has traction control if it is powered.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ntraction_control\n¶\nSetting for the traction control.\nOnly takes effect if the wheel has automatic traction control enabled.\nA value between 0 and 5 inclusive.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ndrive_limiter\n¶\nManual setting for the motor limiter.\nOnly takes effect if the wheel has automatic traction control disabled.\nA value between 0 and 100 inclusive.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nsteerable\n¶\nWhether the wheel has steering.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nsteering_enabled\n¶\nWhether the wheel steering is enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nsteering_inverted\n¶\nWhether the wheel steering is inverted.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nsteering_angle_limit\n¶\nThe steering angle limit.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nsteering_response_time\n¶\nSteering response time.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nhas_suspension\n¶\nWhether the wheel has suspension.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nsuspension_spring_strength\n¶\nSuspension spring strength, as set in the editor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsuspension_damper_strength\n¶\nSuspension damper strength, as set in the editor.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nbroken\n¶\nWhether the wheel is broken.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nrepairable\n¶\nWhether the wheel is repairable.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nstress\n¶\nCurrent stress on the wheel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nstress_tolerance\n¶\nStress tolerance of the wheel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nstress_percentage\n¶\nCurrent stress on the wheel as a percentage of its stress tolerance.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ndeflection\n¶\nCurrent deflection of the wheel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nslip\n¶\nCurrent slip of the wheel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nclass\nWheelState\n¶\nThe state of a wheel. See\nWheel.state\n.\ndeployed\n¶\nWheel is fully deployed.\nretracted\n¶\nWheel is fully retracted.\ndeploying\n¶\nWheel is being deployed.\nretracting\n¶\nWheel is being retracted.\nbroken\n¶\nWheel is broken.\nclass\nMotorState\n¶\nThe state of the motor on a powered wheel. See\nWheel.motor_state\n.\nidle\n¶\nThe motor is idle.\nrunning\n¶\nThe motor is running.\ndisabled\n¶\nThe motor is disabled.\ninoperable\n¶\nThe motor is inoperable.\nnot_enough_resources\n¶\nThe motor does not have enough resources to run.\nTrees of Parts\n¶\nVessels in KSP are comprised of a number of parts, connected to one another in a\ntree\nstructure. An example vessel is shown in Figure 1, and the corresponding\ntree of parts in Figure 2. The craft file for this example can also be\ndownloaded\nhere\n.\nFigure 1\n– Example parts making up a vessel.\n¶\nFigure 2\n– Tree of parts for the vessel in Figure 1. Arrows point from\nthe parent part to the child part.\n¶\nTraversing the Tree\n¶\nThe tree of parts can be traversed using the attributes\nParts.root\n,\nPart.parent\nand\nPart.children\n.\nThe root of the tree is the same as the vessels\nroot part\n(part number 1 in\nthe example above) and can be obtained by calling\nParts.root\n.\nA parts children can be obtained by calling\nPart.children\n.\nIf the part does not have any children,\nPart.children\nreturns an empty list. A parts parent can be obtained by calling\nPart.parent\n. If the part does not have a parent\n(as is the case for the root part),\nPart.parent\nreturns\nNone\n.\nThe following Python example uses these attributes to perform a\ndepth-first traversal over all of the parts in a vessel:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nroot\n=\nvessel\n.\nparts\n.\nroot\nstack\n=\n[(\nroot\n,\n0\n)]\nwhile\nstack\n:\npart\n,\ndepth\n=\nstack\n.\npop\n()\nprint\n(\n' '\n*\ndepth\n,\npart\n.\ntitle\n)\nfor\nchild\nin\npart\n.\nchildren\n:\nstack\n.\nappend\n((\nchild\n,\ndepth\n+\n1\n))\nWhen this code is execute using the craft file for the example vessel pictured\nabove, the following is printed out:\nCommand\nPod\nMk1\nTR\n-\n18\nA\nStack\nDecoupler\nFL\n-\nT400\nFuel\nTank\nLV\n-\n909\nLiquid\nFuel\nEngine\nTR\n-\n18\nA\nStack\nDecoupler\nFL\n-\nT800\nFuel\nTank\nLV\n-\n909\nLiquid\nFuel\nEngine\nTT\n-\n70\nRadial\nDecoupler\nFL\n-\nT400\nFuel\nTank\nTT18\n-\nA\nLaunch\nStability\nEnhancer\nFTX\n-\n2\nExternal\nFuel\nDuct\nLV\n-\n909\nLiquid\nFuel\nEngine\nAerodynamic\nNose\nCone\nTT\n-\n70\nRadial\nDecoupler\nFL\n-\nT400\nFuel\nTank\nTT18\n-\nA\nLaunch\nStability\nEnhancer\nFTX\n-\n2\nExternal\nFuel\nDuct\nLV\n-\n909\nLiquid\nFuel\nEngine\nAerodynamic\nNose\nCone\nLT\n-\n1\nLanding\nStruts\nLT\n-\n1\nLanding\nStruts\nMk16\nParachute\nAttachment Modes\n¶\nParts can be attached to other parts either\nradially\n(on the side of the\nparent part) or\naxially\n(on the end of the parent part, to form a stack).\nFor example, in the vessel pictured above, the parachute (part 2) is\naxially\nconnected to its parent (the command pod – part 1), and the landing leg\n(part 5) is\nradially\nconnected to its parent (the fuel tank – part 4).\nThe root part of a vessel (for example the command pod – part 1) does not have\na parent part, so does not have an attachment mode. However, the part is\nconsider to be\naxially\nattached to nothing.\nThe following Python example does a depth-first traversal as before,\nbut also prints out the attachment mode used by the part:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nroot\n=\nvessel\n.\nparts\n.\nroot\nstack\n=\n[(\nroot\n,\n0\n)]\nwhile\nstack\n:\npart\n,\ndepth\n=\nstack\n.\npop\n()\nif\npart\n.\naxially_attached\n:\nattach_mode\n=\n'axial'\nelse\n:\n# radially_attached\nattach_mode\n=\n'radial'\nprint\n(\n' '\n*\ndepth\n,\npart\n.\ntitle\n,\n'-'\n,\nattach_mode\n)\nfor\nchild\nin\npart\n.\nchildren\n:\nstack\n.\nappend\n((\nchild\n,\ndepth\n+\n1\n))\nWhen this code is execute using the craft file for the example vessel pictured\nabove, the following is printed out:\nCommand\nPod\nMk1\n-\naxial\nTR\n-\n18\nA\nStack\nDecoupler\n-\naxial\nFL\n-\nT400\nFuel\nTank\n-\naxial\nLV\n-\n909\nLiquid\nFuel\nEngine\n-\naxial\nTR\n-\n18\nA\nStack\nDecoupler\n-\naxial\nFL\n-\nT800\nFuel\nTank\n-\naxial\nLV\n-\n909\nLiquid\nFuel\nEngine\n-\naxial\nTT\n-\n70\nRadial\nDecoupler\n-\nradial\nFL\n-\nT400\nFuel\nTank\n-\nradial\nTT18\n-\nA\nLaunch\nStability\nEnhancer\n-\nradial\nFTX\n-\n2\nExternal\nFuel\nDuct\n-\nradial\nLV\n-\n909\nLiquid\nFuel\nEngine\n-\naxial\nAerodynamic\nNose\nCone\n-\naxial\nTT\n-\n70\nRadial\nDecoupler\n-\nradial\nFL\n-\nT400\nFuel\nTank\n-\nradial\nTT18\n-\nA\nLaunch\nStability\nEnhancer\n-\nradial\nFTX\n-\n2\nExternal\nFuel\nDuct\n-\nradial\nLV\n-\n909\nLiquid\nFuel\nEngine\n-\naxial\nAerodynamic\nNose\nCone\n-\naxial\nLT\n-\n1\nLanding\nStruts\n-\nradial\nLT\n-\n1\nLanding\nStruts\n-\nradial\nMk16\nParachute\n-\naxial\nFuel Lines\n¶\nFigure 5\n– Fuel lines from the example in Figure 1. Fuel flows from the\nparts highlighted in green, into the part highlighted in blue.\n¶\nFigure 4\n– A subset of the parts tree from Figure 2 above.\n¶\nFuel lines are considered parts, and are included in the parts tree (for\nexample, as pictured in Figure 4). However, the parts tree does not contain\ninformation about which parts fuel lines connect to. The parent part of a fuel\nline is the part from which it will take fuel (as shown in Figure 4) however the\npart that it will send fuel to is not represented in the parts tree.\nFigure 5 shows the fuel lines from the example vessel pictured earlier. Fuel\nline part 15 (in red) takes fuel from a fuel tank (part 11 – in green) and\nfeeds it into another fuel tank (part 9 – in blue). The fuel line is therefore\na child of part 11, but its connection to part 9 is not represented in the tree.\nThe attributes\nPart.fuel_lines_from\nand\nPart.fuel_lines_to\ncan be used to discover these\nconnections. In the example in Figure 5, when\nPart.fuel_lines_to\nis called on fuel tank part\n11, it will return a list of parts containing just fuel tank part 9 (the blue\npart). When\nPart.fuel_lines_from\nis called on\nfuel tank part 9, it will return a list containing fuel tank parts 11 and 17\n(the parts colored green).\nStaging\n¶\nFigure 6\n– Example vessel from Figure 1 with a staging sequence.\n¶\nEach part has two staging numbers associated with it: the stage in which the\npart is\nactivated\nand the stage in which the part is\ndecoupled\n. These values\ncan be obtained using\nPart.stage\nand\nPart.decouple_stage\nrespectively. For parts that\nare not activated by staging,\nPart.stage\nreturns\n-1. For parts that are never decoupled,\nPart.decouple_stage\nreturns a value of -1.\nFigure 6 shows an example staging sequence for a vessel. Figure 7 shows the\nstages in which each part of the vessel will be\nactivated\n. Figure 8 shows the\nstages in which each part of the vessel will be\ndecoupled\n.\nFigure 7\n– The stage in which each part is\nactivated\n.\n¶\nFigure 8\n– The stage in which each part is\ndecoupled\n.\n¶"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/resources.html", "title": "Resources¶", "headings": [], "anchors": ["resources", "SpaceCenter.Resources", "SpaceCenter.Resources.all", "SpaceCenter.Resources.with_resource", "SpaceCenter.Resources.names", "SpaceCenter.Resources.has_resource", "SpaceCenter.Resources.amount", "SpaceCenter.Resources.max", "SpaceCenter.Resources.density", "SpaceCenter.Resources.flow_mode", "SpaceCenter.Resources.enabled", "SpaceCenter.Resource", "SpaceCenter.Resource.name", "SpaceCenter.Resource.part", "SpaceCenter.Resource.amount", "SpaceCenter.Resource.max", "SpaceCenter.Resource.density", "SpaceCenter.Resource.flow_mode", "SpaceCenter.Resource.enabled", "SpaceCenter.ResourceTransfer", "SpaceCenter.ResourceTransfer.start", "SpaceCenter.ResourceTransfer.amount", "SpaceCenter.ResourceTransfer.complete", "SpaceCenter.ResourceFlowMode", "SpaceCenter.ResourceFlowMode.vessel", "SpaceCenter.ResourceFlowMode.stage", "SpaceCenter.ResourceFlowMode.adjacent", "SpaceCenter.ResourceFlowMode.none"], "content_text": "Resources\n¶\nclass\nResources\n¶\nRepresents the collection of resources stored in a vessel, stage or part.\nCreated by calling\nVessel.resources\n,\nVessel.resources_in_decouple_stage()\nor\nPart.resources\n.\nall\n¶\nAll the individual resources that can be stored.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nResource\n)\nGame Scenes\n:\nFlight\nwith_resource\n(\nname\n)\n¶\nAll the individual resources with the given name that can be stored.\nParameters\n:\nname\n(\nstr\n) –\nReturn type\n:\nlist(\nResource\n)\nGame Scenes\n:\nFlight\nnames\n¶\nA list of resource names that can be stored.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nGame Scenes\n:\nFlight\nhas_resource\n(\nname\n)\n¶\nCheck whether the named resource can be stored.\nParameters\n:\nname\n(\nstr\n) – The name of the resource.\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\namount\n(\nname\n)\n¶\nReturns the amount of a resource that is currently stored.\nParameters\n:\nname\n(\nstr\n) – The name of the resource.\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax\n(\nname\n)\n¶\nReturns the amount of a resource that can be stored.\nParameters\n:\nname\n(\nstr\n) – The name of the resource.\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstatic\ndensity\n(\nname\n)\n¶\nReturns the density of a resource, in\n\\(kg/l\\)\n.\nParameters\n:\nname\n(\nstr\n) – The name of the resource.\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstatic\nflow_mode\n(\nname\n)\n¶\nReturns the flow mode of a resource.\nParameters\n:\nname\n(\nstr\n) – The name of the resource.\nReturn type\n:\nResourceFlowMode\nGame Scenes\n:\nFlight\nenabled\n¶\nWhether use of all the resources are enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nNote\nThis is\nTrue\nif all of the resources are enabled.\nIf any of the resources are not enabled, this is\nFalse\n.\nclass\nResource\n¶\nAn individual resource stored within a part.\nCreated using methods in the\nResources\nclass.\nname\n¶\nThe name of the resource.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\npart\n¶\nThe part containing the resource.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nPart\namount\n¶\nThe amount of the resource that is currently stored in the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nmax\n¶\nThe total amount of the resource that can be stored in the part.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ndensity\n¶\nThe density of the resource, in\n\\(kg/l\\)\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nflow_mode\n¶\nThe flow mode of the resource.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nResourceFlowMode\nenabled\n¶\nWhether use of this resource is enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nclass\nResourceTransfer\n¶\nTransfer resources between parts.\nstatic\nstart\n(\nfrom_part\n,\nto_part\n,\nresource\n,\nmax_amount\n)\n¶\nStart transferring a resource transfer between a pair of parts. The transfer will move\nat most\nmax_amount\nunits of the resource, depending on how much of\nthe resource is available in the source part and how much storage is available in the\ndestination part.\nUse\nResourceTransfer.complete\nto check if the transfer is complete.\nUse\nResourceTransfer.amount\nto see how much of the resource has been transferred.\nParameters\n:\nfrom_part\n(\nPart\n) – The part to transfer to.\nto_part\n(\nPart\n) – The part to transfer from.\nresource\n(\nstr\n) – The name of the resource to transfer.\nmax_amount\n(\nfloat\n) – The maximum amount of resource to transfer.\nReturn type\n:\nResourceTransfer\namount\n¶\nThe amount of the resource that has been transferred.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ncomplete\n¶\nWhether the transfer has completed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nclass\nResourceFlowMode\n¶\nThe way in which a resource flows between parts. See\nResources.flow_mode()\n.\nvessel\n¶\nThe resource flows to any part in the vessel. For example, electric charge.\nstage\n¶\nThe resource flows from parts in the first stage, followed by the second,\nand so on. For example, mono-propellant.\nadjacent\n¶\nThe resource flows between adjacent parts within the vessel. For example,\nliquid fuel or oxidizer.\nnone\n¶\nThe resource does not flow. For example, solid fuel."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/node.html", "title": "Node¶", "headings": [], "anchors": ["node", "SpaceCenter.Node", "SpaceCenter.Node.prograde", "SpaceCenter.Node.normal", "SpaceCenter.Node.radial", "SpaceCenter.Node.delta_v", "SpaceCenter.Node.remaining_delta_v", "SpaceCenter.Node.burn_vector", "SpaceCenter.Node.remaining_burn_vector", "SpaceCenter.Node.ut", "SpaceCenter.Node.time_to", "SpaceCenter.Node.orbit", "SpaceCenter.Node.remove", "SpaceCenter.Node.reference_frame", "SpaceCenter.Node.orbital_reference_frame", "SpaceCenter.Node.position", "SpaceCenter.Node.direction"], "content_text": "Node\n¶\nclass\nNode\n¶\nRepresents a maneuver node. Can be created using\nControl.add_node()\n.\nprograde\n¶\nThe magnitude of the maneuver nodes delta-v in the prograde direction,\nin meters per second.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nnormal\n¶\nThe magnitude of the maneuver nodes delta-v in the normal direction,\nin meters per second.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nradial\n¶\nThe magnitude of the maneuver nodes delta-v in the radial direction,\nin meters per second.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ndelta_v\n¶\nThe delta-v of the maneuver node, in meters per second.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nNote\nDoes not change when executing the maneuver node. See\nNode.remaining_delta_v\n.\nremaining_delta_v\n¶\nGets the remaining delta-v of the maneuver node, in meters per second. Changes as the\nnode is executed. This is equivalent to the delta-v reported in-game.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nburn_vector\n(\n[\nreference_frame\n=\nNone\n]\n)\n¶\nReturns the burn vector for the maneuver node.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned vector is in. Defaults to\nVessel.orbital_reference_frame\n.\nReturns\n:\nA vector whose direction is the direction of the maneuver node burn, and magnitude is the delta-v of the burn in meters per second.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nNote\nDoes not change when executing the maneuver node. See\nNode.remaining_burn_vector()\n.\nremaining_burn_vector\n(\n[\nreference_frame\n=\nNone\n]\n)\n¶\nReturns the remaining burn vector for the maneuver node.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned vector is in. Defaults to\nVessel.orbital_reference_frame\n.\nReturns\n:\nA vector whose direction is the direction of the maneuver node burn, and magnitude is the delta-v of the burn in meters per second.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nNote\nChanges as the maneuver node is executed. See\nNode.burn_vector()\n.\nut\n¶\nThe universal time at which the maneuver will occur, in seconds.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ntime_to\n¶\nThe time until the maneuver node will be encountered, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\norbit\n¶\nThe orbit that results from executing the maneuver node.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nOrbit\nGame Scenes\n:\nFlight\nremove\n(\n)\n¶\nRemoves the maneuver node.\nGame Scenes\n:\nFlight\nreference_frame\n¶\nThe reference frame that is fixed relative to the maneuver node’s burn.\nThe origin is at the position of the maneuver node.\nThe y-axis points in the direction of the burn.\nThe x-axis and z-axis point in arbitrary but fixed directions.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nGame Scenes\n:\nFlight\norbital_reference_frame\n¶\nThe reference frame that is fixed relative to the maneuver node, and\norientated with the orbital prograde/normal/radial directions of the\noriginal orbit at the maneuver node’s position.\nThe origin is at the position of the maneuver node.\nThe x-axis points in the orbital anti-radial direction of the original\norbit, at the position of the maneuver node.\nThe y-axis points in the orbital prograde direction of the original\norbit, at the position of the maneuver node.\nThe z-axis points in the orbital normal direction of the original orbit,\nat the position of the maneuver node.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nReferenceFrame\nGame Scenes\n:\nFlight\nposition\n(\nreference_frame\n)\n¶\nThe position vector of the maneuver node in the given reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned position vector is in.\nReturns\n:\nThe position as a vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\ndirection\n(\nreference_frame\n)\n¶\nThe direction of the maneuver nodes burn.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The reference frame that the returned direction is in.\nReturns\n:\nThe direction as a unit vector.\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/reference-frame.html", "title": "ReferenceFrame¶", "headings": [], "anchors": ["referenceframe", "SpaceCenter.ReferenceFrame", "SpaceCenter.ReferenceFrame.create_relative", "SpaceCenter.ReferenceFrame.create_hybrid"], "content_text": "ReferenceFrame\n¶\nclass\nReferenceFrame\n¶\nRepresents a reference frame for positions, rotations and\nvelocities. Contains:\nThe position of the origin.\nThe directions of the x, y and z axes.\nThe linear velocity of the frame.\nThe angular velocity of the frame.\nNote\nThis class does not contain any properties or methods. It is only\nused as a parameter to other functions.\nstatic\ncreate_relative\n(\nreference_frame\n[\n,\nposition\n=\n(0.0\n,\n0.0\n,\n0.0)\n]\n[\n,\nrotation\n=\n(0.0\n,\n0.0\n,\n0.0\n,\n1.0)\n]\n[\n,\nvelocity\n=\n(0.0\n,\n0.0\n,\n0.0)\n]\n[\n,\nangular_velocity\n=\n(0.0\n,\n0.0\n,\n0.0)\n]\n)\n¶\nCreate a relative reference frame. This is a custom reference frame\nwhose components offset the components of a parent reference frame.\nParameters\n:\nreference_frame\n(\nReferenceFrame\n) – The parent reference frame on which to base this reference frame.\nposition\n(\ntuple\n) – The offset of the position of the origin, as a position vector. Defaults to\n\\((0, 0, 0)\\)\nrotation\n(\ntuple\n) – The rotation to apply to the parent frames rotation, as a quaternion of the form\n\\((x, y, z, w)\\)\n. Defaults to\n\\((0, 0, 0, 1)\\)\n(i.e. no rotation)\nvelocity\n(\ntuple\n) – The linear velocity to offset the parent frame by, as a vector pointing in the direction of travel, whose magnitude is the speed in meters per second. Defaults to\n\\((0, 0, 0)\\)\n.\nangular_velocity\n(\ntuple\n) – The angular velocity to offset the parent frame by, as a vector. This vector points in the direction of the axis of rotation, and its magnitude is the speed of the rotation in radians per second. Defaults to\n\\((0, 0, 0)\\)\n.\nReturn type\n:\nReferenceFrame\nstatic\ncreate_hybrid\n(\nposition\n[\n,\nrotation\n=\nNone\n]\n[\n,\nvelocity\n=\nNone\n]\n[\n,\nangular_velocity\n=\nNone\n]\n)\n¶\nCreate a hybrid reference frame. This is a custom reference frame\nwhose components inherited from other reference frames.\nParameters\n:\nposition\n(\nReferenceFrame\n) – The reference frame providing the position of the origin.\nrotation\n(\nReferenceFrame\n) – The reference frame providing the rotation of the frame.\nvelocity\n(\nReferenceFrame\n) – The reference frame providing the linear velocity of the frame.\nangular_velocity\n(\nReferenceFrame\n) – The reference frame providing the angular velocity of the frame.\nReturn type\n:\nReferenceFrame\nNote\nThe\nposition\nreference frame is required but all other\nreference frames are optional. If omitted, they are set to the\nposition\nreference frame."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/auto-pilot.html", "title": "AutoPilot¶", "headings": [], "anchors": ["autopilot", "SpaceCenter.AutoPilot", "SpaceCenter.AutoPilot.engage", "SpaceCenter.AutoPilot.disengage", "SpaceCenter.AutoPilot.wait", "SpaceCenter.AutoPilot.error", "SpaceCenter.AutoPilot.pitch_error", "SpaceCenter.AutoPilot.heading_error", "SpaceCenter.AutoPilot.roll_error", "SpaceCenter.AutoPilot.reference_frame", "SpaceCenter.AutoPilot.target_pitch", "SpaceCenter.AutoPilot.target_heading", "SpaceCenter.AutoPilot.target_roll", "SpaceCenter.AutoPilot.target_direction", "SpaceCenter.AutoPilot.target_pitch_and_heading", "SpaceCenter.AutoPilot.sas", "SpaceCenter.AutoPilot.sas_mode", "SpaceCenter.AutoPilot.roll_threshold", "SpaceCenter.AutoPilot.stopping_time", "SpaceCenter.AutoPilot.deceleration_time", "SpaceCenter.AutoPilot.attenuation_angle", "SpaceCenter.AutoPilot.auto_tune", "SpaceCenter.AutoPilot.time_to_peak", "SpaceCenter.AutoPilot.overshoot", "SpaceCenter.AutoPilot.pitch_pid_gains", "SpaceCenter.AutoPilot.roll_pid_gains", "SpaceCenter.AutoPilot.yaw_pid_gains"], "content_text": "AutoPilot\n¶\nclass\nAutoPilot\n¶\nProvides basic auto-piloting utilities for a vessel.\nCreated by calling\nVessel.auto_pilot\n.\nNote\nIf a client engages the auto-pilot and then closes its connection to the server,\nthe auto-pilot will be disengaged and its target reference frame, direction and roll\nreset to default.\nengage\n(\n)\n¶\nEngage the auto-pilot.\nGame Scenes\n:\nFlight\ndisengage\n(\n)\n¶\nDisengage the auto-pilot.\nGame Scenes\n:\nFlight\nwait\n(\n)\n¶\nBlocks until the vessel is pointing in the target direction and has\nthe target roll (if set). Throws an exception if the auto-pilot has not been engaged.\nGame Scenes\n:\nFlight\nerror\n¶\nThe error, in degrees, between the direction the ship has been asked\nto point in and the direction it is pointing in. Throws an exception if the auto-pilot\nhas not been engaged and SAS is not enabled or is in stability assist mode.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\npitch_error\n¶\nThe error, in degrees, between the vessels current and target pitch.\nThrows an exception if the auto-pilot has not been engaged.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nheading_error\n¶\nThe error, in degrees, between the vessels current and target heading.\nThrows an exception if the auto-pilot has not been engaged.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nroll_error\n¶\nThe error, in degrees, between the vessels current and target roll.\nThrows an exception if the auto-pilot has not been engaged or no target roll is set.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nreference_frame\n¶\nThe reference frame for the target direction (\nAutoPilot.target_direction\n).\nAttribute\n:\nCan be read or written\nReturn type\n:\nReferenceFrame\nGame Scenes\n:\nFlight\nNote\nAn error will be thrown if this property is set to a reference frame that rotates with\nthe vessel being controlled, as it is impossible to rotate the vessel in such a\nreference frame.\ntarget_pitch\n¶\nThe target pitch, in degrees, between -90° and +90°.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ntarget_heading\n¶\nThe target heading, in degrees, between 0° and 360°.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ntarget_roll\n¶\nThe target roll, in degrees.\nNaN\nif no target roll is set.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ntarget_direction\n¶\nDirection vector corresponding to the target pitch and heading.\nThis is in the reference frame specified by\nReferenceFrame\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\ntarget_pitch_and_heading\n(\npitch\n,\nheading\n)\n¶\nSet target pitch and heading angles.\nParameters\n:\npitch\n(\nfloat\n) – Target pitch angle, in degrees between -90° and +90°.\nheading\n(\nfloat\n) – Target heading angle, in degrees between 0° and 360°.\nGame Scenes\n:\nFlight\nsas\n¶\nThe state of SAS.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nNote\nEquivalent to\nControl.sas\nsas_mode\n¶\nThe current\nSASMode\n.\nThese modes are equivalent to the mode buttons to the left of the navball that appear\nwhen SAS is enabled.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSASMode\nGame Scenes\n:\nFlight\nNote\nEquivalent to\nControl.sas_mode\nroll_threshold\n¶\nThe threshold at which the autopilot will try to match the target roll angle, if any.\nDefaults to 5 degrees.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstopping_time\n¶\nThe maximum amount of time that the vessel should need to come to a complete stop.\nThis determines the maximum angular velocity of the vessel.\nA vector of three stopping times, in seconds, one for each of the pitch, roll\nand yaw axes. Defaults to 0.5 seconds for each axis.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\ndeceleration_time\n¶\nThe time the vessel should take to come to a stop pointing in the target direction.\nThis determines the angular acceleration used to decelerate the vessel.\nA vector of three times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 5 seconds for each axis.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nattenuation_angle\n¶\nThe angle at which the autopilot considers the vessel to be pointing\nclose to the target.\nThis determines the midpoint of the target velocity attenuation function.\nA vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.\nDefaults to 1° for each axis.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nauto_tune\n¶\nWhether the rotation rate controllers PID parameters should be automatically tuned\nusing the vessels moment of inertia and available torque. Defaults to\nTrue\n.\nSee\nAutoPilot.time_to_peak\nand\nAutoPilot.overshoot\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\ntime_to_peak\n¶\nThe target time to peak used to autotune the PID controllers.\nA vector of three times, in seconds, for each of the pitch, roll and yaw axes.\nDefaults to 3 seconds for each axis.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\novershoot\n¶\nThe target overshoot percentage used to autotune the PID controllers.\nA vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.\nDefaults to 0.01 for each axis.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\npitch_pid_gains\n¶\nGains for the pitch PID controller.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nNote\nWhen\nAutoPilot.auto_tune\nis true, these values are updated automatically,\nwhich will overwrite any manual changes.\nroll_pid_gains\n¶\nGains for the roll PID controller.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nNote\nWhen\nAutoPilot.auto_tune\nis true, these values are updated automatically,\nwhich will overwrite any manual changes.\nyaw_pid_gains\n¶\nGains for the yaw PID controller.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nNote\nWhen\nAutoPilot.auto_tune\nis true, these values are updated automatically,\nwhich will overwrite any manual changes."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/camera.html", "title": "Camera¶", "headings": [], "anchors": ["camera", "SpaceCenter.Camera", "SpaceCenter.Camera.mode", "SpaceCenter.Camera.pitch", "SpaceCenter.Camera.heading", "SpaceCenter.Camera.distance", "SpaceCenter.Camera.min_pitch", "SpaceCenter.Camera.max_pitch", "SpaceCenter.Camera.min_distance", "SpaceCenter.Camera.max_distance", "SpaceCenter.Camera.default_distance", "SpaceCenter.Camera.focussed_body", "SpaceCenter.Camera.focussed_vessel", "SpaceCenter.Camera.focussed_node", "SpaceCenter.CameraMode", "SpaceCenter.CameraMode.automatic", "SpaceCenter.CameraMode.free", "SpaceCenter.CameraMode.chase", "SpaceCenter.CameraMode.locked", "SpaceCenter.CameraMode.orbital", "SpaceCenter.CameraMode.iva", "SpaceCenter.CameraMode.map"], "content_text": "Camera\n¶\nclass\nCamera\n¶\nControls the game’s camera.\nObtained by calling\ncamera\n.\nmode\n¶\nThe current mode of the camera.\nAttribute\n:\nCan be read or written\nReturn type\n:\nCameraMode\nGame Scenes\n:\nFlight\npitch\n¶\nThe pitch of the camera, in degrees.\nA value between\nCamera.min_pitch\nand\nCamera.max_pitch\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nheading\n¶\nThe heading of the camera, in degrees.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ndistance\n¶\nThe distance from the camera to the subject, in meters.\nA value between\nCamera.min_distance\nand\nCamera.max_distance\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmin_pitch\n¶\nThe minimum pitch of the camera.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax_pitch\n¶\nThe maximum pitch of the camera.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmin_distance\n¶\nMinimum distance from the camera to the subject, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax_distance\n¶\nMaximum distance from the camera to the subject, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ndefault_distance\n¶\nDefault distance from the camera to the subject, in meters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nfocussed_body\n¶\nIn map mode, the celestial body that the camera is focussed on.\nReturns\nNone\nif the camera is not focussed on a celestial body.\nReturns an error is the camera is not in map mode.\nAttribute\n:\nCan be read or written\nReturn type\n:\nCelestialBody\nGame Scenes\n:\nFlight\nfocussed_vessel\n¶\nIn map mode, the vessel that the camera is focussed on.\nReturns\nNone\nif the camera is not focussed on a vessel.\nReturns an error is the camera is not in map mode.\nAttribute\n:\nCan be read or written\nReturn type\n:\nVessel\nGame Scenes\n:\nFlight\nfocussed_node\n¶\nIn map mode, the maneuver node that the camera is focussed on.\nReturns\nNone\nif the camera is not focussed on a maneuver node.\nReturns an error is the camera is not in map mode.\nAttribute\n:\nCan be read or written\nReturn type\n:\nNode\nGame Scenes\n:\nFlight\nclass\nCameraMode\n¶\nSee\nCamera.mode\n.\nautomatic\n¶\nThe camera is showing the active vessel, in “auto” mode.\nfree\n¶\nThe camera is showing the active vessel, in “free” mode.\nchase\n¶\nThe camera is showing the active vessel, in “chase” mode.\nlocked\n¶\nThe camera is showing the active vessel, in “locked” mode.\norbital\n¶\nThe camera is showing the active vessel, in “orbital” mode.\niva\n¶\nThe Intra-Vehicular Activity view is being shown.\nmap\n¶\nThe map view is being shown."}
{"url": "https://krpc.github.io/krpc/python/api/space-center/waypoints.html", "title": "Waypoints¶", "headings": [], "anchors": ["waypoints", "SpaceCenter.WaypointManager", "SpaceCenter.WaypointManager.waypoints", "SpaceCenter.WaypointManager.add_waypoint", "SpaceCenter.WaypointManager.add_waypoint_at_altitude", "SpaceCenter.WaypointManager.colors", "SpaceCenter.WaypointManager.icons", "SpaceCenter.Waypoint", "SpaceCenter.Waypoint.body", "SpaceCenter.Waypoint.name", "SpaceCenter.Waypoint.color", "SpaceCenter.Waypoint.icon", "SpaceCenter.Waypoint.latitude", "SpaceCenter.Waypoint.longitude", "SpaceCenter.Waypoint.mean_altitude", "SpaceCenter.Waypoint.surface_altitude", "SpaceCenter.Waypoint.bedrock_altitude", "SpaceCenter.Waypoint.near_surface", "SpaceCenter.Waypoint.grounded", "SpaceCenter.Waypoint.index", "SpaceCenter.Waypoint.clustered", "SpaceCenter.Waypoint.has_contract", "SpaceCenter.Waypoint.contract", "SpaceCenter.Waypoint.remove"], "content_text": "Waypoints\n¶\nclass\nWaypointManager\n¶\nWaypoints are the location markers you can see on the map view showing you where contracts are targeted for.\nWith this structure, you can obtain coordinate data for the locations of these waypoints.\nObtained by calling\nwaypoint_manager\n.\nwaypoints\n¶\nA list of all existing waypoints.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nWaypoint\n)\nadd_waypoint\n(\nlatitude\n,\nlongitude\n,\nbody\n,\nname\n)\n¶\nCreates a waypoint at the given position at ground level, and returns a\nWaypoint\nobject that can be used to modify it.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude of the waypoint.\nlongitude\n(\nfloat\n) – Longitude of the waypoint.\nbody\n(\nCelestialBody\n) – Celestial body the waypoint is attached to.\nname\n(\nstr\n) – Name of the waypoint.\nReturn type\n:\nWaypoint\nadd_waypoint_at_altitude\n(\nlatitude\n,\nlongitude\n,\naltitude\n,\nbody\n,\nname\n)\n¶\nCreates a waypoint at the given position and altitude, and returns a\nWaypoint\nobject that can be used to modify it.\nParameters\n:\nlatitude\n(\nfloat\n) – Latitude of the waypoint.\nlongitude\n(\nfloat\n) – Longitude of the waypoint.\naltitude\n(\nfloat\n) – Altitude (above sea level) of the waypoint.\nbody\n(\nCelestialBody\n) – Celestial body the waypoint is attached to.\nname\n(\nstr\n) – Name of the waypoint.\nReturn type\n:\nWaypoint\ncolors\n¶\nAn example map of known color - seed pairs.\nAny other integers may be used as seed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\ndict(str, int)\nicons\n¶\nReturns all available icons (from “GameData/Squad/Contracts/Icons/”).\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nclass\nWaypoint\n¶\nRepresents a waypoint. Can be created using\nWaypointManager.add_waypoint()\n.\nbody\n¶\nThe celestial body the waypoint is attached to.\nAttribute\n:\nCan be read or written\nReturn type\n:\nCelestialBody\nGame Scenes\n:\nFlight\nname\n¶\nThe name of the waypoint as it appears on the map and the contract.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\ncolor\n¶\nThe seed of the icon color. See\nWaypointManager.colors\nfor example colors.\nAttribute\n:\nCan be read or written\nReturn type\n:\nint\nGame Scenes\n:\nFlight\nicon\n¶\nThe icon of the waypoint.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nlatitude\n¶\nThe latitude of the waypoint.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nlongitude\n¶\nThe longitude of the waypoint.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmean_altitude\n¶\nThe altitude of the waypoint above sea level, in meters.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nsurface_altitude\n¶\nThe altitude of the waypoint above the surface of the body or sea level,\nwhichever is closer, in meters.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nbedrock_altitude\n¶\nThe altitude of the waypoint above the surface of the body, in meters.\nWhen over water, this is the altitude above the sea floor.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nnear_surface\n¶\nTrue\nif the waypoint is near to the surface of a body.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\ngrounded\n¶\nTrue\nif the waypoint is attached to the ground.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nindex\n¶\nThe integer index of this waypoint within its cluster of sibling waypoints.\nIn other words, when you have a cluster of waypoints called “Somewhere Alpha”,\n“Somewhere Beta” and “Somewhere Gamma”, the alpha site has index 0, the beta\nsite has index 1 and the gamma site has index 2.\nWhen\nWaypoint.clustered\nis\nFalse\n, this is zero.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\nGame Scenes\n:\nFlight\nclustered\n¶\nTrue\nif this waypoint is part of a set of clustered waypoints with greek letter\nnames appended (Alpha, Beta, Gamma, etc).\nIf\nTrue\n, there is a one-to-one correspondence with the greek letter name and\nthe\nWaypoint.index\n.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nhas_contract\n¶\nWhether the waypoint belongs to a contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\ncontract\n¶\nThe associated contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nContract\nGame Scenes\n:\nFlight\nremove\n(\n)\n¶\nRemoves the waypoint.\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/contracts.html", "title": "Contracts¶", "headings": [], "anchors": ["contracts", "SpaceCenter.ContractManager", "SpaceCenter.ContractManager.types", "SpaceCenter.ContractManager.all_contracts", "SpaceCenter.ContractManager.active_contracts", "SpaceCenter.ContractManager.offered_contracts", "SpaceCenter.ContractManager.completed_contracts", "SpaceCenter.ContractManager.failed_contracts", "SpaceCenter.Contract", "SpaceCenter.Contract.type", "SpaceCenter.Contract.title", "SpaceCenter.Contract.description", "SpaceCenter.Contract.notes", "SpaceCenter.Contract.synopsis", "SpaceCenter.Contract.keywords", "SpaceCenter.Contract.state", "SpaceCenter.Contract.seen", "SpaceCenter.Contract.read", "SpaceCenter.Contract.active", "SpaceCenter.Contract.failed", "SpaceCenter.Contract.can_be_canceled", "SpaceCenter.Contract.can_be_declined", "SpaceCenter.Contract.can_be_failed", "SpaceCenter.Contract.accept", "SpaceCenter.Contract.cancel", "SpaceCenter.Contract.decline", "SpaceCenter.Contract.funds_advance", "SpaceCenter.Contract.funds_completion", "SpaceCenter.Contract.funds_failure", "SpaceCenter.Contract.reputation_completion", "SpaceCenter.Contract.reputation_failure", "SpaceCenter.Contract.science_completion", "SpaceCenter.Contract.parameters", "SpaceCenter.ContractState", "SpaceCenter.ContractState.active", "SpaceCenter.ContractState.canceled", "SpaceCenter.ContractState.completed", "SpaceCenter.ContractState.deadline_expired", "SpaceCenter.ContractState.declined", "SpaceCenter.ContractState.failed", "SpaceCenter.ContractState.generated", "SpaceCenter.ContractState.offered", "SpaceCenter.ContractState.offer_expired", "SpaceCenter.ContractState.withdrawn", "SpaceCenter.ContractParameter", "SpaceCenter.ContractParameter.title", "SpaceCenter.ContractParameter.notes", "SpaceCenter.ContractParameter.children", "SpaceCenter.ContractParameter.completed", "SpaceCenter.ContractParameter.failed", "SpaceCenter.ContractParameter.optional", "SpaceCenter.ContractParameter.funds_completion", "SpaceCenter.ContractParameter.funds_failure", "SpaceCenter.ContractParameter.reputation_completion", "SpaceCenter.ContractParameter.reputation_failure", "SpaceCenter.ContractParameter.science_completion"], "content_text": "Contracts\n¶\nclass\nContractManager\n¶\nContracts manager.\nObtained by calling\ncontract_manager\n.\ntypes\n¶\nA list of all contract types.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nset(str)\nall_contracts\n¶\nA list of all contracts.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nContract\n)\nactive_contracts\n¶\nA list of all active contracts.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nContract\n)\noffered_contracts\n¶\nA list of all offered, but unaccepted, contracts.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nContract\n)\ncompleted_contracts\n¶\nA list of all completed contracts.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nContract\n)\nfailed_contracts\n¶\nA list of all failed contracts.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nContract\n)\nclass\nContract\n¶\nA contract. Can be accessed using\ncontract_manager\n.\ntype\n¶\nType of the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ntitle\n¶\nTitle of the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ndescription\n¶\nDescription of the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nnotes\n¶\nNotes for the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nsynopsis\n¶\nSynopsis for the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nkeywords\n¶\nKeywords for the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nstate\n¶\nState of the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nContractState\nseen\n¶\nWhether the contract has been seen.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nread\n¶\nWhether the contract has been read.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nactive\n¶\nWhether the contract is active.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nfailed\n¶\nWhether the contract has been failed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ncan_be_canceled\n¶\nWhether the contract can be canceled.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ncan_be_declined\n¶\nWhether the contract can be declined.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ncan_be_failed\n¶\nWhether the contract can be failed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\naccept\n(\n)\n¶\nAccept an offered contract.\ncancel\n(\n)\n¶\nCancel an active contract.\ndecline\n(\n)\n¶\nDecline an offered contract.\nfunds_advance\n¶\nFunds received when accepting the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nfunds_completion\n¶\nFunds received on completion of the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nfunds_failure\n¶\nFunds lost if the contract is failed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nreputation_completion\n¶\nReputation gained on completion of the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nreputation_failure\n¶\nReputation lost if the contract is failed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nscience_completion\n¶\nScience gained on completion of the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nparameters\n¶\nParameters for the contract.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nContractParameter\n)\nclass\nContractState\n¶\nThe state of a contract. See\nContract.state\n.\nactive\n¶\nThe contract is active.\ncanceled\n¶\nThe contract has been canceled.\ncompleted\n¶\nThe contract has been completed.\ndeadline_expired\n¶\nThe deadline for the contract has expired.\ndeclined\n¶\nThe contract has been declined.\nfailed\n¶\nThe contract has been failed.\ngenerated\n¶\nThe contract has been generated.\noffered\n¶\nThe contract has been offered to the player.\noffer_expired\n¶\nThe contract was offered to the player, but the offer expired.\nwithdrawn\n¶\nThe contract has been withdrawn.\nclass\nContractParameter\n¶\nA contract parameter. See\nContract.parameters\n.\ntitle\n¶\nTitle of the parameter.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nnotes\n¶\nNotes for the parameter.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nchildren\n¶\nChild contract parameters.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nContractParameter\n)\ncompleted\n¶\nWhether the parameter has been completed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nfailed\n¶\nWhether the parameter has been failed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\noptional\n¶\nWhether the contract parameter is optional.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nfunds_completion\n¶\nFunds received on completion of the contract parameter.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nfunds_failure\n¶\nFunds lost if the contract parameter is failed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nreputation_completion\n¶\nReputation gained on completion of the contract parameter.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nreputation_failure\n¶\nReputation lost if the contract parameter is failed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nscience_completion\n¶\nScience gained on completion of the contract parameter.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/geometry-types.html", "title": "Geometry Types¶", "headings": ["Vectors¶", "Quaternions¶"], "anchors": ["geometry-types", "vectors", "quaternions"], "content_text": "Geometry Types\n¶\nVectors\n¶\n3-dimensional vectors are represented as a 3-tuple. For example:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nv\n=\nconn\n.\nspace_center\n.\nactive_vessel\n.\nflight\n()\n.\nprograde\nprint\n(\nv\n[\n0\n],\nv\n[\n1\n],\nv\n[\n2\n])\nQuaternions\n¶\nQuaternions (rotations in 3-dimensional space) are encoded as a 4-tuple\ncontaining the x, y, z and w components. For example:\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nq\n=\nconn\n.\nspace_center\n.\nactive_vessel\n.\nflight\n()\n.\nrotation\nprint\n(\nq\n[\n0\n],\nq\n[\n1\n],\nq\n[\n2\n],\nq\n[\n3\n])"}
{"url": "https://krpc.github.io/krpc/python/api/space-center/alarms.html", "title": "Alarms¶", "headings": [], "anchors": ["alarms", "SpaceCenter.AlarmManager", "SpaceCenter.AlarmManager.alarms", "SpaceCenter.AlarmManager.add_alarm", "SpaceCenter.AlarmManager.add_vessel_alarm", "SpaceCenter.AlarmManager.add_apoapsis_alarm", "SpaceCenter.AlarmManager.add_periapsis_alarm", "SpaceCenter.AlarmManager.add_maneuver_node_alarm", "SpaceCenter.AlarmManager.add_soi_alarm", "SpaceCenter.Alarm", "SpaceCenter.Alarm.id", "SpaceCenter.Alarm.type", "SpaceCenter.Alarm.title", "SpaceCenter.Alarm.description", "SpaceCenter.Alarm.time", "SpaceCenter.Alarm.time_until", "SpaceCenter.Alarm.event_offset", "SpaceCenter.Alarm.vessel"], "content_text": "Alarms\n¶\nclass\nAlarmManager\n¶\nAlarm manager.\nObtained by calling\nalarm_manager\n.\nalarms\n¶\nA list of all alarms.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nAlarm\n)\nstatic\nadd_alarm\n(\ntime\n[\n,\ntitle\n=\n'Alarm'\n]\n[\n,\ndescription\n=\n''\n]\n)\n¶\nCreate an alarm.\nParameters\n:\ntime\n(\nfloat\n) – Number of seconds from now that the alarm should trigger.\ntitle\n(\nstr\n) – Title for the alarm.\ndescription\n(\nstr\n) – Description for the alarm.\nReturn type\n:\nAlarm\nstatic\nadd_vessel_alarm\n(\ntime\n,\nvessel\n[\n,\ntitle\n=\n'Vessel\nAlarm'\n]\n[\n,\ndescription\n=\n''\n]\n)\n¶\nCreate an alarm linked to a vessel.\nParameters\n:\ntime\n(\nfloat\n) – Number of seconds from now that the alarm should trigger.\nvessel\n(\nVessel\n) – Vessel to link the alarm to.\ntitle\n(\nstr\n) – Title for the alarm.\ndescription\n(\nstr\n) – Description for the alarm.\nReturn type\n:\nAlarm\nstatic\nadd_apoapsis_alarm\n(\nvessel\n[\n,\noffset\n=\n60.0\n]\n[\n,\ntitle\n=\n'Apoapsis\nAlarm'\n]\n[\n,\ndescription\n=\n''\n]\n)\n¶\nCreate an alarm for the given vessel’s next apoapsis.\nParameters\n:\nvessel\n(\nVessel\n) – The vessel.\noffset\n(\nfloat\n) – Time in seconds to offset the alarm by.\ntitle\n(\nstr\n) – Title for the alarm.\ndescription\n(\nstr\n) – Description for the alarm.\nReturn type\n:\nAlarm\nstatic\nadd_periapsis_alarm\n(\nvessel\n[\n,\noffset\n=\n60.0\n]\n[\n,\ntitle\n=\n'Periapsis\nAlarm'\n]\n[\n,\ndescription\n=\n''\n]\n)\n¶\nCreate an alarm for the given vessel’s next periapsis.\nParameters\n:\nvessel\n(\nVessel\n) – The vessel.\noffset\n(\nfloat\n) – Time in seconds to offset the alarm by.\ntitle\n(\nstr\n) – Title for the alarm.\ndescription\n(\nstr\n) – Description for the alarm.\nReturn type\n:\nAlarm\nstatic\nadd_maneuver_node_alarm\n(\nvessel\n,\nnode\n[\n,\noffset\n=\n60.0\n]\n[\n,\nadd_burn_time\n=\nTrue\n]\n[\n,\ntitle\n=\n'Maneuver\nNode\nAlarm'\n]\n[\n,\ndescription\n=\n''\n]\n)\n¶\nCreate an alarm for the given vessel and maneuver node.\nParameters\n:\nvessel\n(\nVessel\n) – The vessel.\nnode\n(\nNode\n) – The maneuver node.\noffset\n(\nfloat\n) – Time in seconds to offset the alarm by.\nadd_burn_time\n(\nbool\n) – Whether the node’s burn time should be included in the alarm.\ntitle\n(\nstr\n) – Title for the alarm.\ndescription\n(\nstr\n) – Description for the alarm.\nReturn type\n:\nAlarm\nstatic\nadd_soi_alarm\n(\nvessel\n[\n,\noffset\n=\n60.0\n]\n[\n,\ntitle\n=\n'SOI\nChange\nAlarm'\n]\n[\n,\ndescription\n=\n''\n]\n)\n¶\nCreate an alarm for the given vessel’s next sphere of influence change.\nParameters\n:\nvessel\n(\nVessel\n) – The vessel.\noffset\n(\nfloat\n) – Time in seconds to offset the alarm by.\ntitle\n(\nstr\n) – Title for the alarm.\ndescription\n(\nstr\n) – Description for the alarm.\nReturn type\n:\nAlarm\nclass\nAlarm\n¶\nAn alarm. Can be accessed using\nalarm_manager\n.\nid\n¶\nUnique identifier of the alarm.\nKSP destroys and recreates an alarm when it is edited.\nThis id will remain constant between the old and new alarms.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nint\ntype\n¶\nType of alarm\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ntitle\n¶\nTitle of the alarm\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ndescription\n¶\nDescription of the alarm.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\ntime\n¶\nTime the alarm will trigger.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\ntime_until\n¶\nTime until the alarm triggers.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nevent_offset\n¶\nSeconds between the alarm going off and the event it references.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nvessel\n¶\nVessel the alarm references.\nNone\nif it does not reference a vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nVessel"}
{"url": "https://krpc.github.io/krpc/python/api/drawing/drawing.html", "title": "Drawing¶", "headings": [], "anchors": ["module-Drawing", "drawing", "Drawing.add_line", "Drawing.add_direction", "Drawing.add_direction_from_com", "Drawing.add_polygon", "Drawing.add_text", "Drawing.clear"], "content_text": "Drawing\n¶\nProvides functionality for drawing objects in the flight scene.\nstatic\nadd_line\n(\nstart\n,\nend\n,\nreference_frame\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nDraw a line in the scene.\nParameters\n:\nstart\n(\ntuple\n) – Position of the start of the line.\nend\n(\ntuple\n) – Position of the end of the line.\nreference_frame\n(\nSpaceCenter.ReferenceFrame\n) – Reference frame that the positions are in.\nvisible\n(\nbool\n) – Whether the line is visible.\nReturn type\n:\nLine\nGame Scenes\n:\nFlight\nstatic\nadd_direction\n(\ndirection\n,\nreference_frame\n[\n,\nlength\n=\n10.0\n]\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nDraw a direction vector in the scene, starting from the origin of the given reference frame.\nParameters\n:\ndirection\n(\ntuple\n) – Direction to draw the line in.\nreference_frame\n(\nSpaceCenter.ReferenceFrame\n) – Reference frame that the direction is in and defines the start position.\nlength\n(\nfloat\n) – The length of the line.\nvisible\n(\nbool\n) – Whether the line is visible.\nReturn type\n:\nLine\nGame Scenes\n:\nFlight\nstatic\nadd_direction_from_com\n(\ndirection\n,\nreference_frame\n[\n,\nlength\n=\n10.0\n]\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nDraw a direction vector in the scene, from the center of mass of the active vessel.\nParameters\n:\ndirection\n(\ntuple\n) – Direction to draw the line in.\nreference_frame\n(\nSpaceCenter.ReferenceFrame\n) – Reference frame that the direction is in.\nlength\n(\nfloat\n) – The length of the line.\nvisible\n(\nbool\n) – Whether the line is visible.\nReturn type\n:\nLine\nGame Scenes\n:\nFlight\nstatic\nadd_polygon\n(\nvertices\n,\nreference_frame\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nDraw a polygon in the scene, defined by a list of vertices.\nParameters\n:\nvertices\n(\nlist\n) – Vertices of the polygon.\nreference_frame\n(\nSpaceCenter.ReferenceFrame\n) – Reference frame that the vertices are in.\nvisible\n(\nbool\n) – Whether the polygon is visible.\nReturn type\n:\nPolygon\nGame Scenes\n:\nFlight\nstatic\nadd_text\n(\ntext\n,\nreference_frame\n,\nposition\n,\nrotation\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nDraw text in the scene.\nParameters\n:\ntext\n(\nstr\n) – The string to draw.\nreference_frame\n(\nSpaceCenter.ReferenceFrame\n) – Reference frame that the text position is in.\nposition\n(\ntuple\n) – Position of the text.\nrotation\n(\ntuple\n) – Rotation of the text, as a quaternion.\nvisible\n(\nbool\n) – Whether the text is visible.\nReturn type\n:\nText\nGame Scenes\n:\nFlight\nstatic\nclear\n(\n[\nclient_only\n=\nFalse\n]\n)\n¶\nRemove all objects being drawn.\nParameters\n:\nclient_only\n(\nbool\n) – If true, only remove objects created by the calling client.\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/drawing/line.html", "title": "Line¶", "headings": [], "anchors": ["line", "Drawing.Line", "Drawing.Line.start", "Drawing.Line.end", "Drawing.Line.reference_frame", "Drawing.Line.visible", "Drawing.Line.color", "Drawing.Line.material", "Drawing.Line.thickness", "Drawing.Line.remove"], "content_text": "Line\n¶\nclass\nLine\n¶\nA line. Created using\nadd_line()\n.\nstart\n¶\nStart position of the line.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nend\n¶\nEnd position of the line.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nreference_frame\n¶\nReference frame for the positions of the object.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.ReferenceFrame\nGame Scenes\n:\nFlight\nvisible\n¶\nWhether the object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\ncolor\n¶\nSet the color\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nmaterial\n¶\nMaterial used to render the object.\nCreates the material from a shader with the given name.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nthickness\n¶\nSet the thickness\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nremove\n(\n)\n¶\nRemove the object.\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/drawing/polygon.html", "title": "Polygon¶", "headings": [], "anchors": ["polygon", "Drawing.Polygon", "Drawing.Polygon.vertices", "Drawing.Polygon.reference_frame", "Drawing.Polygon.visible", "Drawing.Polygon.remove", "Drawing.Polygon.color", "Drawing.Polygon.material", "Drawing.Polygon.thickness"], "content_text": "Polygon\n¶\nclass\nPolygon\n¶\nA polygon. Created using\nadd_polygon()\n.\nvertices\n¶\nVertices for the polygon.\nAttribute\n:\nCan be read or written\nReturn type\n:\nlist(tuple(float, float, float))\nGame Scenes\n:\nFlight\nreference_frame\n¶\nReference frame for the positions of the object.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.ReferenceFrame\nGame Scenes\n:\nFlight\nvisible\n¶\nWhether the object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nremove\n(\n)\n¶\nRemove the object.\nGame Scenes\n:\nFlight\ncolor\n¶\nSet the color\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nmaterial\n¶\nMaterial used to render the object.\nCreates the material from a shader with the given name.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nthickness\n¶\nSet the thickness\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/drawing/text.html", "title": "Text¶", "headings": [], "anchors": ["text", "Drawing.Text", "Drawing.Text.position", "Drawing.Text.rotation", "Drawing.Text.reference_frame", "Drawing.Text.visible", "Drawing.Text.remove", "Drawing.Text.content", "Drawing.Text.font", "Drawing.Text.available_fonts", "Drawing.Text.size", "Drawing.Text.character_size", "Drawing.Text.style", "Drawing.Text.color", "Drawing.Text.material", "Drawing.Text.alignment", "Drawing.Text.line_spacing", "Drawing.Text.anchor"], "content_text": "Text\n¶\nclass\nText\n¶\nText. Created using\nadd_text()\n.\nposition\n¶\nPosition of the text.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nrotation\n¶\nRotation of the text as a quaternion.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float, float)\nGame Scenes\n:\nFlight\nreference_frame\n¶\nReference frame for the positions of the object.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.ReferenceFrame\nGame Scenes\n:\nFlight\nvisible\n¶\nWhether the object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nremove\n(\n)\n¶\nRemove the object.\nGame Scenes\n:\nFlight\ncontent\n¶\nThe text string\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nfont\n¶\nName of the font\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nstatic\navailable_fonts\n(\n)\n¶\nA list of all available fonts.\nReturn type\n:\nlist(str)\nGame Scenes\n:\nFlight\nsize\n¶\nFont size.\nAttribute\n:\nCan be read or written\nReturn type\n:\nint\nGame Scenes\n:\nFlight\ncharacter_size\n¶\nCharacter size.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nstyle\n¶\nFont style.\nAttribute\n:\nCan be read or written\nReturn type\n:\nUI.FontStyle\nGame Scenes\n:\nFlight\ncolor\n¶\nSet the color\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nGame Scenes\n:\nFlight\nmaterial\n¶\nMaterial used to render the object.\nCreates the material from a shader with the given name.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nalignment\n¶\nAlignment.\nAttribute\n:\nCan be read or written\nReturn type\n:\nUI.TextAlignment\nGame Scenes\n:\nFlight\nline_spacing\n¶\nLine spacing.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nanchor\n¶\nAnchor.\nAttribute\n:\nCan be read or written\nReturn type\n:\nUI.TextAnchor\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/ui/ui.html", "title": "UI¶", "headings": [], "anchors": ["module-UI", "ui", "UI.stock_canvas", "UI.add_canvas", "UI.message", "UI.clear", "UI.MessagePosition", "UI.MessagePosition.top_left", "UI.MessagePosition.top_center", "UI.MessagePosition.top_right", "UI.MessagePosition.bottom_center"], "content_text": "UI\n¶\nProvides functionality for drawing and interacting with in-game user interface elements.\nstock_canvas\n¶\nThe stock UI canvas.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nCanvas\nstatic\nadd_canvas\n(\n)\n¶\nAdd a new canvas.\nReturn type\n:\nCanvas\nNote\nIf you want to add UI elements to KSPs stock UI canvas, use\nstock_canvas\n.\nstatic\nmessage\n(\ncontent\n[\n,\nduration\n=\n1.0\n]\n[\n,\nposition\n=\nMessagePosition(1)\n]\n[\n,\ncolor\n=\n(1.0\n,\n0.92\n,\n0.016)\n]\n[\n,\nsize\n=\n20.0\n]\n)\n¶\nDisplay a message on the screen.\nParameters\n:\ncontent\n(\nstr\n) – Message content.\nduration\n(\nfloat\n) – Duration before the message disappears, in seconds.\nposition\n(\nMessagePosition\n) – Position to display the message.\ncolor\n(\ntuple\n) – The color of the message.\nsize\n(\nfloat\n) – Size of the message, differs per position.\nNote\nThe message appears just like a stock message, for example quicksave or quickload messages.\nstatic\nclear\n(\n[\nclient_only\n=\nFalse\n]\n)\n¶\nRemove all user interface elements.\nParameters\n:\nclient_only\n(\nbool\n) – If true, only remove objects created by the calling client.\nclass\nMessagePosition\n¶\nMessage position.\ntop_left\n¶\nTop left.\ntop_center\n¶\nTop center.\ntop_right\n¶\nTop right.\nbottom_center\n¶\nBottom center."}
{"url": "https://krpc.github.io/krpc/python/api/ui/canvas.html", "title": "Canvas¶", "headings": [], "anchors": ["canvas", "UI.Canvas", "UI.Canvas.rect_transform", "UI.Canvas.visible", "UI.Canvas.add_panel", "UI.Canvas.add_text", "UI.Canvas.add_input_field", "UI.Canvas.add_button", "UI.Canvas.remove"], "content_text": "Canvas\n¶\nclass\nCanvas\n¶\nA canvas for user interface elements. See\nstock_canvas\nand\nadd_canvas()\n.\nrect_transform\n¶\nThe rect transform for the canvas.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRectTransform\nvisible\n¶\nWhether the UI object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nadd_panel\n(\n[\nvisible\n=\nTrue\n]\n)\n¶\nCreate a new container for user interface elements.\nParameters\n:\nvisible\n(\nbool\n) – Whether the panel is visible.\nReturn type\n:\nPanel\nadd_text\n(\ncontent\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nAdd text to the canvas.\nParameters\n:\ncontent\n(\nstr\n) – The text.\nvisible\n(\nbool\n) – Whether the text is visible.\nReturn type\n:\nText\nadd_input_field\n(\n[\nvisible\n=\nTrue\n]\n)\n¶\nAdd an input field to the canvas.\nParameters\n:\nvisible\n(\nbool\n) – Whether the input field is visible.\nReturn type\n:\nInputField\nadd_button\n(\ncontent\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nAdd a button to the canvas.\nParameters\n:\ncontent\n(\nstr\n) – The label for the button.\nvisible\n(\nbool\n) – Whether the button is visible.\nReturn type\n:\nButton\nremove\n(\n)\n¶\nRemove the UI object."}
{"url": "https://krpc.github.io/krpc/python/api/ui/panel.html", "title": "Panel¶", "headings": [], "anchors": ["panel", "UI.Panel", "UI.Panel.rect_transform", "UI.Panel.visible", "UI.Panel.add_panel", "UI.Panel.add_text", "UI.Panel.add_input_field", "UI.Panel.add_button", "UI.Panel.remove"], "content_text": "Panel\n¶\nclass\nPanel\n¶\nA container for user interface elements. See\nCanvas.add_panel()\n.\nrect_transform\n¶\nThe rect transform for the panel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRectTransform\nvisible\n¶\nWhether the UI object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nadd_panel\n(\n[\nvisible\n=\nTrue\n]\n)\n¶\nCreate a panel within this panel.\nParameters\n:\nvisible\n(\nbool\n) – Whether the new panel is visible.\nReturn type\n:\nPanel\nadd_text\n(\ncontent\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nAdd text to the panel.\nParameters\n:\ncontent\n(\nstr\n) – The text.\nvisible\n(\nbool\n) – Whether the text is visible.\nReturn type\n:\nText\nadd_input_field\n(\n[\nvisible\n=\nTrue\n]\n)\n¶\nAdd an input field to the panel.\nParameters\n:\nvisible\n(\nbool\n) – Whether the input field is visible.\nReturn type\n:\nInputField\nadd_button\n(\ncontent\n[\n,\nvisible\n=\nTrue\n]\n)\n¶\nAdd a button to the panel.\nParameters\n:\ncontent\n(\nstr\n) – The label for the button.\nvisible\n(\nbool\n) – Whether the button is visible.\nReturn type\n:\nButton\nremove\n(\n)\n¶\nRemove the UI object."}
{"url": "https://krpc.github.io/krpc/python/api/ui/text.html", "title": "Text¶", "headings": [], "anchors": ["text", "UI.Text", "UI.Text.rect_transform", "UI.Text.visible", "UI.Text.content", "UI.Text.font", "UI.Text.available_fonts", "UI.Text.size", "UI.Text.style", "UI.Text.color", "UI.Text.alignment", "UI.Text.line_spacing", "UI.Text.remove", "UI.FontStyle", "UI.FontStyle.normal", "UI.FontStyle.bold", "UI.FontStyle.italic", "UI.FontStyle.bold_and_italic", "UI.TextAlignment", "UI.TextAlignment.left", "UI.TextAlignment.right", "UI.TextAlignment.center", "UI.TextAnchor", "UI.TextAnchor.lower_center", "UI.TextAnchor.lower_left", "UI.TextAnchor.lower_right", "UI.TextAnchor.middle_center", "UI.TextAnchor.middle_left", "UI.TextAnchor.middle_right", "UI.TextAnchor.upper_center", "UI.TextAnchor.upper_left", "UI.TextAnchor.upper_right"], "content_text": "Text\n¶\nclass\nText\n¶\nA text label. See\nPanel.add_text()\n.\nrect_transform\n¶\nThe rect transform for the text.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRectTransform\nvisible\n¶\nWhether the UI object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ncontent\n¶\nThe text string\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nfont\n¶\nName of the font\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\navailable_fonts\n¶\nA list of all available fonts.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nsize\n¶\nFont size.\nAttribute\n:\nCan be read or written\nReturn type\n:\nint\nstyle\n¶\nFont style.\nAttribute\n:\nCan be read or written\nReturn type\n:\nFontStyle\ncolor\n¶\nSet the color\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nalignment\n¶\nAlignment.\nAttribute\n:\nCan be read or written\nReturn type\n:\nTextAnchor\nline_spacing\n¶\nLine spacing.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nremove\n(\n)\n¶\nRemove the UI object.\nclass\nFontStyle\n¶\nFont style.\nnormal\n¶\nNormal.\nbold\n¶\nBold.\nitalic\n¶\nItalic.\nbold_and_italic\n¶\nBold and italic.\nclass\nTextAlignment\n¶\nText alignment.\nleft\n¶\nLeft aligned.\nright\n¶\nRight aligned.\ncenter\n¶\nCenter aligned.\nclass\nTextAnchor\n¶\nText alignment.\nlower_center\n¶\nLower center.\nlower_left\n¶\nLower left.\nlower_right\n¶\nLower right.\nmiddle_center\n¶\nMiddle center.\nmiddle_left\n¶\nMiddle left.\nmiddle_right\n¶\nMiddle right.\nupper_center\n¶\nUpper center.\nupper_left\n¶\nUpper left.\nupper_right\n¶\nUpper right."}
{"url": "https://krpc.github.io/krpc/python/api/ui/button.html", "title": "Button¶", "headings": [], "anchors": ["button", "UI.Button", "UI.Button.rect_transform", "UI.Button.visible", "UI.Button.text", "UI.Button.clicked", "UI.Button.remove"], "content_text": "Button\n¶\nclass\nButton\n¶\nA text label. See\nPanel.add_button()\n.\nrect_transform\n¶\nThe rect transform for the text.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRectTransform\nvisible\n¶\nWhether the UI object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\ntext\n¶\nThe text for the button.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nText\nclicked\n¶\nWhether the button has been clicked.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nNote\nThis property is set to true when the user clicks the button.\nA client script should reset the property to false in order to detect subsequent button presses.\nremove\n(\n)\n¶\nRemove the UI object."}
{"url": "https://krpc.github.io/krpc/python/api/ui/input-field.html", "title": "InputField¶", "headings": [], "anchors": ["inputfield", "UI.InputField", "UI.InputField.rect_transform", "UI.InputField.visible", "UI.InputField.value", "UI.InputField.text", "UI.InputField.changed", "UI.InputField.remove"], "content_text": "InputField\n¶\nclass\nInputField\n¶\nAn input field. See\nPanel.add_input_field()\n.\nrect_transform\n¶\nThe rect transform for the input field.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nRectTransform\nvisible\n¶\nWhether the UI object is visible.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nvalue\n¶\nThe value of the input field.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\ntext\n¶\nThe text component of the input field.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nText\nNote\nUse\nInputField.value\nto get and set the value in the field.\nThis object can be used to alter the style of the input field’s text.\nchanged\n¶\nWhether the input field has been changed.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nNote\nThis property is set to true when the user modifies the value of the input field.\nA client script should reset the property to false in order to detect subsequent changes.\nremove\n(\n)\n¶\nRemove the UI object."}
{"url": "https://krpc.github.io/krpc/python/api/ui/rect-transform.html", "title": "Rect Transform¶", "headings": [], "anchors": ["rect-transform", "UI.RectTransform", "UI.RectTransform.position", "UI.RectTransform.local_position", "UI.RectTransform.size", "UI.RectTransform.upper_right", "UI.RectTransform.lower_left", "UI.RectTransform.anchor", "UI.RectTransform.anchor_max", "UI.RectTransform.anchor_min", "UI.RectTransform.pivot", "UI.RectTransform.rotation", "UI.RectTransform.scale"], "content_text": "Rect Transform\n¶\nclass\nRectTransform\n¶\nA Unity engine Rect Transform for a UI object.\nSee the\nUnity manual\nfor more details.\nposition\n¶\nPosition of the rectangles pivot point relative to the anchors.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float)\nlocal_position\n¶\nPosition of the rectangles pivot point relative to the anchors.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)\nsize\n¶\nWidth and height of the rectangle.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float)\nupper_right\n¶\nPosition of the rectangles upper right corner relative to the anchors.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float)\nlower_left\n¶\nPosition of the rectangles lower left corner relative to the anchors.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float)\nanchor\n¶\nSet the minimum and maximum anchor points as a fraction of the size of the parent rectangle.\nAttribute\n:\nWrite-only, cannot be read\nReturn type\n:\ntuple(float, float)\nanchor_max\n¶\nThe anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float)\nanchor_min\n¶\nThe anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float)\npivot\n¶\nLocation of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float)\nrotation\n¶\nRotation, as a quaternion, of the object around its pivot point.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float, float)\nscale\n¶\nScale factor applied to the object in the x, y and z dimensions.\nAttribute\n:\nCan be read or written\nReturn type\n:\ntuple(float, float, float)"}
{"url": "https://krpc.github.io/krpc/python/api/infernal-robotics/infernal-robotics.html", "title": "InfernalRobotics¶", "headings": [], "anchors": ["module-InfernalRobotics", "infernalrobotics", "InfernalRobotics.available", "InfernalRobotics.ready", "InfernalRobotics.servo_groups", "InfernalRobotics.servo_group_with_name", "InfernalRobotics.servo_with_name"], "content_text": "InfernalRobotics\n¶\nThis service provides functionality to interact with\nInfernal Robotics\n.\navailable\n¶\nWhether Infernal Robotics is installed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nready\n¶\nWhether Infernal Robotics API is ready.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nstatic\nservo_groups\n(\nvessel\n)\n¶\nA list of all the servo groups in the given\nvessel\n.\nParameters\n:\nvessel\n(\nSpaceCenter.Vessel\n) –\nReturn type\n:\nlist(\nServoGroup\n)\nGame Scenes\n:\nFlight\nstatic\nservo_group_with_name\n(\nvessel\n,\nname\n)\n¶\nReturns the servo group in the given\nvessel\nwith the given\nname\n,\nor\nNone\nif none exists. If multiple servo groups have the same name, only one of them is returned.\nParameters\n:\nvessel\n(\nSpaceCenter.Vessel\n) – Vessel to check.\nname\n(\nstr\n) – Name of servo group to find.\nReturn type\n:\nServoGroup\nGame Scenes\n:\nFlight\nstatic\nservo_with_name\n(\nvessel\n,\nname\n)\n¶\nReturns the servo in the given\nvessel\nwith the given\nname\nor\nNone\nif none exists. If multiple servos have the same name, only one of them is returned.\nParameters\n:\nvessel\n(\nSpaceCenter.Vessel\n) – Vessel to check.\nname\n(\nstr\n) – Name of the servo to find.\nReturn type\n:\nServo\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/infernal-robotics/servo-group.html", "title": "ServoGroup¶", "headings": [], "anchors": ["servogroup", "InfernalRobotics.ServoGroup", "InfernalRobotics.ServoGroup.name", "InfernalRobotics.ServoGroup.forward_key", "InfernalRobotics.ServoGroup.reverse_key", "InfernalRobotics.ServoGroup.speed", "InfernalRobotics.ServoGroup.expanded", "InfernalRobotics.ServoGroup.servos", "InfernalRobotics.ServoGroup.servo_with_name", "InfernalRobotics.ServoGroup.parts", "InfernalRobotics.ServoGroup.move_right", "InfernalRobotics.ServoGroup.move_left", "InfernalRobotics.ServoGroup.move_center", "InfernalRobotics.ServoGroup.move_next_preset", "InfernalRobotics.ServoGroup.move_prev_preset", "InfernalRobotics.ServoGroup.stop"], "content_text": "ServoGroup\n¶\nclass\nServoGroup\n¶\nA group of servos, obtained by calling\nservo_groups()\nor\nservo_group_with_name()\n. Represents the “Servo Groups”\nin the InfernalRobotics UI.\nname\n¶\nThe name of the group.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nforward_key\n¶\nThe key assigned to be the “forward” key for the group.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nreverse_key\n¶\nThe key assigned to be the “reverse” key for the group.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\nspeed\n¶\nThe speed multiplier for the group.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nexpanded\n¶\nWhether the group is expanded in the InfernalRobotics UI.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nservos\n¶\nThe servos that are in the group.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nServo\n)\nGame Scenes\n:\nFlight\nservo_with_name\n(\nname\n)\n¶\nReturns the servo with the given\nname\nfrom this group,\nor\nNone\nif none exists.\nParameters\n:\nname\n(\nstr\n) – Name of servo to find.\nReturn type\n:\nServo\nGame Scenes\n:\nFlight\nparts\n¶\nThe parts containing the servos in the group.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nSpaceCenter.Part\n)\nGame Scenes\n:\nFlight\nmove_right\n(\n)\n¶\nMoves all of the servos in the group to the right.\nGame Scenes\n:\nFlight\nmove_left\n(\n)\n¶\nMoves all of the servos in the group to the left.\nGame Scenes\n:\nFlight\nmove_center\n(\n)\n¶\nMoves all of the servos in the group to the center.\nGame Scenes\n:\nFlight\nmove_next_preset\n(\n)\n¶\nMoves all of the servos in the group to the next preset.\nGame Scenes\n:\nFlight\nmove_prev_preset\n(\n)\n¶\nMoves all of the servos in the group to the previous preset.\nGame Scenes\n:\nFlight\nstop\n(\n)\n¶\nStops the servos in the group.\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/infernal-robotics/servo.html", "title": "Servo¶", "headings": [], "anchors": ["servo", "InfernalRobotics.Servo", "InfernalRobotics.Servo.name", "InfernalRobotics.Servo.part", "InfernalRobotics.Servo.highlight", "InfernalRobotics.Servo.position", "InfernalRobotics.Servo.min_config_position", "InfernalRobotics.Servo.max_config_position", "InfernalRobotics.Servo.min_position", "InfernalRobotics.Servo.max_position", "InfernalRobotics.Servo.config_speed", "InfernalRobotics.Servo.speed", "InfernalRobotics.Servo.current_speed", "InfernalRobotics.Servo.acceleration", "InfernalRobotics.Servo.is_moving", "InfernalRobotics.Servo.is_free_moving", "InfernalRobotics.Servo.is_locked", "InfernalRobotics.Servo.is_axis_inverted", "InfernalRobotics.Servo.move_right", "InfernalRobotics.Servo.move_left", "InfernalRobotics.Servo.move_center", "InfernalRobotics.Servo.move_to", "InfernalRobotics.Servo.stop"], "content_text": "Servo\n¶\nclass\nServo\n¶\nRepresents a servo. Obtained using\nServoGroup.servos\n,\nServoGroup.servo_with_name()\nor\nservo_with_name()\n.\nname\n¶\nThe name of the servo.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nGame Scenes\n:\nFlight\npart\n¶\nThe part containing the servo.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSpaceCenter.Part\nGame Scenes\n:\nFlight\nhighlight\n¶\nWhether the servo should be highlighted in-game.\nAttribute\n:\nWrite-only, cannot be read\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nposition\n¶\nThe position of the servo.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmin_config_position\n¶\nThe minimum position of the servo, specified by the part configuration.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax_config_position\n¶\nThe maximum position of the servo, specified by the part configuration.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmin_position\n¶\nThe minimum position of the servo, specified by the in-game tweak menu.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nmax_position\n¶\nThe maximum position of the servo, specified by the in-game tweak menu.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nconfig_speed\n¶\nThe speed multiplier of the servo, specified by the part configuration.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nspeed\n¶\nThe speed multiplier of the servo, specified by the in-game tweak menu.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\ncurrent_speed\n¶\nThe current speed at which the servo is moving.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nacceleration\n¶\nThe current speed multiplier set in the UI.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nGame Scenes\n:\nFlight\nis_moving\n¶\nWhether the servo is moving.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nis_free_moving\n¶\nWhether the servo is freely moving.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nis_locked\n¶\nWhether the servo is locked.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nis_axis_inverted\n¶\nWhether the servos axis is inverted.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nGame Scenes\n:\nFlight\nmove_right\n(\n)\n¶\nMoves the servo to the right.\nGame Scenes\n:\nFlight\nmove_left\n(\n)\n¶\nMoves the servo to the left.\nGame Scenes\n:\nFlight\nmove_center\n(\n)\n¶\nMoves the servo to the center.\nGame Scenes\n:\nFlight\nmove_to\n(\nposition\n,\nspeed\n)\n¶\nMoves the servo to\nposition\nand sets the\nspeed multiplier to\nspeed\n.\nParameters\n:\nposition\n(\nfloat\n) – The position to move the servo to.\nspeed\n(\nfloat\n) – Speed multiplier for the movement.\nGame Scenes\n:\nFlight\nstop\n(\n)\n¶\nStops the servo.\nGame Scenes\n:\nFlight"}
{"url": "https://krpc.github.io/krpc/python/api/kerbal-alarm-clock/kerbal-alarm-clock.html", "title": "KerbalAlarmClock¶", "headings": [], "anchors": ["module-KerbalAlarmClock", "kerbalalarmclock", "KerbalAlarmClock.available", "KerbalAlarmClock.alarms", "KerbalAlarmClock.alarm_with_name", "KerbalAlarmClock.alarms_with_type", "KerbalAlarmClock.create_alarm"], "content_text": "KerbalAlarmClock\n¶\nThis service provides functionality to interact with\nKerbal Alarm Clock\n.\navailable\n¶\nWhether Kerbal Alarm Clock is available.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nalarms\n¶\nA list of all the alarms.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nAlarm\n)\nstatic\nalarm_with_name\n(\nname\n)\n¶\nGet the alarm with the given\nname\n, or\nNone\nif no alarms have that name. If more than one alarm has the name,\nonly returns one of them.\nParameters\n:\nname\n(\nstr\n) – Name of the alarm to search for.\nReturn type\n:\nAlarm\nstatic\nalarms_with_type\n(\ntype\n)\n¶\nGet a list of alarms of the specified\ntype\n.\nParameters\n:\ntype\n(\nAlarmType\n) – Type of alarm to return.\nReturn type\n:\nlist(\nAlarm\n)\nstatic\ncreate_alarm\n(\ntype\n,\nname\n,\nut\n)\n¶\nCreate a new alarm and return it.\nParameters\n:\ntype\n(\nAlarmType\n) – Type of the new alarm.\nname\n(\nstr\n) – Name of the new alarm.\nut\n(\nfloat\n) – Time at which the new alarm should trigger.\nReturn type\n:\nAlarm"}
{"url": "https://krpc.github.io/krpc/python/api/kerbal-alarm-clock/alarm.html", "title": "Alarm¶", "headings": [], "anchors": ["alarm", "KerbalAlarmClock.Alarm", "KerbalAlarmClock.Alarm.action", "KerbalAlarmClock.Alarm.margin", "KerbalAlarmClock.Alarm.time", "KerbalAlarmClock.Alarm.type", "KerbalAlarmClock.Alarm.id", "KerbalAlarmClock.Alarm.name", "KerbalAlarmClock.Alarm.notes", "KerbalAlarmClock.Alarm.remaining", "KerbalAlarmClock.Alarm.repeat", "KerbalAlarmClock.Alarm.repeat_period", "KerbalAlarmClock.Alarm.vessel", "KerbalAlarmClock.Alarm.xfer_origin_body", "KerbalAlarmClock.Alarm.xfer_target_body", "KerbalAlarmClock.Alarm.remove"], "content_text": "Alarm\n¶\nclass\nAlarm\n¶\nRepresents an alarm. Obtained by calling\nalarms\n,\nalarm_with_name()\nor\nalarms_with_type()\n.\naction\n¶\nThe action that the alarm triggers.\nAttribute\n:\nCan be read or written\nReturn type\n:\nAlarmAction\nmargin\n¶\nThe number of seconds before the event that the alarm will fire.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ntime\n¶\nThe time at which the alarm will fire.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\ntype\n¶\nThe type of the alarm.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nAlarmType\nid\n¶\nThe unique identifier for the alarm.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nstr\nname\n¶\nThe short name of the alarm.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nnotes\n¶\nThe long description of the alarm.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\nremaining\n¶\nThe number of seconds until the alarm will fire.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nrepeat\n¶\nWhether the alarm will be repeated after it has fired.\nAttribute\n:\nCan be read or written\nReturn type\n:\nbool\nrepeat_period\n¶\nThe time delay to automatically create an alarm after it has fired.\nAttribute\n:\nCan be read or written\nReturn type\n:\nfloat\nvessel\n¶\nThe vessel that the alarm is attached to.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.Vessel\nxfer_origin_body\n¶\nThe celestial body the vessel is departing from.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.CelestialBody\nxfer_target_body\n¶\nThe celestial body the vessel is arriving at.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.CelestialBody\nremove\n(\n)\n¶\nRemoves the alarm."}
{"url": "https://krpc.github.io/krpc/python/api/kerbal-alarm-clock/alarm-type.html", "title": "AlarmType¶", "headings": [], "anchors": ["alarmtype", "KerbalAlarmClock.AlarmType", "KerbalAlarmClock.AlarmType.raw", "KerbalAlarmClock.AlarmType.maneuver", "KerbalAlarmClock.AlarmType.maneuver_auto", "KerbalAlarmClock.AlarmType.apoapsis", "KerbalAlarmClock.AlarmType.periapsis", "KerbalAlarmClock.AlarmType.ascending_node", "KerbalAlarmClock.AlarmType.descending_node", "KerbalAlarmClock.AlarmType.closest", "KerbalAlarmClock.AlarmType.contract", "KerbalAlarmClock.AlarmType.contract_auto", "KerbalAlarmClock.AlarmType.crew", "KerbalAlarmClock.AlarmType.distance", "KerbalAlarmClock.AlarmType.earth_time", "KerbalAlarmClock.AlarmType.launch_rendevous", "KerbalAlarmClock.AlarmType.soi_change", "KerbalAlarmClock.AlarmType.soi_change_auto", "KerbalAlarmClock.AlarmType.transfer", "KerbalAlarmClock.AlarmType.transfer_modelled"], "content_text": "AlarmType\n¶\nclass\nAlarmType\n¶\nThe type of an alarm.\nraw\n¶\nAn alarm for a specific date/time or a specific period in the future.\nmaneuver\n¶\nAn alarm based on the next maneuver node on the current ships flight path.\nThis node will be stored and can be restored when you come back to the ship.\nmaneuver_auto\n¶\nSee\nAlarmType.maneuver\n.\napoapsis\n¶\nAn alarm for furthest part of the orbit from the planet.\nperiapsis\n¶\nAn alarm for nearest part of the orbit from the planet.\nascending_node\n¶\nAscending node for the targeted object, or equatorial ascending node.\ndescending_node\n¶\nDescending node for the targeted object, or equatorial descending node.\nclosest\n¶\nAn alarm based on the closest approach of this vessel to the targeted\nvessel, some number of orbits into the future.\ncontract\n¶\nAn alarm based on the expiry or deadline of contracts in career modes.\ncontract_auto\n¶\nSee\nAlarmType.contract\n.\ncrew\n¶\nAn alarm that is attached to a crew member.\ndistance\n¶\nAn alarm that is triggered when a selected target comes within a chosen distance.\nearth_time\n¶\nAn alarm based on the time in the “Earth” alternative Universe (aka the Real World).\nlaunch_rendevous\n¶\nAn alarm that fires as your landed craft passes under the orbit of your target.\nsoi_change\n¶\nAn alarm manually based on when the next SOI point is on the flight path\nor set to continually monitor the active flight path and add alarms as it\ndetects SOI changes.\nsoi_change_auto\n¶\nSee\nAlarmType.soi_change\n.\ntransfer\n¶\nAn alarm based on Interplanetary Transfer Phase Angles, i.e. when should\nI launch to planet X? Based on Kosmo Not’s post and used in Olex’s\nCalculator.\ntransfer_modelled\n¶\nSee\nAlarmType.transfer\n."}
{"url": "https://krpc.github.io/krpc/python/api/kerbal-alarm-clock/alarm-action.html", "title": "AlarmAction¶", "headings": [], "anchors": ["alarmaction", "KerbalAlarmClock.AlarmAction", "KerbalAlarmClock.AlarmAction.do_nothing", "KerbalAlarmClock.AlarmAction.do_nothing_delete_when_passed", "KerbalAlarmClock.AlarmAction.kill_warp", "KerbalAlarmClock.AlarmAction.kill_warp_only", "KerbalAlarmClock.AlarmAction.message_only", "KerbalAlarmClock.AlarmAction.pause_game"], "content_text": "AlarmAction\n¶\nclass\nAlarmAction\n¶\nThe action performed by an alarm when it fires.\ndo_nothing\n¶\nDon’t do anything at all…\ndo_nothing_delete_when_passed\n¶\nDon’t do anything, and delete the alarm.\nkill_warp\n¶\nDrop out of time warp.\nkill_warp_only\n¶\nDrop out of time warp.\nmessage_only\n¶\nDisplay a message.\npause_game\n¶\nPause the game."}
{"url": "https://krpc.github.io/krpc/python/api/remote-tech/remote-tech.html", "title": "RemoteTech¶", "headings": [], "anchors": ["module-RemoteTech", "remotetech", "RemoteTech.available", "RemoteTech.ground_stations", "RemoteTech.antenna", "RemoteTech.comms"], "content_text": "RemoteTech\n¶\nThis service provides functionality to interact with\nRemoteTech\n.\navailable\n¶\nWhether RemoteTech is installed.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nground_stations\n¶\nThe names of the ground stations.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(str)\nstatic\nantenna\n(\npart\n)\n¶\nGet the antenna object for a particular part.\nParameters\n:\npart\n(\nSpaceCenter.Part\n) –\nReturn type\n:\nAntenna\nstatic\ncomms\n(\nvessel\n)\n¶\nGet a communications object, representing the communication capability of a particular vessel.\nParameters\n:\nvessel\n(\nSpaceCenter.Vessel\n) –\nReturn type\n:\nComms"}
{"url": "https://krpc.github.io/krpc/python/api/remote-tech/comms.html", "title": "Comms¶", "headings": [], "anchors": ["comms", "RemoteTech.Comms", "RemoteTech.Comms.vessel", "RemoteTech.Comms.has_local_control", "RemoteTech.Comms.has_flight_computer", "RemoteTech.Comms.has_connection", "RemoteTech.Comms.has_connection_to_ground_station", "RemoteTech.Comms.signal_delay", "RemoteTech.Comms.signal_delay_to_ground_station", "RemoteTech.Comms.signal_delay_to_vessel", "RemoteTech.Comms.antennas"], "content_text": "Comms\n¶\nclass\nComms\n¶\nCommunications for a vessel.\nvessel\n¶\nGet the vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSpaceCenter.Vessel\nhas_local_control\n¶\nWhether the vessel can be controlled locally.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_flight_computer\n¶\nWhether the vessel has a flight computer on board.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_connection\n¶\nWhether the vessel has any connection.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nhas_connection_to_ground_station\n¶\nWhether the vessel has a connection to a ground station.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nsignal_delay\n¶\nThe shortest signal delay to the vessel, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsignal_delay_to_ground_station\n¶\nThe signal delay between the vessel and the closest ground station, in seconds.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nfloat\nsignal_delay_to_vessel\n(\nother\n)\n¶\nThe signal delay between the this vessel and another vessel, in seconds.\nParameters\n:\nother\n(\nSpaceCenter.Vessel\n) –\nReturn type\n:\nfloat\nantennas\n¶\nThe antennas for this vessel.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(\nAntenna\n)"}
{"url": "https://krpc.github.io/krpc/python/api/remote-tech/antenna.html", "title": "Antenna¶", "headings": [], "anchors": ["antenna", "RemoteTech.Antenna", "RemoteTech.Antenna.part", "RemoteTech.Antenna.has_connection", "RemoteTech.Antenna.target", "RemoteTech.Antenna.target_body", "RemoteTech.Antenna.target_ground_station", "RemoteTech.Antenna.target_vessel", "RemoteTech.Target", "RemoteTech.Target.active_vessel", "RemoteTech.Target.celestial_body", "RemoteTech.Target.ground_station", "RemoteTech.Target.vessel", "RemoteTech.Target.none"], "content_text": "Antenna\n¶\nclass\nAntenna\n¶\nA RemoteTech antenna. Obtained by calling\nComms.antennas\nor\nantenna()\n.\npart\n¶\nGet the part containing this antenna.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSpaceCenter.Part\nhas_connection\n¶\nWhether the antenna has a connection.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\ntarget\n¶\nThe object that the antenna is targetting.\nThis property can be used to set the target to\nTarget.none\nor\nTarget.active_vessel\n.\nTo set the target to a celestial body, ground station or vessel see\nAntenna.target_body\n,\nAntenna.target_ground_station\nand\nAntenna.target_vessel\n.\nAttribute\n:\nCan be read or written\nReturn type\n:\nTarget\ntarget_body\n¶\nThe celestial body the antenna is targetting.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.CelestialBody\ntarget_ground_station\n¶\nThe ground station the antenna is targetting.\nAttribute\n:\nCan be read or written\nReturn type\n:\nstr\ntarget_vessel\n¶\nThe vessel the antenna is targetting.\nAttribute\n:\nCan be read or written\nReturn type\n:\nSpaceCenter.Vessel\nclass\nTarget\n¶\nThe type of object an antenna is targetting.\nSee\nAntenna.target\n.\nactive_vessel\n¶\nThe active vessel.\ncelestial_body\n¶\nA celestial body.\nground_station\n¶\nA ground station.\nvessel\n¶\nA specific vessel.\nnone\n¶\nNo target."}
{"url": "https://krpc.github.io/krpc/python/api/lidar/lidar.html", "title": "LiDAR¶", "headings": [], "anchors": ["module-LiDAR", "lidar", "LiDAR.available", "LiDAR.laser"], "content_text": "LiDAR\n¶\nLaserDist service.\navailable\n¶\nCheck if the LaserDist API is available.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nstatic\nlaser\n(\npart\n)\n¶\nGet a LaserDist part.\nParameters\n:\npart\n(\nSpaceCenter.Part\n) –\nReturn type\n:\nLaser"}
{"url": "https://krpc.github.io/krpc/python/api/lidar/laser.html", "title": "Laser¶", "headings": [], "anchors": ["laser", "LiDAR.Laser", "LiDAR.Laser.part", "LiDAR.Laser.cloud"], "content_text": "Laser\n¶\nclass\nLaser\n¶\nA LaserDist laser.\npart\n¶\nGet the part containing this LiDAR.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSpaceCenter.Part\ncloud\n¶\nGet the point cloud from the LiDAR.\nReturns an empty list on failure.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nlist(float)"}
{"url": "https://krpc.github.io/krpc/python/api/docking-camera/docking-camera.html", "title": "DockingCamera¶", "headings": [], "anchors": ["module-DockingCamera", "dockingcamera", "DockingCamera.available", "DockingCamera.camera"], "content_text": "DockingCamera\n¶\nCamera service.\navailable\n¶\nCheck if the Camera API is available.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbool\nstatic\ncamera\n(\npart\n)\n¶\nGet a Camera part.\nParameters\n:\npart\n(\nSpaceCenter.Part\n) –\nReturn type\n:\nCamera"}
{"url": "https://krpc.github.io/krpc/python/api/docking-camera/camera.html", "title": "Camera¶", "headings": [], "anchors": ["camera", "DockingCamera.Camera", "DockingCamera.Camera.part", "DockingCamera.Camera.image"], "content_text": "Camera\n¶\nclass\nCamera\n¶\nA Docking Camera.\npart\n¶\nGet the part containing this camera.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nSpaceCenter.Part\nimage\n¶\nGet an image.\nReturns an empty byte array on failure.\nAttribute\n:\nRead-only, cannot be set\nReturn type\n:\nbytes"}
{"url": "https://krpc.github.io/krpc/tutorials/suborbital-flight.html", "title": "Sub-Orbital Flight¶", "headings": ["Part One: Preparing for Launch¶", "Part Two: Lift-off!¶", "Part Three: Reaching Apoapsis¶", "Part Four: Returning Safely to Kerbin¶"], "anchors": ["sub-orbital-flight", "part-one-preparing-for-launch", "tab-0-QyM=", "tab-0-Qysr", "tab-0-SmF2YQ==", "tab-0-THVh", "tab-0-UHl0aG9u", "panel-0-QyM=", "panel-0-Qysr", "panel-0-SmF2YQ==", "panel-0-THVh", "panel-0-UHl0aG9u", "tab-1-QyM=", "tab-1-Qysr", "tab-1-SmF2YQ==", "tab-1-THVh", "tab-1-UHl0aG9u", "panel-1-QyM=", "panel-1-Qysr", "panel-1-SmF2YQ==", "panel-1-THVh", "panel-1-UHl0aG9u", "tab-2-QyM=", "tab-2-Qysr", "tab-2-SmF2YQ==", "tab-2-THVh", "tab-2-UHl0aG9u", "panel-2-QyM=", "panel-2-Qysr", "panel-2-SmF2YQ==", "panel-2-THVh", "panel-2-UHl0aG9u", "part-two-lift-off", "tab-3-QyM=", "tab-3-Qysr", "tab-3-SmF2YQ==", "tab-3-THVh", "tab-3-UHl0aG9u", "panel-3-QyM=", "panel-3-Qysr", "panel-3-SmF2YQ==", "panel-3-THVh", "panel-3-UHl0aG9u", "tab-4-QyM=", "tab-4-Qysr", "tab-4-SmF2YQ==", "tab-4-THVh", "tab-4-UHl0aG9u", "panel-4-QyM=", "panel-4-Qysr", "panel-4-SmF2YQ==", "panel-4-THVh", "panel-4-UHl0aG9u", "part-three-reaching-apoapsis", "tab-5-QyM=", "tab-5-Qysr", "tab-5-SmF2YQ==", "tab-5-THVh", "tab-5-UHl0aG9u", "panel-5-QyM=", "panel-5-Qysr", "panel-5-SmF2YQ==", "panel-5-THVh", "panel-5-UHl0aG9u", "tab-6-QyM=", "tab-6-Qysr", "tab-6-SmF2YQ==", "tab-6-THVh", "tab-6-UHl0aG9u", "panel-6-QyM=", "panel-6-Qysr", "panel-6-SmF2YQ==", "panel-6-THVh", "panel-6-UHl0aG9u", "tab-7-QyM=", "tab-7-Qysr", "tab-7-SmF2YQ==", "tab-7-THVh", "tab-7-UHl0aG9u", "panel-7-QyM=", "panel-7-Qysr", "panel-7-SmF2YQ==", "panel-7-THVh", "panel-7-UHl0aG9u", "part-four-returning-safely-to-kerbin", "tab-8-QyM=", "tab-8-Qysr", "tab-8-SmF2YQ==", "tab-8-THVh", "tab-8-UHl0aG9u", "panel-8-QyM=", "panel-8-Qysr", "panel-8-SmF2YQ==", "panel-8-THVh", "panel-8-UHl0aG9u", "tab-9-QyM=", "tab-9-Qysr", "tab-9-SmF2YQ==", "tab-9-THVh", "tab-9-UHl0aG9u", "panel-9-QyM=", "panel-9-Qysr", "panel-9-SmF2YQ==", "panel-9-THVh", "panel-9-UHl0aG9u"], "content_text": "Sub-Orbital Flight\n¶\nThis introductory tutorial uses kRPC to send some Kerbals on a sub-orbital flight, and (hopefully)\nreturns them safely back to Kerbin. It covers the following topics:\nControlling a rocket (activating stages, setting the throttle)\nUsing the auto pilot to point the vessel in a specific direction\nUsing events to wait for things to happen in game\nTracking the amount of resources in the vessel\nTracking flight and orbital data (such as altitude and apoapsis altitude)\nNote\nFor details on how to write scripts and connect to kRPC, see the\nGetting Started\nguide.\nThis tutorial uses the two stage rocket pictured below. The craft file for this rocket can be\ndownloaded\nhere\n.\nThis tutorial includes source code examples for the main client languages that kRPC supports. The\nentire program, for your chosen language can be downloaded from here:\nC#\n,\nC++\n,\nJava\n,\nLua\n,\nPython\nPart One: Preparing for Launch\n¶\nThe first thing we need to do is open a connection to the server. We can also pass a descriptive\nname for our script that will appear in the server window in game:\nC#\nC++\nJava\nLua\nPython\n10\nvar\nconn\n=\nnew\nConnection\n(\n\"Sub-orbital flight\"\n);\n9\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Sub-orbital flight\"\n);\n10\nkrpc\n::\nservices\n::\nKRPC\nkrpc\n(\n&\nconn\n);\n11\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\n20\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Sub-orbital flight\"\n);\n21\nKRPC\nkrpc\n=\nKRPC\n.\nnewInstance\n(\nconnection\n);\n22\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\n1\nlocal\nkrpc\n=\nrequire\n'krpc'\n2\nlocal\nplatform\n=\nrequire\n'krpc.platform'\n3\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Sub-orbital flight'\n)\n3\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Sub-orbital flight'\n)\nNext we need to get an object representing the active vessel. It’s via this object that we will send\ninstructions to the rocket:\nC#\nC++\nJava\nLua\nPython\n12\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\n13\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\n24\nSpaceCenter\n.\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\n5\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\n5\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nWe then need to prepare the rocket for launch. The following code sets the throttle to maximum and\ninstructs the auto-pilot to hold a pitch and heading of 90° (vertically upwards). It then waits for\n1 second for these settings to take effect.\nC#\nC++\nJava\nLua\nPython\n14\nvessel\n.\nAutoPilot\n.\nTargetPitchAndHeading\n(\n90\n,\n90\n);\n15\nvessel\n.\nAutoPilot\n.\nEngage\n();\n16\nvessel\n.\nControl\n.\nThrottle\n=\n1\n;\n17\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n15\nvessel\n.\nauto_pilot\n().\ntarget_pitch_and_heading\n(\n90\n,\n90\n);\n16\nvessel\n.\nauto_pilot\n().\nengage\n();\n17\nvessel\n.\ncontrol\n().\nset_throttle\n(\n1\n);\n18\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n26\nvessel\n.\ngetAutoPilot\n().\ntargetPitchAndHeading\n(\n90\n,\n90\n);\n27\nvessel\n.\ngetAutoPilot\n().\nengage\n();\n28\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n1\n);\n29\nThread\n.\nsleep\n(\n1000\n);\n7\nvessel\n.\nauto_pilot\n:\ntarget_pitch_and_heading\n(\n90\n,\n90\n)\n8\nvessel\n.\nauto_pilot\n:\nengage\n()\n9\nvessel\n.\ncontrol\n.\nthrottle\n=\n1\n10\nplatform\n.\nsleep\n(\n1\n)\n7\nvessel\n.\nauto_pilot\n.\ntarget_pitch_and_heading\n(\n90\n,\n90\n)\n8\nvessel\n.\nauto_pilot\n.\nengage\n()\n9\nvessel\n.\ncontrol\n.\nthrottle\n=\n1\n10\ntime\n.\nsleep\n(\n1\n)\nPart Two: Lift-off!\n¶\nWe’re now ready to launch by activating the first stage (equivalent to pressing the space bar):\nC#\nC++\nJava\nLua\nPython\n19\nConsole\n.\nWriteLine\n(\n\"Launch!\"\n);\n20\nvessel\n.\nControl\n.\nActivateNextStage\n();\n20\nstd\n::\ncout\n<<\n\"Launch!\"\n<<\nstd\n::\nendl\n;\n21\nvessel\n.\ncontrol\n().\nactivate_next_stage\n();\n31\nSystem\n.\nout\n.\nprintln\n(\n\"Launch!\"\n);\n32\nvessel\n.\ngetControl\n().\nactivateNextStage\n();\n12\nprint\n(\n'Launch!'\n)\n13\nvessel\n.\ncontrol\n:\nactivate_next_stage\n()\n12\nprint\n(\n'Launch!'\n)\n13\nvessel\n.\ncontrol\n.\nactivate_next_stage\n()\nThe rocket has a solid fuel stage that will quickly run out, and will need to be jettisoned. We can\nmonitor the amount of solid fuel in the rocket using an event that is triggered when there is very\nlittle solid fuel left in the rocket. When the event is triggered, we can activate the next stage to\njettison the boosters:\nC#\nC++\nJava\nLua\nPython\n23\nvar\nsolidFuel\n=\nConnection\n.\nGetCall\n(()\n=>\nvessel\n.\nResources\n.\nAmount\n(\n\"SolidFuel\"\n));\n24\nvar\nexpr\n=\nExpression\n.\nLessThan\n(\n25\nconn\n,\nExpression\n.\nCall\n(\nconn\n,\nsolidFuel\n),\nExpression\n.\nConstantFloat\n(\nconn\n,\n0.1f\n));\n26\nvar\nevnt\n=\nconn\n.\nKRPC\n().\nAddEvent\n(\nexpr\n);\n27\nlock\n(\nevnt\n.\nCondition\n)\n{\n28\nevnt\n.\nWait\n();\n29\n}\n26\nauto\nsolid_fuel\n=\nvessel\n.\nresources\n().\namount_call\n(\n\"SolidFuel\"\n);\n27\nauto\nexpr\n=\nExpr\n::\nless_than\n(\n28\nconn\n,\nExpr\n::\ncall\n(\nconn\n,\nsolid_fuel\n),\nExpr\n::\nconstant_float\n(\nconn\n,\n0.1\n));\n29\nauto\nevent\n=\nkrpc\n.\nadd_event\n(\nexpr\n);\n30\nevent\n.\nacquire\n();\n31\nevent\n.\nwait\n();\n32\nevent\n.\nrelease\n();\n34\n{\n35\nProcedureCall\nsolidFuel\n=\nconnection\n.\ngetCall\n(\nvessel\n.\ngetResources\n(),\n\"amount\"\n,\n\"SolidFuel\"\n);\n36\nExpression\nexpr\n=\nExpression\n.\nlessThan\n(\n37\nconnection\n,\n38\nExpression\n.\ncall\n(\nconnection\n,\nsolidFuel\n),\n39\nExpression\n.\nconstantFloat\n(\nconnection\n,\n0.1f\n));\n40\nEvent\nevent\n=\nkrpc\n.\naddEvent\n(\nexpr\n);\n41\nsynchronized\n(\nevent\n.\ngetCondition\n())\n{\n42\nevent\n.\nwaitFor\n();\n43\n}\n44\n}\n45\n46\nSystem\n.\nout\n.\nprintln\n(\n\"Booster separation\"\n);\n47\nvessel\n.\ngetControl\n().\nactivateNextStage\n();\n15\nwhile\nvessel\n.\nresources\n:\namount\n(\n'SolidFuel'\n)\n>\n0.1\ndo\n16\nplatform\n.\nsleep\n(\n1\n)\n17\nend\n18\nprint\n(\n'Booster separation'\n)\n19\nvessel\n.\ncontrol\n:\nactivate_next_stage\n()\n15\nfuel_amount\n=\nconn\n.\nget_call\n(\nvessel\n.\nresources\n.\namount\n,\n'SolidFuel'\n)\n16\nexpr\n=\nconn\n.\nkrpc\n.\nExpression\n.\nless_than\n(\n17\nconn\n.\nkrpc\n.\nExpression\n.\ncall\n(\nfuel_amount\n),\n18\nconn\n.\nkrpc\n.\nExpression\n.\nconstant_float\n(\n0.1\n))\n19\nevent\n=\nconn\n.\nkrpc\n.\nadd_event\n(\nexpr\n)\n20\nwith\nevent\n.\ncondition\n:\n21\nevent\n.\nwait\n()\n22\nprint\n(\n'Booster separation'\n)\n23\nvessel\n.\ncontrol\n.\nactivate_next_stage\n()\nIn this bit of code,\nvessel.resources\nreturns a\nResources\nobject that is used to get\ninformation about the resources in the rocket. The code creates the expression\nvessel.resources.amount('SolidFuel')\n<\n0.1\non the server, using the expression API. This\nexpression is then used to drive an event, which is triggered when the expression returns true.\nPart Three: Reaching Apoapsis\n¶\nNext we will execute a gravity turn when the rocket reaches a sufficiently high altitude. The\nfollowing uses an event to wait until the altitude of the rocket reaches 10km:\nC#\nC++\nJava\nLua\nPython\n36\nvar\nmeanAltitude\n=\nConnection\n.\nGetCall\n(()\n=>\nvessel\n.\nFlight\n(\nnull\n).\nMeanAltitude\n);\n37\nvar\nexpr\n=\nExpression\n.\nGreaterThan\n(\n38\nconn\n,\nExpression\n.\nCall\n(\nconn\n,\nmeanAltitude\n),\nExpression\n.\nConstantDouble\n(\nconn\n,\n10000\n));\n39\nvar\nevnt\n=\nconn\n.\nKRPC\n().\nAddEvent\n(\nexpr\n);\n40\nlock\n(\nevnt\n.\nCondition\n)\n{\n41\nevnt\n.\nWait\n();\n42\n}\n39\nauto\nmean_altitude\n=\nvessel\n.\nflight\n().\nmean_altitude_call\n();\n40\nauto\nexpr\n=\nExpr\n::\ngreater_than\n(\n41\nconn\n,\nExpr\n::\ncall\n(\nconn\n,\nmean_altitude\n),\nExpr\n::\nconstant_double\n(\nconn\n,\n10000\n));\n42\nauto\nevent\n=\nkrpc\n.\nadd_event\n(\nexpr\n);\n43\nevent\n.\nacquire\n();\n44\nevent\n.\nwait\n();\n45\nevent\n.\nrelease\n();\n50\nProcedureCall\nmeanAltitude\n=\nconnection\n.\ngetCall\n(\nvessel\n.\nflight\n(\nnull\n),\n\"getMeanAltitude\"\n);\n51\nExpression\nexpr\n=\nExpression\n.\ngreaterThan\n(\n52\nconnection\n,\n53\nExpression\n.\ncall\n(\nconnection\n,\nmeanAltitude\n),\n54\nExpression\n.\nconstantDouble\n(\nconnection\n,\n10000\n));\n55\nEvent\nevent\n=\nkrpc\n.\naddEvent\n(\nexpr\n);\n56\nsynchronized\n(\nevent\n.\ngetCondition\n())\n{\n57\nevent\n.\nwaitFor\n();\n58\n}\n21\nwhile\nvessel\n:\nflight\n().\nmean_altitude\n<\n10000\ndo\n22\nplatform\n.\nsleep\n(\n1\n)\n23\nend\n25\nmean_altitude\n=\nconn\n.\nget_call\n(\ngetattr\n,\nvessel\n.\nflight\n(),\n'mean_altitude'\n)\n26\nexpr\n=\nconn\n.\nkrpc\n.\nExpression\n.\ngreater_than\n(\n27\nconn\n.\nkrpc\n.\nExpression\n.\ncall\n(\nmean_altitude\n),\n28\nconn\n.\nkrpc\n.\nExpression\n.\nconstant_double\n(\n10000\n))\n29\nevent\n=\nconn\n.\nkrpc\n.\nadd_event\n(\nexpr\n)\n30\nwith\nevent\n.\ncondition\n:\n31\nevent\n.\nwait\n()\nIn this bit of code, calling\nvessel.flight()\nreturns a\nFlight\nobject that is used to\nget all sorts of information about the rocket, such as the direction it is pointing in and its\nvelocity.\nNow we need to angle the rocket over to a pitch of 60° and maintain a heading of 90° (west). To do\nthis, we simply reconfigure the auto-pilot:\nC#\nC++\nJava\nLua\nPython\n45\nConsole\n.\nWriteLine\n(\n\"Gravity turn\"\n);\n46\nvessel\n.\nAutoPilot\n.\nTargetPitchAndHeading\n(\n60\n,\n90\n);\n48\nstd\n::\ncout\n<<\n\"Gravity turn\"\n<<\nstd\n::\nendl\n;\n49\nvessel\n.\nauto_pilot\n().\ntarget_pitch_and_heading\n(\n60\n,\n90\n);\n61\nSystem\n.\nout\n.\nprintln\n(\n\"Gravity turn\"\n);\n62\nvessel\n.\ngetAutoPilot\n().\ntargetPitchAndHeading\n(\n60\n,\n90\n);\n25\nprint\n(\n'Gravity turn'\n)\n26\nvessel\n.\nauto_pilot\n:\ntarget_pitch_and_heading\n(\n60\n,\n90\n)\n33\nprint\n(\n'Gravity turn'\n)\n34\nvessel\n.\nauto_pilot\n.\ntarget_pitch_and_heading\n(\n60\n,\n90\n)\nNow we wait until the apoapsis reaches 100km (again, using an event), then reduce the throttle to\nzero, jettison the launch stage and turn off the auto-pilot:\nC#\nC++\nJava\nLua\nPython\n32\n{\n33\nvar\napoapsisAltitude\n=\nConnection\n.\nGetCall\n(()\n=>\nvessel\n.\nOrbit\n.\nApoapsisAltitude\n);\n34\nvar\nexpr\n=\nExpression\n.\nGreaterThan\n(\n35\nconn\n,\nExpression\n.\nCall\n(\nconn\n,\napoapsisAltitude\n),\nExpression\n.\nConstantDouble\n(\nconn\n,\n100000\n));\n36\nvar\nevnt\n=\nconn\n.\nKRPC\n().\nAddEvent\n(\nexpr\n);\n37\nlock\n(\nevnt\n.\nCondition\n)\n{\n38\nevnt\n.\nWait\n();\n39\n}\n40\n}\n41\n42\nConsole\n.\nWriteLine\n(\n\"Launch stage separation\"\n);\n43\nvessel\n.\nControl\n.\nThrottle\n=\n0\n;\n44\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n45\nvessel\n.\nControl\n.\nActivateNextStage\n();\n46\nvessel\n.\nAutoPilot\n.\nDisengage\n();\n51\n{\n52\nauto\napoapsis_altitude\n=\nvessel\n.\norbit\n().\napoapsis_altitude_call\n();\n53\nauto\nexpr\n=\nExpr\n::\ngreater_than\n(\n54\nconn\n,\nExpr\n::\ncall\n(\nconn\n,\napoapsis_altitude\n),\nExpr\n::\nconstant_double\n(\nconn\n,\n100000\n));\n55\nauto\nevent\n=\nkrpc\n.\nadd_event\n(\nexpr\n);\n56\nevent\n.\nacquire\n();\n57\nevent\n.\nwait\n();\n58\nevent\n.\nrelease\n();\n59\n}\n60\n61\nstd\n::\ncout\n<<\n\"Launch stage separation\"\n<<\nstd\n::\nendl\n;\n62\nvessel\n.\ncontrol\n().\nset_throttle\n(\n0\n);\n63\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n64\nvessel\n.\ncontrol\n().\nactivate_next_stage\n();\n65\nvessel\n.\nauto_pilot\n().\ndisengage\n();\n64\n{\n65\nProcedureCall\napoapsisAltitude\n=\nconnection\n.\ngetCall\n(\n66\nvessel\n.\ngetOrbit\n(),\n\"getApoapsisAltitude\"\n);\n67\nExpression\nexpr\n=\nExpression\n.\ngreaterThan\n(\n68\nconnection\n,\n69\nExpression\n.\ncall\n(\nconnection\n,\napoapsisAltitude\n),\n70\nExpression\n.\nconstantDouble\n(\nconnection\n,\n100000\n));\n71\nEvent\nevent\n=\nkrpc\n.\naddEvent\n(\nexpr\n);\n72\nsynchronized\n(\nevent\n.\ngetCondition\n())\n{\n73\nevent\n.\nwaitFor\n();\n74\n}\n75\n}\n76\n77\nSystem\n.\nout\n.\nprintln\n(\n\"Launch stage separation\"\n);\n78\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n0\n);\n79\nThread\n.\nsleep\n(\n1000\n);\n80\nvessel\n.\ngetControl\n().\nactivateNextStage\n();\n81\nvessel\n.\ngetAutoPilot\n().\ndisengage\n();\n28\nwhile\nvessel\n.\norbit\n.\napoapsis_altitude\n<\n100000\ndo\n29\nplatform\n.\nsleep\n(\n1\n)\n30\nend\n31\nprint\n(\n'Launch stage separation'\n)\n32\nvessel\n.\ncontrol\n.\nthrottle\n=\n0\n33\nplatform\n.\nsleep\n(\n1\n)\n34\nvessel\n.\ncontrol\n:\nactivate_next_stage\n()\n35\nvessel\n.\nauto_pilot\n:\ndisengage\n()\n36\napoapsis_altitude\n=\nconn\n.\nget_call\n(\ngetattr\n,\nvessel\n.\norbit\n,\n'apoapsis_altitude'\n)\n37\nexpr\n=\nconn\n.\nkrpc\n.\nExpression\n.\ngreater_than\n(\n38\nconn\n.\nkrpc\n.\nExpression\n.\ncall\n(\napoapsis_altitude\n),\n39\nconn\n.\nkrpc\n.\nExpression\n.\nconstant_double\n(\n100000\n))\n40\nevent\n=\nconn\n.\nkrpc\n.\nadd_event\n(\nexpr\n)\n41\nwith\nevent\n.\ncondition\n:\n42\nevent\n.\nwait\n()\n43\n44\nprint\n(\n'Launch stage separation'\n)\n45\nvessel\n.\ncontrol\n.\nthrottle\n=\n0\n46\ntime\n.\nsleep\n(\n1\n)\n47\nvessel\n.\ncontrol\n.\nactivate_next_stage\n()\n48\nvessel\n.\nauto_pilot\n.\ndisengage\n()\nIn this bit of code,\nvessel.orbit\nreturns an\nOrbit\nobject that contains all the\ninformation about the orbit of the rocket.\nPart Four: Returning Safely to Kerbin\n¶\nOur Kerbals are now heading on a sub-orbital trajectory and are on a collision course with the\nsurface. All that remains to do is wait until they fall to 1km altitude above the surface, and then\ndeploy the parachutes. If you like, you can use time acceleration to skip ahead to just before this\nhappens - the script will continue to work.\nC#\nC++\nJava\nLua\nPython\n64\n{\n65\nvar\nsrfAltitude\n=\nConnection\n.\nGetCall\n(()\n=>\nvessel\n.\nFlight\n(\nnull\n).\nSurfaceAltitude\n);\n66\nvar\nexpr\n=\nExpression\n.\nLessThan\n(\n67\nconn\n,\nExpression\n.\nCall\n(\nconn\n,\nsrfAltitude\n),\nExpression\n.\nConstantDouble\n(\nconn\n,\n1000\n));\n68\nvar\nevnt\n=\nconn\n.\nKRPC\n().\nAddEvent\n(\nexpr\n);\n69\nlock\n(\nevnt\n.\nCondition\n)\n{\n70\nevnt\n.\nWait\n();\n71\n}\n72\n}\n73\n74\nvessel\n.\nControl\n.\nActivateNextStage\n();\n67\n{\n68\nauto\nsrf_altitude\n=\nvessel\n.\nflight\n().\nsurface_altitude_call\n();\n69\nauto\nexpr\n=\nExpr\n::\nless_than\n(\n70\nconn\n,\nExpr\n::\ncall\n(\nconn\n,\nsrf_altitude\n),\nExpr\n::\nconstant_double\n(\nconn\n,\n1000\n));\n71\nauto\nevent\n=\nkrpc\n.\nadd_event\n(\nexpr\n);\n72\nevent\n.\nacquire\n();\n73\nevent\n.\nwait\n();\n74\nevent\n.\nrelease\n();\n75\n}\n76\n77\nvessel\n.\ncontrol\n().\nactivate_next_stage\n();\n83\n{\n84\nProcedureCall\nsrfAltitude\n=\nconnection\n.\ngetCall\n(\n85\nvessel\n.\nflight\n(\nnull\n),\n\"getSurfaceAltitude\"\n);\n86\nExpression\nexpr\n=\nExpression\n.\nlessThan\n(\n87\nconnection\n,\n88\nExpression\n.\ncall\n(\nconnection\n,\nsrfAltitude\n),\n89\nExpression\n.\nconstantDouble\n(\nconnection\n,\n1000\n));\n90\nEvent\nevent\n=\nkrpc\n.\naddEvent\n(\nexpr\n);\n91\nsynchronized\n(\nevent\n.\ngetCondition\n())\n{\n92\nevent\n.\nwaitFor\n();\n93\n}\n94\n}\n95\n96\nvessel\n.\ngetControl\n().\nactivateNextStage\n();\n37\nwhile\nvessel\n:\nflight\n().\nsurface_altitude\n>\n1000\ndo\n38\nplatform\n.\nsleep\n(\n1\n)\n39\nend\n40\nvessel\n.\ncontrol\n:\nactivate_next_stage\n()\n50\nsrf_altitude\n=\nconn\n.\nget_call\n(\ngetattr\n,\nvessel\n.\nflight\n(),\n'surface_altitude'\n)\n51\nexpr\n=\nconn\n.\nkrpc\n.\nExpression\n.\nless_than\n(\n52\nconn\n.\nkrpc\n.\nExpression\n.\ncall\n(\nsrf_altitude\n),\n53\nconn\n.\nkrpc\n.\nExpression\n.\nconstant_double\n(\n1000\n))\n54\nevent\n=\nconn\n.\nkrpc\n.\nadd_event\n(\nexpr\n)\n55\nwith\nevent\n.\ncondition\n:\n56\nevent\n.\nwait\n()\n57\n58\nvessel\n.\ncontrol\n.\nactivate_next_stage\n()\nThe parachutes should have now been deployed. The next bit of code will repeatedly print out the\naltitude of the capsule until its speed reaches zero – which will happen when it lands:\nC#\nC++\nJava\nLua\nPython\n76\nwhile\n(\nvessel\n.\nFlight\n(\nvessel\n.\nOrbit\n.\nBody\n.\nReferenceFrame\n).\nVerticalSpeed\n<\n-\n0.1\n)\n{\n77\nConsole\n.\nWriteLine\n(\n\"Altitude = {0:F1} meters\"\n,\nvessel\n.\nFlight\n().\nSurfaceAltitude\n);\n78\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n79\n}\n80\nConsole\n.\nWriteLine\n(\n\"Landed!\"\n);\n81\nconn\n.\nDispose\n();\n79\nwhile\n(\nvessel\n.\nflight\n(\nvessel\n.\norbit\n().\nbody\n().\nreference_frame\n()).\nvertical_speed\n()\n<\n-0.1\n)\n{\n80\nstd\n::\ncout\n<<\n\"Altitude = \"\n<<\nvessel\n.\nflight\n().\nsurface_altitude\n()\n<<\n\" meters\"\n<<\nstd\n::\nendl\n;\n81\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n82\n}\n83\nstd\n::\ncout\n<<\n\"Landed!\"\n<<\nstd\n::\nendl\n;\n98\nwhile\n(\nvessel\n.\nflight\n(\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n()).\ngetVerticalSpeed\n()\n<\n-\n0.1\n)\n{\n99\nSystem\n.\nout\n.\nprintf\n(\n\"Altitude = %.1f meters\\n\"\n,\nvessel\n.\nflight\n(\nnull\n).\ngetSurfaceAltitude\n());\n100\nThread\n.\nsleep\n(\n1000\n);\n101\n}\n102\nSystem\n.\nout\n.\nprintln\n(\n\"Landed!\"\n);\n103\nconnection\n.\nclose\n();\n42\nwhile\nvessel\n:\nflight\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n).\nvertical_speed\n<\n-\n0.1\ndo\n43\nprint\n(\nstring.format\n(\n'Altitude = %.1f meters'\n,\n44\nvessel\n:\nflight\n().\nsurface_altitude\n))\n45\nplatform\n.\nsleep\n(\n1\n)\n46\nend\n47\nprint\n(\n'Landed!'\n)\n60\nwhile\nvessel\n.\nflight\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n)\n.\nvertical_speed\n<\n-\n0.1\n:\n61\nprint\n(\n'Altitude =\n%.1f\nmeters'\n%\nvessel\n.\nflight\n()\n.\nsurface_altitude\n)\n62\ntime\n.\nsleep\n(\n1\n)\n63\nprint\n(\n'Landed!'\n)\nThis bit of code uses the\nvessel.flight()\nfunction, as before, but this time it is passed a\nReferenceFrame\nparameter. We want to get the vertical speed of the capsule relative to the\nsurface of Kerbin, so the values returned by the flight object need to be relative to the surface of\nKerbin. We therefore pass\nvessel.orbit.body.reference_frame\nto\nvessel.flight()\nas this\nreference frame has its origin at the center of Kerbin and it rotates with the planet. For more\ninformation, check out the tutorial on\nReference Frames\n.\nYour Kerbals should now have safely landed back on the surface."}
{"url": "https://krpc.github.io/krpc/tutorials/reference-frames.html", "title": "Reference Frames¶", "headings": ["Introduction¶", "Origin Position and Axis Orientation¶", "Celestial Body Reference Frame¶", "Vessel Orbital Reference Frame¶", "Vessel Reference Frame¶", "Linear Velocity and Angular Velocity¶", "Available Reference Frames¶", "Custom Reference Frames¶", "Converting Between Reference Frames¶", "Visual Debugging¶", "Examples¶", "Navball directions¶", "Orbital directions¶", "Surface ‘prograde’¶", "Vessel Speed¶", "Vessel Velocity¶", "Angle of attack¶", "Landing Site¶"], "anchors": ["package-krpc.client.services.SpaceCenter", "reference-frames", "tutorial-reference-frames", "introduction", "origin-position-and-axis-orientation", "celestial-body-reference-frame", "id1", "tab-0-0-0", "tab-0-0-1", "tab-0-0-2", "tab-0-0-3", "tab-0-0-4", "tab-0-0-5", "panel-0-0-0", "panel-0-0-1", "panel-0-0-2", "panel-0-0-3", "panel-0-0-4", "panel-0-0-5", "vessel-orbital-reference-frame", "id2", "vessel-reference-frame", "id3", "linear-velocity-and-angular-velocity", "available-reference-frames", "tab-1-1-0", "tab-1-1-1", "tab-1-1-2", "tab-1-1-3", "tab-1-1-4", "tab-1-1-5", "panel-1-1-0", "panel-1-1-1", "panel-1-1-2", "panel-1-1-3", "panel-1-1-4", "panel-1-1-5", "custom-reference-frames", "converting-between-reference-frames", "tab-2-2-0", "tab-2-2-1", "tab-2-2-2", "tab-2-2-3", "tab-2-2-4", "tab-2-2-5", "panel-2-2-0", "panel-2-2-1", "panel-2-2-2", "panel-2-2-3", "panel-2-2-4", "panel-2-2-5", "visual-debugging", "tab-3-3-0", "tab-3-3-1", "tab-3-3-2", "tab-3-3-3", "tab-3-3-4", "tab-3-3-5", "panel-3-3-0", "panel-3-3-1", "panel-3-3-2", "panel-3-3-3", "panel-3-3-4", "panel-3-3-5", "examples", "navball-directions", "tab-4-4-0", "tab-4-4-1", "tab-4-4-2", "tab-4-4-3", "tab-4-4-4", "tab-4-4-5", "panel-4-4-0", "panel-4-4-1", "panel-4-4-2", "panel-4-4-3", "panel-4-4-4", "panel-4-4-5", "orbital-directions", "tab-5-5-0", "tab-5-5-1", "tab-5-5-2", "tab-5-5-3", "tab-5-5-4", "tab-5-5-5", "panel-5-5-0", "panel-5-5-1", "panel-5-5-2", "panel-5-5-3", "panel-5-5-4", "panel-5-5-5", "surface-prograde", "tab-6-6-0", "tab-6-6-1", "tab-6-6-2", "tab-6-6-3", "tab-6-6-4", "tab-6-6-5", "panel-6-6-0", "panel-6-6-1", "panel-6-6-2", "panel-6-6-3", "panel-6-6-4", "panel-6-6-5", "vessel-speed", "tutorial-reference-frames-vessel-speed", "tab-7-7-0", "tab-7-7-1", "tab-7-7-2", "tab-7-7-3", "tab-7-7-4", "tab-7-7-5", "panel-7-7-0", "panel-7-7-1", "panel-7-7-2", "panel-7-7-3", "panel-7-7-4", "panel-7-7-5", "vessel-velocity", "tutorial-reference-frames-vessel-velocity", "tab-8-8-0", "tab-8-8-1", "tab-8-8-2", "tab-8-8-3", "tab-8-8-4", "tab-8-8-5", "panel-8-8-0", "panel-8-8-1", "panel-8-8-2", "panel-8-8-3", "panel-8-8-4", "panel-8-8-5", "angle-of-attack", "tab-9-9-0", "tab-9-9-1", "tab-9-9-2", "tab-9-9-3", "tab-9-9-4", "tab-9-9-5", "panel-9-9-0", "panel-9-9-1", "panel-9-9-2", "panel-9-9-3", "panel-9-9-4", "panel-9-9-5", "landing-site", "tab-10-10-0", "tab-10-10-1", "tab-10-10-2", "tab-10-10-3", "tab-10-10-4", "tab-10-10-5", "panel-10-10-0", "panel-10-10-1", "panel-10-10-2", "panel-10-10-3", "panel-10-10-4", "panel-10-10-5"], "content_text": "Reference Frames\n¶\nIntroduction\n¶\nAll of the positions, directions, velocities and rotations in kRPC are relative\nto something, and\nreference frames\ndefine what that something is.\nA reference frame specifies:\nThe position of the origin at (0,0,0)\nthe direction of the coordinate axes x, y, and z\nthe linear velocity of the origin (if the reference frame moves)\nThe angular velocity of the coordinate axes (the speed and direction of rotation of the axes)\nNote\nKSP and kRPC use a left handed coordinate system\nOrigin Position and Axis Orientation\n¶\nThe following gives some examples of the position of the origin and the\norientation of the coordinate axes for various reference frames.\nCelestial Body Reference Frame\n¶\nThe reference frame for a celestial body, such as Kerbin. The equator is\nshown in blue, and the prime meridian in red. The black arrows show the\ncoordinate axes, and the origin is at the center of the planet.\n¶\nThe reference frame obtained by calling\nCelestialBody.reference_frame\nfor Kerbin has the following properties:\nThe origin is at the center of Kerbin,\nthe y-axis points from the center of Kerbin to the north pole,\nthe x-axis points from the center of Kerbin to the intersection of the prime\nmeridian and equator (the surface position at 0° longitude, 0° latitude),\nthe z-axis points from the center of Kerbin to the equator at 90°E longitude,\nand the axes rotate with the planet, i.e. the reference frame has the same\nrotational/angular velocity as Kerbin.\nThis means that the reference frame is\nfixed\nrelative to Kerbin – it moves\nwith the center of the planet, and also rotates with the planet. Therefore,\npositions in this reference frame are relative to the center of the planet. The\nfollowing code prints out the position of the active vessel in Kerbin’s\nreference frame:\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nVesselPosition\n{\npublic\nstatic\nvoid\nMain\n()\n{\nusing\n(\nvar\nconnection\n=\nnew\nConnection\n())\n{\nvar\nvessel\n=\nconnection\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nposition\n=\nvessel\n.\nPosition\n(\nvessel\n.\nOrbit\n.\nBody\n.\nReferenceFrame\n);\nConsole\n.\nWriteLine\n(\n\"({0:F1}, {1:F1}, {2:F1})\"\n,\nposition\n.\nItem1\n,\nposition\n.\nItem2\n,\nposition\n.\nItem3\n);\n}\n}\n}\n#include\n<iostream>\n#include\n<iomanip>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n();\nkrpc\n::\nservices\n::\nSpaceCenter\nspaceCenter\n(\n&\nconn\n);\nauto\nvessel\n=\nspaceCenter\n.\nactive_vessel\n();\nauto\nposition\n=\nvessel\n.\nposition\n(\nvessel\n.\norbit\n().\nbody\n().\nreference_frame\n());\nstd\n::\ncout\n<<\nstd\n::\nfixed\n<<\nstd\n::\nsetprecision\n(\n1\n);\nstd\n::\ncout\n<<\nstd\n::\nget\n<\n0\n>\n(\nposition\n)\n<<\n\", \"\n<<\nstd\n::\nget\n<\n1\n>\n(\nposition\n)\n<<\n\", \"\n<<\nstd\n::\nget\n<\n2\n>\n(\nposition\n)\n<<\nstd\n::\nendl\n;\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Vessel position\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Orbit_t\norbit\n;\nkrpc_SpaceCenter_Vessel_Orbit\n(\nconn\n,\n&\norbit\n,\nvessel\n);\nkrpc_SpaceCenter_CelestialBody_t\nbody\n;\nkrpc_SpaceCenter_Orbit_Body\n(\nconn\n,\n&\nbody\n,\norbit\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nbody_frame\n;\nkrpc_SpaceCenter_CelestialBody_ReferenceFrame\n(\nconn\n,\n&\nbody_frame\n,\nbody\n);\nkrpc_tuple_double_double_double_t\nposition\n;\nkrpc_SpaceCenter_Vessel_Position\n(\nconn\n,\n&\nposition\n,\nvessel\n,\nbody_frame\n);\nprintf\n(\n\"%.2f, %.2f, %.2f\n\\n\n\"\n,\nposition\n.\ne0\n,\nposition\n.\ne1\n,\nposition\n.\ne2\n);\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nVesselPosition\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n();\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nposition\n=\nvessel\n.\nposition\n(\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n());\nSystem\n.\nout\n.\nprintf\n(\n\"(%.1f, %.1f, %.1f)\\n\"\n,\nposition\n.\ngetValue0\n(),\nposition\n.\ngetValue1\n(),\nposition\n.\ngetValue2\n());\nconnection\n.\nclose\n();\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nconn\n=\nkrpc\n.\nconnect\n()\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nprint\n(\nvessel\n:\nposition\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n))\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nprint\n(\n'(\n%.1f\n,\n%.1f\n,\n%.1f\n)'\n%\nvessel\n.\nposition\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n))\nFor a vessel sat on the launchpad, the magnitude of this position vector will be\nroughly 600,000 meters (equal to the radius of Kerbin). The position vector will\nalso not change over time, because the vessel is sat on the surface of Kerbin\nand the reference frame also rotates with Kerbin.\nVessel Orbital Reference Frame\n¶\nThe orbital reference frame for a vessel.\n¶\nAnother example is the orbital reference frame for a vessel, obtained by calling\nVessel.orbital_reference_frame\n. This is fixed to the vessel (the origin\nmoves with the vessel) and is orientated so that the axes point in the orbital\nprograde/normal/radial directions.\nThe origin is at the center of mass of the vessel,\nthe y-axis points in the prograde direction of the vessels orbit,\nthe x-axis points in the anti-radial direction of the vessels orbit,\nthe z-axis points in the normal direction of the vessels orbit,\nand the axes rotate to match any changes to the prograde/normal/radial directions,\nfor example when the prograde direction changes as the vessel continues on its\norbit.\nVessel Reference Frame\n¶\nThe reference frame for an aircraft.\n¶\nAnother example is\nVessel.reference_frame\n. As with the previous example,\nit is fixed to the vessel (the origin moves with the vessel), however the\norientation of the coordinate axes is different. They track the orientation of\nthe vessel:\nThe origin is at the center of mass of the vessel,\nthe y-axis points in the same direction that the vessel is pointing,\nthe x-axis points out of the right side of the vessel,\nthe z-axis points downwards out of the bottom of the vessel,\nand the axes rotate with any changes to the direction of the vessel.\nLinear Velocity and Angular Velocity\n¶\nReference frames move and rotate relative to one another. For example, the\nreference frames discussed previously all have their origin position fixed to\nsome object (such as a vessel or a planet). This means that they move and rotate\nto track the object, and so have a linear and angular velocity associated with\nthem.\nFor example, the reference frame obtained by calling\nCelestialBody.reference_frame\nfor Kerbin is fixed relative to\nKerbin. This means the angular velocity of the reference frame is identical to\nKerbin’s angular velocity, and the linear velocity of the reference frame\nmatches the current orbital velocity of Kerbin.\nAvailable Reference Frames\n¶\nkRPC provides the following reference frames:\nC#\nC++\nC\nJava\nLua\nPython\nVessel.ReferenceFrame\nVessel.OrbitalReferenceFrame\nVessel.SurfaceReferenceFrame\nVessel.SurfaceVelocityReferenceFrame\nCelestialBody.ReferenceFrame\nCelestialBody.NonRotatingReferenceFrame\nCelestialBody.OrbitalReferenceFrame\nNode.ReferenceFrame\nNode.OrbitalReferenceFrame\nPart.ReferenceFrame\nPart.CenterOfMassReferenceFrame\nDockingPort.ReferenceFrame\nThruster.ThrustReferenceFrame\nVessel::reference_frame()\nVessel::orbital_reference_frame()\nVessel::surface_reference_frame()\nVessel::surface_velocity_reference_frame()\nCelestialBody::reference_frame()\nCelestialBody::non_rotating_reference_frame()\nCelestialBody::orbital_reference_frame()\nNode::reference_frame()\nNode::orbital_reference_frame()\nPart::reference_frame()\nPart::center_of_mass_reference_frame()\nDockingPort::reference_frame()\nThruster::thrust_reference_frame()\nkrpc_SpaceCenter_Vessel_ReferenceFrame()\nkrpc_SpaceCenter_Vessel_OrbitalReferenceFrame()\nkrpc_SpaceCenter_Vessel_SurfaceReferenceFrame()\nkrpc_SpaceCenter_Vessel_SurfaceVelocityReferenceFrame()\nkrpc_SpaceCenter_CelestialBody_ReferenceFrame()\nkrpc_SpaceCenter_CelestialBody_NonRotatingReferenceFrame()\nkrpc_SpaceCenter_CelestialBody_OrbitalReferenceFrame()\nkrpc_SpaceCenter_Node_ReferenceFrame()\nkrpc_SpaceCenter_Node_OrbitalReferenceFrame()\nkrpc_SpaceCenter_Part_ReferenceFrame()\nkrpc_SpaceCenter_Part_CenterOfMassReferenceFrame()\nkrpc_SpaceCenter_DockingPort_ReferenceFrame()\nkrpc_SpaceCenter_Thruster_ThrustReferenceFrame()\nVessel.getReferenceFrame\nVessel.getOrbitalReferenceFrame\nVessel.getSurfaceReferenceFrame\nVessel.getSurfaceVelocityReferenceFrame\nCelestialBody.getReferenceFrame\nCelestialBody.getNonRotatingReferenceFrame\nCelestialBody.getOrbitalReferenceFrame\nNode.getReferenceFrame\nNode.getOrbitalReferenceFrame\nPart.getReferenceFrame\nPart.getCenterOfMassReferenceFrame\nDockingPort.getReferenceFrame\nThruster.getThrustReferenceFrame\nSpaceCenter.Vessel.reference_frame\nSpaceCenter.Vessel.orbital_reference_frame\nSpaceCenter.Vessel.surface_reference_frame\nSpaceCenter.Vessel.surface_velocity_reference_frame\nSpaceCenter.CelestialBody.reference_frame\nSpaceCenter.CelestialBody.non_rotating_reference_frame\nSpaceCenter.CelestialBody.orbital_reference_frame\nSpaceCenter.Node.reference_frame\nSpaceCenter.Node.orbital_reference_frame\nSpaceCenter.Part.reference_frame\nSpaceCenter.Part.center_of_mass_reference_frame\nSpaceCenter.DockingPort.reference_frame\nSpaceCenter.Thruster.thrust_reference_frame\nVessel.reference_frame\nVessel.orbital_reference_frame\nVessel.surface_reference_frame\nVessel.surface_velocity_reference_frame\nCelestialBody.reference_frame\nCelestialBody.non_rotating_reference_frame\nCelestialBody.orbital_reference_frame\nNode.reference_frame\nNode.orbital_reference_frame\nPart.reference_frame\nPart.center_of_mass_reference_frame\nDockingPort.reference_frame\nThruster.thrust_reference_frame\nRelative and hybrid reference frames can also be constructed from the above.\nCustom Reference Frames\n¶\nCustom reference frames can be constructed from the built in frames listed\nabove. They come in two varieties: ‘relative’ and ‘hybrid’.\nA relative reference frame is constructed from a parent reference frame, a fixed\nposition offset and a fixed rotation offset. For example, this could be used to\nconstruct a reference frame whose origin is 10m below the vessel as follows, by\napplying a position offset of 10 along the z-axis to\nVessel.reference_frame\n. Relative reference frames can be constructed by\ncalling\nReferenceFrame.create_relative()\n.\nA hybrid reference frame inherits its components (position, rotation, velocity\nand angular velocity) from the components of other reference frames. Note that\nthese components need not be fixed. For example, you could construct a reference\nframe whose position is the center of mass of the vessel (inherited from\nVessel.reference_frame\n) and whose rotation is that of the planet being\norbited (inherited from\nCelestialBody.reference_frame\n). Relative\nreference frames can be constructed by calling\nReferenceFrame.create_hybrid()\n.\nThe parent reference frame(s) of a custom reference frame can also be other\ncustom reference frames. For example, you could combine the two example frames\nfrom above: construct a hybrid reference frame, centered on the vessel and\nrotated with the planet being orbited, and then create a relative reference that\noffsets the position of this 10m along the z-axis. The resulting frame will have\nits origin 10m below the vessel, and will be rotated with the planet being\norbited.\nConverting Between Reference Frames\n¶\nkRPC provides utility methods to convert positions, directions, rotations and\nvelocities between the different reference frames:\nC#\nC++\nC\nJava\nLua\nPython\nSpaceCenter.TransformPosition\nSpaceCenter.TransformDirection\nSpaceCenter.TransformRotation\nSpaceCenter.TransformVelocity\nSpaceCenter::transform_position()\nSpaceCenter::transform_direction()\nSpaceCenter::transform_rotation()\nSpaceCenter::transform_velocity()\nkrpc_SpaceCenter_TransformPosition()\nkrpc_SpaceCenter_TransformDirection()\nkrpc_SpaceCenter_TransformRotation()\nkrpc_SpaceCenter_TransformVelocity()\nSpaceCenter.transformPosition\nSpaceCenter.transformDirection\nSpaceCenter.transformRotation\nSpaceCenter.transformVelocity\nSpaceCenter.transform_position()\nSpaceCenter.transform_direction()\nSpaceCenter.transform_rotation()\nSpaceCenter.transform_velocity()\nSpaceCenter.transform_position()\nSpaceCenter.transform_direction()\nSpaceCenter.transform_rotation()\nSpaceCenter.transform_velocity()\nVisual Debugging\n¶\nReferences frames can be confusing, and choosing the correct one is a challenge\nin itself. To aid debugging, kRPCs drawing functionality can be used to\nvisualize direction vectors in-game.\nDrawing.add_direction_from_com()\nwill draw a direction vector, starting from the\ncenter of mass of the active vessel. For example, the following code draws the\ndirection of the current vessels velocity relative to the surface of the body it\nis orbiting:\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.Drawing\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nVisualDebugging\n{\npublic\nstatic\nvoid\nMain\n()\n{\nvar\nconn\n=\nnew\nConnection\n(\n\"Visual Debugging\"\n);\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nrefFrame\n=\nvessel\n.\nSurfaceVelocityReferenceFrame\n;\nconn\n.\nDrawing\n().\nAddDirectionFromCom\n(\nnew\nTuple\n<\ndouble\n,\ndouble\n,\ndouble\n>\n(\n0\n,\n1\n,\n0\n),\nrefFrame\n);\nwhile\n(\ntrue\n)\n{\n}\n}\n}\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\n#include\n<krpc/services/ui.hpp>\n#include\n<krpc/services/drawing.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Visual Debugging\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nkrpc\n::\nservices\n::\nDrawing\ndrawing\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nauto\nref_frame\n=\nvessel\n.\nsurface_velocity_reference_frame\n();\ndrawing\n.\nadd_direction_from_com\n(\nstd\n::\nmake_tuple\n(\n0\n,\n1\n,\n0\n),\nref_frame\n);\nwhile\n(\ntrue\n)\n{\n}\n}\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\n#include\n<krpc_cnano/services/ui.h>\n#include\n<krpc_cnano/services/drawing.h>\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Visual debugging\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nref_frame\n;\nkrpc_SpaceCenter_Vessel_SurfaceVelocityReferenceFrame\n(\nconn\n,\n&\nref_frame\n,\nvessel\n);\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n0\n,\n1\n,\n0\n};\nkrpc_Drawing_AddDirectionFromCom\n(\nconn\n,\nNULL\n,\n&\ndirection\n,\nref_frame\n,\n10\n,\ntrue\n);\nwhile\n(\ntrue\n)\n{\n}\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.ReferenceFrame\n;\nimport\nkrpc.client.services.Drawing\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nVisualDebugging\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Visual Debugging\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nDrawing\ndrawing\n=\nDrawing\n.\nnewInstance\n(\nconnection\n);\nSpaceCenter\n.\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nReferenceFrame\nrefFrame\n=\nvessel\n.\ngetSurfaceVelocityReferenceFrame\n();\ndrawing\n.\naddDirectionFromCom\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n1.0\n,\n0.0\n),\nrefFrame\n,\n10\n,\ntrue\n);\nwhile\n(\ntrue\n)\n{\n}\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Visual Debugging'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nref_frame\n=\nvessel\n.\nsurface_velocity_reference_frame\nconn\n.\ndrawing\n.\nadd_direction_from_com\n(\nList\n{\n0\n,\n1\n,\n0\n},\nref_frame\n)\nwhile\ntrue\ndo\nend\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Visual Debugging'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nref_frame\n=\nvessel\n.\nsurface_velocity_reference_frame\nconn\n.\ndrawing\n.\nadd_direction_from_com\n((\n0\n,\n1\n,\n0\n),\nref_frame\n)\nwhile\nTrue\n:\npass\nNote\nThe client must remain connected for the line to continue to be drawn,\nhence the infinite loop at the end of this example.\nExamples\n¶\nThe following examples demonstrate various uses of reference frames.\nNavball directions\n¶\nThis example demonstrates how to make the vessel point in various directions on\nthe navball:\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nSystem.Collections.Generic\n;\nusing\nSystem.Net\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nNavballDirections\n{\npublic\nstatic\nvoid\nMain\n()\n{\nusing\n(\nvar\nconn\n=\nnew\nConnection\n(\n\"Navball directions\"\n))\n{\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nap\n=\nvessel\n.\nAutoPilot\n;\nap\n.\nReferenceFrame\n=\nvessel\n.\nSurfaceReferenceFrame\n;\nap\n.\nEngage\n();\n// Point the vessel north on the navball, with a pitch of 0 degrees\nap\n.\nTargetDirection\n=\nTuple\n.\nCreate\n(\n0.0\n,\n1.0\n,\n0.0\n);\nap\n.\nWait\n();\n// Point the vessel vertically upwards on the navball\nap\n.\nTargetDirection\n=\nTuple\n.\nCreate\n(\n1.0\n,\n0.0\n,\n0.0\n);\nap\n.\nWait\n();\n// Point the vessel west (heading of 270 degrees), with a pitch of 0 degrees\nap\n.\nTargetDirection\n=\nTuple\n.\nCreate\n(\n0.0\n,\n0.0\n,\n-\n1.0\n);\nap\n.\nWait\n();\nap\n.\nDisengage\n();\n}\n}\n}\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Navball directions\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nauto\nap\n=\nvessel\n.\nauto_pilot\n();\nap\n.\nset_reference_frame\n(\nvessel\n.\nsurface_reference_frame\n());\nap\n.\nengage\n();\n// Point the vessel north on the navball, with a pitch of 0 degrees\nap\n.\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n0\n,\n1\n,\n0\n));\nap\n.\nwait\n();\n// Point the vessel vertically upwards on the navball\nap\n.\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n1\n,\n0\n,\n0\n));\nap\n.\nwait\n();\n// Point the vessel west (heading of 270 degrees), with a pitch of 0 degrees\nap\n.\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n-1\n));\nap\n.\nwait\n();\nap\n.\ndisengage\n();\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Navball directions\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nvessel_srf_ref\n;\nkrpc_SpaceCenter_Vessel_SurfaceReferenceFrame\n(\nconn\n,\n&\nvessel_srf_ref\n,\nvessel\n);\nkrpc_SpaceCenter_AutoPilot_t\nap\n;\nkrpc_SpaceCenter_Vessel_AutoPilot\n(\nconn\n,\n&\nap\n,\nvessel\n);\nkrpc_SpaceCenter_AutoPilot_set_ReferenceFrame\n(\nconn\n,\nap\n,\nvessel_srf_ref\n);\nkrpc_SpaceCenter_AutoPilot_Engage\n(\nconn\n,\nap\n);\n// Point the vessel north on the navball, with a pitch of 0 degrees\n{\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n0\n,\n1\n,\n0\n};\nkrpc_SpaceCenter_AutoPilot_set_TargetDirection\n(\nconn\n,\nap\n,\n&\ndirection\n);\nkrpc_SpaceCenter_AutoPilot_Wait\n(\nconn\n,\nap\n);\n}\n// Point the vessel vertically upwards on the navball\n{\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n1\n,\n0\n,\n0\n};\nkrpc_SpaceCenter_AutoPilot_set_TargetDirection\n(\nconn\n,\nap\n,\n&\ndirection\n);\nkrpc_SpaceCenter_AutoPilot_Wait\n(\nconn\n,\nap\n);\n}\n// Point the vessel west (heading of 270 degrees), with a pitch of 0 degrees\n{\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n0\n,\n0\n,\n-1\n};\nkrpc_SpaceCenter_AutoPilot_set_TargetDirection\n(\nconn\n,\nap\n,\n&\ndirection\n);\nkrpc_SpaceCenter_AutoPilot_Wait\n(\nconn\n,\nap\n);\n}\nkrpc_SpaceCenter_AutoPilot_Disengage\n(\nconn\n,\nap\n);\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.AutoPilot\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nNavballDirections\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Navball directions\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nAutoPilot\nap\n=\nvessel\n.\ngetAutoPilot\n();\nap\n.\nsetReferenceFrame\n(\nvessel\n.\ngetSurfaceReferenceFrame\n());\nap\n.\nengage\n();\n// Point the vessel north on the navball, with a pitch of 0 degrees\nap\n.\nsetTargetDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n1.0\n,\n0.0\n));\nap\n.\nwait_\n();\n// Point the vessel vertically upwards on the navball\nap\n.\nsetTargetDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n1.0\n,\n0.0\n,\n0.0\n));\nap\n.\nwait_\n();\n// Point the vessel west (heading of 270 degrees), with a pitch of 0 degrees\nap\n.\nsetTargetDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n0.0\n,\n-\n1.0\n));\nap\n.\nwait_\n();\nap\n.\ndisengage\n();\nconnection\n.\nclose\n();\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nList\n=\nrequire\n'pl.List'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Navball directions'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nap\n=\nvessel\n.\nauto_pilot\nap\n.\nreference_frame\n=\nvessel\n.\nsurface_reference_frame\nap\n:\nengage\n()\n-- Point the vessel north on the navball, with a pitch of 0 degrees\nap\n.\ntarget_direction\n=\nList\n{\n0\n,\n1\n,\n0\n}\nap\n:\nwait\n()\n-- Point the vessel vertically upwards on the navball\nap\n.\ntarget_direction\n=\nList\n{\n1\n,\n0\n,\n0\n}\nap\n:\nwait\n()\n-- Point the vessel west (heading of 270 degrees), with a pitch of 0 degrees\nap\n.\ntarget_direction\n=\nList\n{\n0\n,\n0\n,\n-\n1\n}\nap\n:\nwait\n()\nap\n:\ndisengage\n()\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Navball directions'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nap\n=\nvessel\n.\nauto_pilot\nap\n.\nreference_frame\n=\nvessel\n.\nsurface_reference_frame\nap\n.\nengage\n()\n# Point the vessel north on the navball, with a pitch of 0 degrees\nap\n.\ntarget_direction\n=\n(\n0\n,\n1\n,\n0\n)\nap\n.\nwait\n()\n# Point the vessel vertically upwards on the navball\nap\n.\ntarget_direction\n=\n(\n1\n,\n0\n,\n0\n)\nap\n.\nwait\n()\n# Point the vessel west (heading of 270 degrees), with a pitch of 0 degrees\nap\n.\ntarget_direction\n=\n(\n0\n,\n0\n,\n-\n1\n)\nap\n.\nwait\n()\nap\n.\ndisengage\n()\nThe code uses the vessel’s surface reference frame\n(\nVessel.surface_reference_frame\n), pictured below:\nThe first part instructs the auto-pilot to point in direction\n(0,1,0)\n(i.e. along the y-axis) in the vessel’s surface reference frame. The y-axis of\nthe reference frame points in the north direction, as required.\nThe second part instructs the auto-pilot to point in direction\n(1,0,0)\n(along the x-axis) in the vessel’s surface reference frame. This x-axis of the\nreference frame points upwards (away from the planet) as required.\nFinally, the code instructs the auto-pilot to point in direction\n(0,0,-1)\n(along the negative z axis). The z-axis of the reference frame points east, so\nthe requested direction points west – as required.\nOrbital directions\n¶\nThis example demonstrates how to make the vessel point in the various orbital\ndirections, as seen on the navball when it is in ‘orbit’ mode. It uses\nVessel.orbital_reference_frame\n.\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nSystem.Collections.Generic\n;\nusing\nSystem.Net\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nNavballDirections\n{\npublic\nstatic\nvoid\nMain\n()\n{\nusing\n(\nvar\nconn\n=\nnew\nConnection\n(\n\"Orbital directions\"\n))\n{\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nap\n=\nvessel\n.\nAutoPilot\n;\nap\n.\nReferenceFrame\n=\nvessel\n.\nOrbitalReferenceFrame\n;\nap\n.\nEngage\n();\n// Point the vessel in the prograde direction\nap\n.\nTargetDirection\n=\nTuple\n.\nCreate\n(\n0.0\n,\n1.0\n,\n0.0\n);\nap\n.\nWait\n();\n// Point the vessel in the orbit normal direction\nap\n.\nTargetDirection\n=\nTuple\n.\nCreate\n(\n0.0\n,\n0.0\n,\n1.0\n);\nap\n.\nWait\n();\n// Point the vessel in the orbit radial direction\nap\n.\nTargetDirection\n=\nTuple\n.\nCreate\n(\n-\n1.0\n,\n0.0\n,\n0.0\n);\nap\n.\nWait\n();\nap\n.\nDisengage\n();\n}\n}\n}\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Orbital directions\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nauto\nap\n=\nvessel\n.\nauto_pilot\n();\nap\n.\nset_reference_frame\n(\nvessel\n.\norbital_reference_frame\n());\nap\n.\nengage\n();\n// Point the vessel in the prograde direction\nap\n.\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n0\n,\n1\n,\n0\n));\nap\n.\nwait\n();\n// Point the vessel in the orbit normal direction\nap\n.\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n1\n));\nap\n.\nwait\n();\n// Point the vessel in the orbit radial direction\nap\n.\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n-1\n,\n0\n,\n0\n));\nap\n.\nwait\n();\nap\n.\ndisengage\n();\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Orbital directions\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nvessel_obt_ref\n;\nkrpc_SpaceCenter_Vessel_OrbitalReferenceFrame\n(\nconn\n,\n&\nvessel_obt_ref\n,\nvessel\n);\nkrpc_SpaceCenter_AutoPilot_t\nap\n;\nkrpc_SpaceCenter_Vessel_AutoPilot\n(\nconn\n,\n&\nap\n,\nvessel\n);\nkrpc_SpaceCenter_AutoPilot_set_ReferenceFrame\n(\nconn\n,\nap\n,\nvessel_obt_ref\n);\nkrpc_SpaceCenter_AutoPilot_Engage\n(\nconn\n,\nap\n);\n// Point the vessel in the prograde direction\n{\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n0\n,\n1\n,\n0\n};\nkrpc_SpaceCenter_AutoPilot_set_TargetDirection\n(\nconn\n,\nap\n,\n&\ndirection\n);\nkrpc_SpaceCenter_AutoPilot_Wait\n(\nconn\n,\nap\n);\n}\n// Point the vessel in the orbit normal direction\n{\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n0\n,\n0\n,\n1\n};\nkrpc_SpaceCenter_AutoPilot_set_TargetDirection\n(\nconn\n,\nap\n,\n&\ndirection\n);\nkrpc_SpaceCenter_AutoPilot_Wait\n(\nconn\n,\nap\n);\n}\n// Point the vessel in the orbit radial direction\n{\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n-1\n,\n0\n,\n0\n};\nkrpc_SpaceCenter_AutoPilot_set_TargetDirection\n(\nconn\n,\nap\n,\n&\ndirection\n);\nkrpc_SpaceCenter_AutoPilot_Wait\n(\nconn\n,\nap\n);\n}\nkrpc_SpaceCenter_AutoPilot_Disengage\n(\nconn\n,\nap\n);\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.AutoPilot\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nOrbitalDirections\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Orbital directions\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nAutoPilot\nap\n=\nvessel\n.\ngetAutoPilot\n();\nap\n.\nsetReferenceFrame\n(\nvessel\n.\ngetOrbitalReferenceFrame\n());\nap\n.\nengage\n();\n// Point the vessel in the prograde direction\nap\n.\nsetTargetDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n1.0\n,\n0.0\n));\nap\n.\nwait_\n();\n// Point the vessel in the orbit normal direction\nap\n.\nsetTargetDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n0.0\n,\n1.0\n));\nap\n.\nwait_\n();\n// Point the vessel in the orbit radial direction\nap\n.\nsetTargetDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n-\n1.0\n,\n0.0\n,\n0.0\n));\nap\n.\nwait_\n();\nap\n.\ndisengage\n();\nconnection\n.\nclose\n();\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nList\n=\nrequire\n'pl.List'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Orbital directions'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nap\n=\nvessel\n.\nauto_pilot\nap\n.\nreference_frame\n=\nvessel\n.\norbital_reference_frame\nap\n:\nengage\n()\n-- Point the vessel in the prograde direction\nap\n.\ntarget_direction\n=\nList\n{\n0\n,\n1\n,\n0\n}\nap\n:\nwait\n()\n-- Point the vessel in the orbit normal direction\nap\n.\ntarget_direction\n=\nList\n{\n0\n,\n0\n,\n1\n}\nap\n:\nwait\n()\n-- Point the vessel in the orbit radial direction\nap\n.\ntarget_direction\n=\nList\n{\n-\n1\n,\n0\n,\n0\n}\nap\n:\nwait\n()\nap\n:\ndisengage\n()\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Orbital directions'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nap\n=\nvessel\n.\nauto_pilot\nap\n.\nreference_frame\n=\nvessel\n.\norbital_reference_frame\nap\n.\nengage\n()\n# Point the vessel in the prograde direction\nap\n.\ntarget_direction\n=\n(\n0\n,\n1\n,\n0\n)\nap\n.\nwait\n()\n# Point the vessel in the orbit normal direction\nap\n.\ntarget_direction\n=\n(\n0\n,\n0\n,\n1\n)\nap\n.\nwait\n()\n# Point the vessel in the orbit radial direction\nap\n.\ntarget_direction\n=\n(\n-\n1\n,\n0\n,\n0\n)\nap\n.\nwait\n()\nap\n.\ndisengage\n()\nThis code uses the vessel’s orbital reference frame, pictured below:\nSurface ‘prograde’\n¶\nThis example demonstrates how to point the vessel in the ‘prograde’ direction on\nthe navball, when in ‘surface’ mode. This is the direction of the vessels\nvelocity relative to the surface:\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nSurfacePrograde\n{\npublic\nstatic\nvoid\nMain\n()\n{\nusing\n(\nvar\nconnection\n=\nnew\nConnection\n(\nname\n:\n\"Surface prograde\"\n))\n{\nvar\nvessel\n=\nconnection\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nap\n=\nvessel\n.\nAutoPilot\n;\nap\n.\nReferenceFrame\n=\nvessel\n.\nSurfaceVelocityReferenceFrame\n;\nap\n.\nTargetDirection\n=\nnew\nTuple\n<\ndouble\n,\ndouble\n,\ndouble\n>\n(\n0\n,\n1\n,\n0\n);\nap\n.\nEngage\n();\nap\n.\nWait\n();\nap\n.\nDisengage\n();\n}\n}\n}\n#include\n<iostream>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Surface prograde\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspaceCenter\n(\n&\nconn\n);\nauto\nvessel\n=\nspaceCenter\n.\nactive_vessel\n();\nauto\nap\n=\nvessel\n.\nauto_pilot\n();\nap\n.\nset_reference_frame\n(\nvessel\n.\nsurface_velocity_reference_frame\n());\nap\n.\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n0.0\n,\n1.0\n,\n0.0\n));\nap\n.\nengage\n();\nap\n.\nwait\n();\nap\n.\ndisengage\n();\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Surface prograde\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nvessel_srf_vel_ref\n;\nkrpc_SpaceCenter_Vessel_SurfaceVelocityReferenceFrame\n(\nconn\n,\n&\nvessel_srf_vel_ref\n,\nvessel\n);\nkrpc_SpaceCenter_AutoPilot_t\nap\n;\nkrpc_SpaceCenter_Vessel_AutoPilot\n(\nconn\n,\n&\nap\n,\nvessel\n);\nkrpc_SpaceCenter_AutoPilot_set_ReferenceFrame\n(\nconn\n,\nap\n,\nvessel_srf_vel_ref\n);\nkrpc_tuple_double_double_double_t\ndirection\n=\n{\n0\n,\n1\n,\n0\n};\nkrpc_SpaceCenter_AutoPilot_set_TargetDirection\n(\nconn\n,\nap\n,\n&\ndirection\n);\nkrpc_SpaceCenter_AutoPilot_Engage\n(\nconn\n,\nap\n);\nkrpc_SpaceCenter_AutoPilot_Wait\n(\nconn\n,\nap\n);\nkrpc_SpaceCenter_AutoPilot_Disengage\n(\nconn\n,\nap\n);\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.AutoPilot\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nSurfacePrograde\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Surface prograde\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nAutoPilot\nap\n=\nvessel\n.\ngetAutoPilot\n();\nap\n.\nsetReferenceFrame\n(\nvessel\n.\ngetSurfaceVelocityReferenceFrame\n());\nap\n.\nsetTargetDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n1.0\n,\n0.0\n));\nap\n.\nengage\n();\nap\n.\nwait_\n();\nap\n.\ndisengage\n();\nconnection\n.\nclose\n();\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nList\n=\nrequire\n'pl.List'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Surface prograde'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nap\n=\nvessel\n.\nauto_pilot\nap\n.\nreference_frame\n=\nvessel\n.\nsurface_velocity_reference_frame\nap\n.\ntarget_direction\n=\nList\n{\n0\n,\n1\n,\n0\n}\nap\n:\nengage\n()\nap\n:\nwait\n()\nap\n:\ndisengage\n()\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Surface prograde'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nap\n=\nvessel\n.\nauto_pilot\nap\n.\nreference_frame\n=\nvessel\n.\nsurface_velocity_reference_frame\nap\n.\ntarget_direction\n=\n(\n0\n,\n1\n,\n0\n)\nap\n.\nengage\n()\nap\n.\nwait\n()\nap\n.\ndisengage\n()\nThis code uses the\nVessel.surface_velocity_reference_frame\n, pictured\nbelow:\nVessel Speed\n¶\nThis example demonstrates how to get the orbital and surface speeds of the\nvessel, equivalent to the values displayed by the navball.\nTo compute the orbital speed of a vessel, you need to get the velocity relative\nto the planet’s\nnon-rotating\nreference frame\n(\nCelestialBody.non_rotating_reference_frame\n). This reference frame is\nfixed relative to the body, but does not rotate.\nFor the surface speed, the planet’s reference frame\n(\nCelestialBody.reference_frame\n) is required, as this reference frame\nrotates with the body.\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nVesselSpeed\n{\npublic\nstatic\nvoid\nMain\n()\n{\nvar\nconnection\n=\nnew\nConnection\n(\nname\n:\n\"Vessel speed\"\n);\nvar\nvessel\n=\nconnection\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nobtFrame\n=\nvessel\n.\nOrbit\n.\nBody\n.\nNonRotatingReferenceFrame\n;\nvar\nsrfFrame\n=\nvessel\n.\nOrbit\n.\nBody\n.\nReferenceFrame\n;\nwhile\n(\ntrue\n)\n{\nvar\nobtSpeed\n=\nvessel\n.\nFlight\n(\nobtFrame\n).\nSpeed\n;\nvar\nsrfSpeed\n=\nvessel\n.\nFlight\n(\nsrfFrame\n).\nSpeed\n;\nConsole\n.\nWriteLine\n(\n\"Orbital speed = {0:F1} m/s, Surface speed = {1:F1} m/s\"\n,\nobtSpeed\n,\nsrfSpeed\n);\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n}\n}\n}\n#include\n<iostream>\n#include\n<iomanip>\n#include\n<thread>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Vessel speed\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspaceCenter\n(\n&\nconn\n);\nauto\nvessel\n=\nspaceCenter\n.\nactive_vessel\n();\nauto\nobt_frame\n=\nvessel\n.\norbit\n().\nbody\n().\nnon_rotating_reference_frame\n();\nauto\nsrf_frame\n=\nvessel\n.\norbit\n().\nbody\n().\nreference_frame\n();\nwhile\n(\ntrue\n)\n{\nauto\nobt_speed\n=\nvessel\n.\nflight\n(\nobt_frame\n).\nspeed\n();\nauto\nsrf_speed\n=\nvessel\n.\nflight\n(\nsrf_frame\n).\nspeed\n();\nstd\n::\ncout\n<<\nstd\n::\nfixed\n<<\nstd\n::\nsetprecision\n(\n1\n)\n<<\n\"Orbital speed = \"\n<<\nobt_speed\n<<\n\" m/s, \"\n<<\n\"Surface speed = \"\n<<\nsrf_speed\n<<\n\" m/s\"\n<<\nstd\n::\nendl\n;\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n}\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Vessel speed\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Orbit_t\norbit\n;\nkrpc_SpaceCenter_Vessel_Orbit\n(\nconn\n,\n&\norbit\n,\nvessel\n);\nkrpc_SpaceCenter_CelestialBody_t\nbody\n;\nkrpc_SpaceCenter_Orbit_Body\n(\nconn\n,\n&\nbody\n,\norbit\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nobt_frame\n;\nkrpc_SpaceCenter_ReferenceFrame_t\nsrf_frame\n;\nkrpc_SpaceCenter_CelestialBody_NonRotatingReferenceFrame\n(\nconn\n,\n&\nobt_frame\n,\nbody\n);\nkrpc_SpaceCenter_CelestialBody_ReferenceFrame\n(\nconn\n,\n&\nsrf_frame\n,\nbody\n);\nwhile\n(\ntrue\n)\n{\ndouble\nobt_speed\n;\ndouble\nsrf_speed\n;\nkrpc_SpaceCenter_Flight_t\nflight\n;\nkrpc_SpaceCenter_Vessel_Flight\n(\nconn\n,\n&\nflight\n,\nvessel\n,\nobt_frame\n);\nkrpc_SpaceCenter_Flight_Speed\n(\nconn\n,\n&\nobt_speed\n,\nflight\n);\nkrpc_SpaceCenter_Vessel_Flight\n(\nconn\n,\n&\nflight\n,\nvessel\n,\nsrf_frame\n);\nkrpc_SpaceCenter_Flight_Speed\n(\nconn\n,\n&\nsrf_speed\n,\nflight\n);\nprintf\n(\n\"Orbital speed = %.1f m/s, Surface speed = %.1f m/s\n\\n\n\"\n,\nobt_speed\n,\nsrf_speed\n);\nsleep\n(\n1\n);\n}\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.ReferenceFrame\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nVesselSpeed\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n,\nInterruptedException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Vessel speed\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nReferenceFrame\nobtFrame\n=\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetNonRotatingReferenceFrame\n();\nReferenceFrame\nsrfFrame\n=\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n();\nwhile\n(\ntrue\n)\n{\ndouble\nobtSpeed\n=\nvessel\n.\nflight\n(\nobtFrame\n).\ngetSpeed\n();\ndouble\nsrfSpeed\n=\nvessel\n.\nflight\n(\nsrfFrame\n).\ngetSpeed\n();\nSystem\n.\nout\n.\nprintf\n(\n\"Orbital speed = %.1f m/s, Surface speed = %.1f m/s\\n\"\n,\nobtSpeed\n,\nsrfSpeed\n);\nThread\n.\nsleep\n(\n1000\n);\n}\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nplatform\n=\nrequire\n'krpc.platform'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Vessel speed'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nobt_frame\n=\nvessel\n.\norbit\n.\nbody\n.\nnon_rotating_reference_frame\nlocal\nsrf_frame\n=\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\nwhile\ntrue\ndo\nobt_speed\n=\nvessel\n:\nflight\n(\nobt_frame\n).\nspeed\nsrf_speed\n=\nvessel\n:\nflight\n(\nsrf_frame\n).\nspeed\nprint\n(\nstring.format\n(\n'Orbital speed = %.1f m/s, Surface speed = %.1f m/s'\n,\nobt_speed\n,\nsrf_speed\n))\nplatform\n.\nsleep\n(\n1\n)\nend\nimport\ntime\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Vessel speed'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nobt_frame\n=\nvessel\n.\norbit\n.\nbody\n.\nnon_rotating_reference_frame\nsrf_frame\n=\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\nwhile\nTrue\n:\nobt_speed\n=\nvessel\n.\nflight\n(\nobt_frame\n)\n.\nspeed\nsrf_speed\n=\nvessel\n.\nflight\n(\nsrf_frame\n)\n.\nspeed\nprint\n(\n'Orbital speed =\n%.1f\nm/s, Surface speed =\n%.1f\nm/s'\n%\n(\nobt_speed\n,\nsrf_speed\n))\ntime\n.\nsleep\n(\n1\n)\nVessel Velocity\n¶\nThis example demonstrates how to get the velocity of the vessel (as a vector),\nrelative to the surface of the body being orbited.\nTo do this, a hybrid reference frame is required. This is because we want a\nreference frame that is centered on the vessel, but whose linear velocity is\nfixed relative to the ground.\nWe therefore create a hybrid reference frame with its rotation set to the\nvessel’s surface reference frame (\nVessel.surface_reference_frame\n), and\nall other properties (including position and velocity) set to the body’s\nreference frame (\nCelestialBody.reference_frame\n) – which rotates with\nthe body.\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nVesselVelocity\n{\npublic\nstatic\nvoid\nMain\n()\n{\nvar\nconnection\n=\nnew\nConnection\n(\nname\n:\n\"Vessel velocity\"\n);\nvar\nvessel\n=\nconnection\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nrefFrame\n=\nReferenceFrame\n.\nCreateHybrid\n(\nconnection\n,\nvessel\n.\nOrbit\n.\nBody\n.\nReferenceFrame\n,\nvessel\n.\nSurfaceReferenceFrame\n);\nwhile\n(\ntrue\n)\n{\nvar\nvelocity\n=\nvessel\n.\nFlight\n(\nrefFrame\n).\nVelocity\n;\nConsole\n.\nWriteLine\n(\n\"Surface velocity = ({0:F1}, {1:F1}, {2:F1})\"\n,\nvelocity\n.\nItem1\n,\nvelocity\n.\nItem2\n,\nvelocity\n.\nItem3\n);\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n}\n}\n}\n#include\n<iostream>\n#include\n<iomanip>\n#include\n<thread>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconnection\n=\nkrpc\n::\nconnect\n(\n\"Vessel velocity\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspaceCenter\n(\n&\nconnection\n);\nauto\nvessel\n=\nspaceCenter\n.\nactive_vessel\n();\nauto\nref_frame\n=\nkrpc\n::\nservices\n::\nSpaceCenter\n::\nReferenceFrame\n::\ncreate_hybrid\n(\nconnection\n,\nvessel\n.\norbit\n().\nbody\n().\nreference_frame\n(),\nvessel\n.\nsurface_reference_frame\n()\n);\nwhile\n(\ntrue\n)\n{\nauto\nvelocity\n=\nvessel\n.\nflight\n(\nref_frame\n).\nvelocity\n();\nstd\n::\ncout\n<<\nstd\n::\nfixed\n<<\nstd\n::\nsetprecision\n(\n1\n)\n<<\n\"Surface velocity = (\"\n<<\nstd\n::\nget\n<\n0\n>\n(\nvelocity\n)\n<<\n\",\"\n<<\nstd\n::\nget\n<\n1\n>\n(\nvelocity\n)\n<<\n\",\"\n<<\nstd\n::\nget\n<\n2\n>\n(\nvelocity\n)\n<<\n\")\"\n<<\nstd\n::\nendl\n;\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n}\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Vessel velocity\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Orbit_t\norbit\n;\nkrpc_SpaceCenter_Vessel_Orbit\n(\nconn\n,\n&\norbit\n,\nvessel\n);\nkrpc_SpaceCenter_CelestialBody_t\nbody\n;\nkrpc_SpaceCenter_Orbit_Body\n(\nconn\n,\n&\nbody\n,\norbit\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nvessel_srf_frame\n;\nkrpc_SpaceCenter_Vessel_SurfaceReferenceFrame\n(\nconn\n,\n&\nvessel_srf_frame\n,\nvessel\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nbody_frame\n;\nkrpc_SpaceCenter_CelestialBody_ReferenceFrame\n(\nconn\n,\n&\nbody_frame\n,\nbody\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nref_frame\n;\nkrpc_SpaceCenter_ReferenceFrame_CreateHybrid\n(\nconn\n,\n&\nref_frame\n,\nbody_frame\n,\nvessel_srf_frame\n,\nKRPC_NULL\n,\nKRPC_NULL\n);\nwhile\n(\ntrue\n)\n{\nkrpc_tuple_double_double_double_t\nvelocity\n;\nkrpc_SpaceCenter_Flight_t\nflight\n;\nkrpc_SpaceCenter_Vessel_Flight\n(\nconn\n,\n&\nflight\n,\nvessel\n,\nref_frame\n);\nkrpc_SpaceCenter_Flight_Velocity\n(\nconn\n,\n&\nvelocity\n,\nflight\n);\nprintf\n(\n\"Surface velocity = %.1f, %.1f, %.1f\n\\n\n\"\n,\nvelocity\n.\ne0\n,\nvelocity\n.\ne1\n,\nvelocity\n.\ne2\n);\nsleep\n(\n1\n);\n}\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.ReferenceFrame\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nVesselVelocity\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n,\nInterruptedException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Vessel velocity\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nReferenceFrame\nrefFrame\n=\nReferenceFrame\n.\ncreateHybrid\n(\nconnection\n,\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n(),\nvessel\n.\ngetSurfaceReferenceFrame\n(),\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n(),\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n());\nwhile\n(\ntrue\n)\n{\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nvelocity\n=\nvessel\n.\nflight\n(\nrefFrame\n).\ngetVelocity\n();\nSystem\n.\nout\n.\nprintf\n(\n\"Surface velocity = (%.1f, %.1f, %.1f)\\n\"\n,\nvelocity\n.\ngetValue0\n(),\nvelocity\n.\ngetValue1\n(),\nvelocity\n.\ngetValue2\n());\nThread\n.\nsleep\n(\n1000\n);\n}\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nplatform\n=\nrequire\n'krpc.platform'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Orbital speed'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nref_frame\n=\nconn\n.\nSpaceCenter\n.\nReferenceFrame\n.\nCreateHybrid\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n,\nvessel\n.\nsurface_reference_frame\n)\nwhile\ntrue\ndo\nvelocity\n=\nvessel\n:\nflight\n(\nref_frame\n).\nvelocity\nprint\n(\nstring.format\n(\n'Surface velocity = (%.1f, %.1f, %.1f)'\n,\nvelocity\n[\n1\n],\nvelocity\n[\n2\n],\nvelocity\n[\n3\n]))\nplatform\n.\nsleep\n(\n1\n)\nend\nimport\ntime\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Orbital speed'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nref_frame\n=\nconn\n.\nspace_center\n.\nReferenceFrame\n.\ncreate_hybrid\n(\nposition\n=\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n,\nrotation\n=\nvessel\n.\nsurface_reference_frame\n)\nwhile\nTrue\n:\nvelocity\n=\nvessel\n.\nflight\n(\nref_frame\n)\n.\nvelocity\nprint\n(\n'Surface velocity = (\n%.1f\n,\n%.1f\n,\n%.1f\n)'\n%\nvelocity\n)\ntime\n.\nsleep\n(\n1\n)\nAngle of attack\n¶\nThis example computes the angle between the direction the vessel is pointing in,\nand the direction that the vessel is moving in (relative to the surface):\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nAngleOfAttack\n{\npublic\nstatic\nvoid\nMain\n()\n{\nvar\nconn\n=\nnew\nConnection\n(\n\"Angle of attack\"\n);\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nwhile\n(\ntrue\n)\n{\nvar\nd\n=\nvessel\n.\nDirection\n(\nvessel\n.\nOrbit\n.\nBody\n.\nReferenceFrame\n);\nvar\nv\n=\nvessel\n.\nVelocity\n(\nvessel\n.\nOrbit\n.\nBody\n.\nReferenceFrame\n);\n// Compute the dot product of d and v\nvar\ndotProd\n=\nd\n.\nItem1\n*\nv\n.\nItem1\n+\nd\n.\nItem2\n*\nv\n.\nItem2\n+\nd\n.\nItem3\n*\nv\n.\nItem3\n;\n// Compute the magnitude of v\nvar\nvMag\n=\nMath\n.\nSqrt\n(\nv\n.\nItem1\n*\nv\n.\nItem1\n+\nv\n.\nItem2\n*\nv\n.\nItem2\n+\nv\n.\nItem3\n*\nv\n.\nItem3\n);\n// Note: don't need to magnitude of d as it is a unit vector\n// Compute the angle between the vectors\ndouble\nangle\n=\n0\n;\nif\n(\ndotProd\n>\n0\n)\nangle\n=\nMath\n.\nAbs\n(\nMath\n.\nAcos\n(\ndotProd\n/\nvMag\n)\n*\n(\n180.0\n/\nMath\n.\nPI\n));\nConsole\n.\nWriteLine\n(\n\"Angle of attack = \"\n+\nMath\n.\nRound\n(\nangle\n,\n2\n)\n+\n\" degrees\"\n);\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n}\n}\n}\n#include\n<iostream>\n#include\n<iomanip>\n#include\n<cmath>\n#include\n<chrono>\n#include\n<thread>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nstatic\nconst\ndouble\npi\n=\n3.1415926535897\n;\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Angle of attack\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nwhile\n(\ntrue\n)\n{\nauto\nd\n=\nvessel\n.\ndirection\n(\nvessel\n.\norbit\n().\nbody\n().\nreference_frame\n());\nauto\nv\n=\nvessel\n.\nvelocity\n(\nvessel\n.\norbit\n().\nbody\n().\nreference_frame\n());\n// Compute the dot product of d and v\ndouble\ndotProd\n=\nstd\n::\nget\n<\n0\n>\n(\nd\n)\n*\nstd\n::\nget\n<\n0\n>\n(\nv\n)\n+\nstd\n::\nget\n<\n1\n>\n(\nd\n)\n*\nstd\n::\nget\n<\n1\n>\n(\nv\n)\n+\nstd\n::\nget\n<\n2\n>\n(\nd\n)\n*\nstd\n::\nget\n<\n2\n>\n(\nv\n);\n// Compute the magnitude of v\ndouble\nvMag\n=\nsqrt\n(\nstd\n::\nget\n<\n0\n>\n(\nv\n)\n*\nstd\n::\nget\n<\n0\n>\n(\nv\n)\n+\nstd\n::\nget\n<\n1\n>\n(\nv\n)\n*\nstd\n::\nget\n<\n1\n>\n(\nv\n)\n+\nstd\n::\nget\n<\n2\n>\n(\nv\n)\n*\nstd\n::\nget\n<\n2\n>\n(\nv\n));\n// Note: don't need to magnitude of d as it is a unit vector\n// Compute the angle between the vectors\ndouble\nangle\n=\n0\n;\nif\n(\ndotProd\n>\n0\n)\nangle\n=\nfabs\n(\nacos\n(\ndotProd\n/\nvMag\n)\n*\n(\n180.0\n/\npi\n));\nstd\n::\ncout\n<<\n\"Angle of attack = \"\n<<\nstd\n::\nfixed\n<<\nstd\n::\nsetprecision\n(\n1\n)\n<<\nangle\n<<\n\" degrees\"\n<<\nstd\n::\nendl\n;\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n}\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\nstatic\ndouble\npi\n=\n3.1415926535897\n;\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Angle of attack\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Orbit_t\norbit\n;\nkrpc_SpaceCenter_Vessel_Orbit\n(\nconn\n,\n&\norbit\n,\nvessel\n);\nkrpc_SpaceCenter_CelestialBody_t\nbody\n;\nkrpc_SpaceCenter_Orbit_Body\n(\nconn\n,\n&\nbody\n,\norbit\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nbody_ref\n;\nkrpc_SpaceCenter_CelestialBody_ReferenceFrame\n(\nconn\n,\n&\nbody_ref\n,\nbody\n);\nwhile\n(\ntrue\n)\n{\nvector3\nd\n;\nvector3\nv\n;\nkrpc_SpaceCenter_Vessel_Direction\n(\nconn\n,\n&\nd\n,\nvessel\n,\nbody_ref\n);\nkrpc_SpaceCenter_Vessel_Velocity\n(\nconn\n,\n&\nv\n,\nvessel\n,\nbody_ref\n);\n// Compute the dot product of d and v\ndouble\ndotProd\n=\nd\n.\ne0\n*\nv\n.\ne0\n+\nd\n.\ne1\n*\nv\n.\ne1\n+\nd\n.\ne2\n*\nv\n.\ne2\n;\n// Compute the magnitude of v\ndouble\nvMag\n=\nsqrt\n(\nv\n.\ne0\n*\nv\n.\ne0\n+\nv\n.\ne1\n*\nv\n.\ne1\n+\nv\n.\ne2\n*\nv\n.\ne2\n);\n// Note: don't need to magnitude of d as it is a unit vector\n// Compute the angle between the vectors\ndouble\nangle\n=\n0\n;\nif\n(\ndotProd\n>\n0\n)\nangle\n=\nfabs\n(\nacos\n(\ndotProd\n/\nvMag\n)\n*\n(\n180.0\n/\npi\n));\nprintf\n(\n\"Angle of attack = %.1f degrees\n\\n\n\"\n,\nangle\n);\nsleep\n(\n1\n);\n}\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\nimport\njava.lang.Math\n;\npublic\nclass\nAngleOfAttack\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n,\nInterruptedException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Angle of attack\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nSpaceCenter\n.\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nwhile\n(\ntrue\n)\n{\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nd\n=\nvessel\n.\ndirection\n(\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n());\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nv\n=\nvessel\n.\nvelocity\n(\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetReferenceFrame\n());\n// Compute the dot product of d and v\ndouble\ndotProd\n=\nd\n.\ngetValue0\n()\n*\nv\n.\ngetValue0\n()\n+\nd\n.\ngetValue1\n()\n*\nv\n.\ngetValue1\n()\n+\nd\n.\ngetValue2\n()\n*\nv\n.\ngetValue2\n();\n// Compute the magnitude of v\ndouble\nvMag\n=\nMath\n.\nsqrt\n(\nv\n.\ngetValue0\n()\n*\nv\n.\ngetValue0\n()\n+\nv\n.\ngetValue1\n()\n*\nv\n.\ngetValue1\n()\n+\nv\n.\ngetValue2\n()\n*\nv\n.\ngetValue2\n()\n);\n// Note: don't need to magnitude of d as it is a unit vector\n// Compute the angle between the vectors\ndouble\nangle\n=\n0\n;\nif\n(\ndotProd\n>\n0\n)\n{\nangle\n=\nMath\n.\nabs\n(\nMath\n.\nacos\n(\ndotProd\n/\nvMag\n)\n*\n(\n180.0\n/\nMath\n.\nPI\n));\n}\nSystem\n.\nout\n.\nprintf\n(\n\"Angle of attack = %.1f degrees\\n\"\n,\nangle\n);\nThread\n.\nsleep\n(\n1000\n);\n}\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nplatform\n=\nrequire\n'krpc.platform'\nlocal\nmath\n=\nrequire\n'math'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Angle of attack'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nwhile\ntrue\ndo\nd\n=\nvessel\n:\ndirection\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n)\nv\n=\nvessel\n:\nvelocity\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n)\n-- Compute the dot product of d and v\ndotprod\n=\nd\n[\n1\n]\n*\nv\n[\n1\n]\n+\nd\n[\n2\n]\n*\nv\n[\n2\n]\n+\nd\n[\n3\n]\n*\nv\n[\n3\n]\n-- Compute the magnitude of v\nvmag\n=\nmath.sqrt\n(\nv\n[\n1\n]\n*\nv\n[\n1\n]\n+\nv\n[\n2\n]\n*\nv\n[\n2\n]\n+\nv\n[\n3\n]\n*\nv\n[\n3\n])\n-- Note: don't need to magnitude of d as it is a unit vector\n-- Compute the angle between the vectors\nangle\n=\n0\nif\ndotprod\n>\n0\nthen\nangle\n=\nmath.abs\n(\nmath.acos\n(\ndotprod\n/\nvmag\n)\n*\n(\n180.\n/\nmath.pi\n))\nend\nprint\n(\nstring.format\n(\n'Angle of attack = %.1f'\n,\nangle\n))\nplatform\n.\nsleep\n(\n1\n)\nend\nimport\nmath\nimport\ntime\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Angle of attack'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nwhile\nTrue\n:\nd\n=\nvessel\n.\ndirection\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n)\nv\n=\nvessel\n.\nvelocity\n(\nvessel\n.\norbit\n.\nbody\n.\nreference_frame\n)\n# Compute the dot product of d and v\ndotprod\n=\nd\n[\n0\n]\n*\nv\n[\n0\n]\n+\nd\n[\n1\n]\n*\nv\n[\n1\n]\n+\nd\n[\n2\n]\n*\nv\n[\n2\n]\n# Compute the magnitude of v\nvmag\n=\nmath\n.\nsqrt\n(\nv\n[\n0\n]\n**\n2\n+\nv\n[\n1\n]\n**\n2\n+\nv\n[\n2\n]\n**\n2\n)\n# Note: don't need to magnitude of d as it is a unit vector\n# Compute the angle between the vectors\nangle\n=\n0\nif\ndotprod\n>\n0\n:\nangle\n=\nabs\n(\nmath\n.\nacos\n(\ndotprod\n/\nvmag\n)\n*\n(\n180.0\n/\nmath\n.\npi\n))\nprint\n(\n'Angle of attack =\n%.1f\ndegrees'\n%\nangle\n)\ntime\n.\nsleep\n(\n1\n)\nNote that the orientation of the reference frame used to get the direction and\nvelocity vectors does not matter, as the angle between two vectors is the same\nregardless of the orientation of the axes. However, if we were to use a\nreference frame that moves with the vessel, the velocity would return\n(0,0,0)\n. We therefore need a reference frame that is not fixed relative to\nthe vessel.\nCelestialBody.reference_frame\nfits these requirements.\nLanding Site\n¶\nThis example computes a reference frame that is located on the surface of a body\nat a given altitude, which could be used as the target for a landing auto pilot.\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nusing\nKRPC.Client.Services.Drawing\n;\nclass\nLandingSite\n{\npublic\nstatic\nvoid\nMain\n()\n{\nvar\nconn\n=\nnew\nConnection\n(\n\"Landing Site\"\n);\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nbody\n=\nvessel\n.\nOrbit\n.\nBody\n;\n// Define the landing site as the top of the VAB\ndouble\nlandingLatitude\n=\n-\n(\n0.0\n+\n(\n5.0\n/\n60.0\n)\n+\n(\n48.38\n/\n60.0\n/\n60.0\n));\ndouble\nlandingLongitude\n=\n-\n(\n74.0\n+\n(\n37.0\n/\n60.0\n)\n+\n(\n12.2\n/\n60.0\n/\n60.0\n));\ndouble\nlandingAltitude\n=\n111\n;\n// Determine landing site reference frame\n// (orientation: x=zenith, y=north, z=east)\nvar\nlandingPosition\n=\nbody\n.\nSurfacePosition\n(\nlandingLatitude\n,\nlandingLongitude\n,\nbody\n.\nReferenceFrame\n);\nvar\nqLong\n=\nTuple\n.\nCreate\n(\n0.0\n,\nMath\n.\nSin\n(\n-\nlandingLongitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n),\n0.0\n,\nMath\n.\nCos\n(\n-\nlandingLongitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n)\n);\nvar\nqLat\n=\nTuple\n.\nCreate\n(\n0.0\n,\n0.0\n,\nMath\n.\nSin\n(\nlandingLatitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n),\nMath\n.\nCos\n(\nlandingLatitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n)\n);\nvar\nlandingReferenceFrame\n=\nReferenceFrame\n.\nCreateRelative\n(\nconn\n,\nReferenceFrame\n.\nCreateRelative\n(\nconn\n,\nReferenceFrame\n.\nCreateRelative\n(\nconn\n,\nbody\n.\nReferenceFrame\n,\nlandingPosition\n,\nqLong\n),\nTuple\n.\nCreate\n(\n0.0\n,\n0.0\n,\n0.0\n),\nqLat\n),\nTuple\n.\nCreate\n(\nlandingAltitude\n,\n0.0\n,\n0.0\n));\n// Draw axes\nvar\nzero\n=\nTuple\n.\nCreate\n(\n0.0\n,\n0.0\n,\n0.0\n);\nconn\n.\nDrawing\n().\nAddLine\n(\nzero\n,\nTuple\n.\nCreate\n(\n1.0\n,\n0.0\n,\n0.0\n),\nlandingReferenceFrame\n);\nconn\n.\nDrawing\n().\nAddLine\n(\nzero\n,\nTuple\n.\nCreate\n(\n0.0\n,\n1.0\n,\n0.0\n),\nlandingReferenceFrame\n);\nconn\n.\nDrawing\n().\nAddLine\n(\nzero\n,\nTuple\n.\nCreate\n(\n0.0\n,\n0.0\n,\n1.0\n),\nlandingReferenceFrame\n);\nwhile\n(\ntrue\n)\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n}\n}\n#include\n<iostream>\n#include\n<iomanip>\n#include\n<cmath>\n#include\n<chrono>\n#include\n<thread>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\n#include\n<krpc/services/ui.hpp>\n#include\n<krpc/services/drawing.hpp>\nstatic\nconst\ndouble\npi\n=\n3.1415926535897\n;\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Landing Site\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nkrpc\n::\nservices\n::\nDrawing\ndrawing\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nauto\nbody\n=\nvessel\n.\norbit\n().\nbody\n();\n// Define the landing site as the top of the VAB\ndouble\nlanding_latitude\n=\n-\n(\n0.0\n+\n(\n5.0\n/\n60.0\n)\n+\n(\n48.38\n/\n60.0\n/\n60.0\n));\ndouble\nlanding_longitude\n=\n-\n(\n74.0\n+\n(\n37.0\n/\n60.0\n)\n+\n(\n12.2\n/\n60.0\n/\n60.0\n));\ndouble\nlanding_altitude\n=\n111\n;\n// Determine landing site reference frame\n// (orientation: x=zenith, y=north, z=east)\nauto\nlanding_position\n=\nbody\n.\nsurface_position\n(\nlanding_latitude\n,\nlanding_longitude\n,\nbody\n.\nreference_frame\n());\nauto\nq_long\n=\nstd\n::\nmake_tuple\n(\n0.0\n,\nsin\n(\n-\nlanding_longitude\n*\n0.5\n*\npi\n/\n180.0\n),\n0.0\n,\ncos\n(\n-\nlanding_longitude\n*\n0.5\n*\npi\n/\n180.0\n)\n);\nauto\nq_lat\n=\nstd\n::\nmake_tuple\n(\n0.0\n,\n0.0\n,\nsin\n(\nlanding_latitude\n*\n0.5\n*\npi\n/\n180.0\n),\ncos\n(\nlanding_latitude\n*\n0.5\n*\npi\n/\n180.0\n)\n);\nauto\nlanding_reference_frame\n=\nkrpc\n::\nservices\n::\nSpaceCenter\n::\nReferenceFrame\n::\ncreate_relative\n(\nconn\n,\nkrpc\n::\nservices\n::\nSpaceCenter\n::\nReferenceFrame\n::\ncreate_relative\n(\nconn\n,\nkrpc\n::\nservices\n::\nSpaceCenter\n::\nReferenceFrame\n::\ncreate_relative\n(\nconn\n,\nbody\n.\nreference_frame\n(),\nlanding_position\n,\nq_long\n),\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n0\n),\nq_lat\n),\nstd\n::\nmake_tuple\n(\nlanding_altitude\n,\n0\n,\n0\n));\n// Draw axes\ndrawing\n.\nadd_line\n(\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n0\n),\nstd\n::\nmake_tuple\n(\n1\n,\n0\n,\n0\n),\nlanding_reference_frame\n);\ndrawing\n.\nadd_line\n(\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n0\n),\nstd\n::\nmake_tuple\n(\n0\n,\n1\n,\n0\n),\nlanding_reference_frame\n);\ndrawing\n.\nadd_line\n(\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n0\n),\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n1\n),\nlanding_reference_frame\n);\nwhile\n(\ntrue\n)\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n}\n#include\n<unistd.h>\n#include\n<math.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\n#include\n<krpc_cnano/services/ui.h>\n#include\n<krpc_cnano/services/drawing.h>\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\ntypedef\nkrpc_tuple_double_double_double_double_t\nquaternion\n;\nstatic\ndouble\npi\n=\n3.1415926535897\n;\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"Landing site\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Orbit_t\norbit\n;\nkrpc_SpaceCenter_Vessel_Orbit\n(\nconn\n,\n&\norbit\n,\nvessel\n);\nkrpc_SpaceCenter_CelestialBody_t\nbody\n;\nkrpc_SpaceCenter_Orbit_Body\n(\nconn\n,\n&\nbody\n,\norbit\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nbody_ref\n;\nkrpc_SpaceCenter_CelestialBody_ReferenceFrame\n(\nconn\n,\n&\nbody_ref\n,\nbody\n);\n// Define the landing site as the top of the VAB\ndouble\nlanding_latitude\n=\n-\n(\n0.0\n+\n(\n5.0\n/\n60.0\n)\n+\n(\n48.38\n/\n60.0\n/\n60.0\n));\ndouble\nlanding_longitude\n=\n-\n(\n74.0\n+\n(\n37.0\n/\n60.0\n)\n+\n(\n12.2\n/\n60.0\n/\n60.0\n));\ndouble\nlanding_altitude\n=\n111\n;\n// Determine landing site reference frame\n// (orientation: x=zenith, y=north, z=east)\nvector3\nlanding_position\n;\nkrpc_SpaceCenter_CelestialBody_SurfacePosition\n(\nconn\n,\n&\nlanding_position\n,\nbody\n,\nlanding_latitude\n,\nlanding_longitude\n,\nbody_ref\n);\nquaternion\nq_long\n=\n{\n0.0\n,\nsin\n(\n-\nlanding_longitude\n*\n0.5\n*\npi\n/\n180.0\n),\n0.0\n,\ncos\n(\n-\nlanding_longitude\n*\n0.5\n*\npi\n/\n180.0\n)\n};\nquaternion\nq_lat\n=\n{\n0.0\n,\n0.0\n,\nsin\n(\nlanding_latitude\n*\n0.5\n*\npi\n/\n180.0\n),\ncos\n(\nlanding_latitude\n*\n0.5\n*\npi\n/\n180.0\n)\n};\nkrpc_SpaceCenter_ReferenceFrame_t\nlanding_reference_frame\n;\n{\nvector3\nzero\n=\n{\n0\n,\n0\n,\n0\n};\nquaternion\nq_zero\n=\n{\n0\n,\n0\n,\n0\n,\n1\n};\nkrpc_SpaceCenter_ReferenceFrame_t\nparent_ref\n;\nkrpc_SpaceCenter_ReferenceFrame_CreateRelative\n(\nconn\n,\n&\nparent_ref\n,\nbody_ref\n,\n&\nlanding_position\n,\n&\nq_long\n,\n&\nzero\n,\n&\nzero\n);\nkrpc_SpaceCenter_ReferenceFrame_CreateRelative\n(\nconn\n,\n&\nparent_ref\n,\nparent_ref\n,\n&\nzero\n,\n&\nq_lat\n,\n&\nzero\n,\n&\nzero\n);\nvector3\nposition\n=\n{\nlanding_altitude\n,\n0\n,\n0\n};\nkrpc_SpaceCenter_ReferenceFrame_CreateRelative\n(\nconn\n,\n&\nlanding_reference_frame\n,\nparent_ref\n,\n&\nposition\n,\n&\nq_zero\n,\n&\nzero\n,\n&\nzero\n);\n}\n// Draw axes\nvector3\nzero\n=\n{\n0\n,\n0\n,\n0\n};\nvector3\nx_axis\n=\n{\n1\n,\n0\n,\n0\n};\nvector3\ny_axis\n=\n{\n0\n,\n1\n,\n0\n};\nvector3\nz_axis\n=\n{\n0\n,\n0\n,\n1\n};\nkrpc_Drawing_AddLine\n(\nconn\n,\nNULL\n,\n&\nzero\n,\n&\nx_axis\n,\nlanding_reference_frame\n,\ntrue\n);\nkrpc_Drawing_AddLine\n(\nconn\n,\nNULL\n,\n&\nzero\n,\n&\ny_axis\n,\nlanding_reference_frame\n,\ntrue\n);\nkrpc_Drawing_AddLine\n(\nconn\n,\nNULL\n,\n&\nzero\n,\n&\nz_axis\n,\nlanding_reference_frame\n,\ntrue\n);\nwhile\n(\ntrue\n)\nsleep\n(\n1\n);\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.Drawing\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\norg.javatuples.Triplet\n;\nimport\norg.javatuples.Quartet\n;\nimport\njava.io.IOException\n;\nimport\njava.lang.Math\n;\npublic\nclass\nLandingSite\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n,\nInterruptedException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Landing Site\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nDrawing\ndrawing\n=\nDrawing\n.\nnewInstance\n(\nconnection\n);\nSpaceCenter\n.\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nSpaceCenter\n.\nCelestialBody\nbody\n=\nvessel\n.\ngetOrbit\n().\ngetBody\n();\n// Define the landing site as the top of the VAB\ndouble\nlandingLatitude\n=\n-\n(\n0.0\n+\n(\n5.0\n/\n60.0\n)\n+\n(\n48.38\n/\n60.0\n/\n60.0\n));\ndouble\nlandingLongitude\n=\n-\n(\n74.0\n+\n(\n37.0\n/\n60.0\n)\n+\n(\n12.2\n/\n60.0\n/\n60.0\n));\ndouble\nlandingAltitude\n=\n111\n;\n// Determine landing site reference frame\n// (orientation: x=zenith, y=north, z=east)\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nlandingPosition\n=\nbody\n.\nsurfacePosition\n(\nlandingLatitude\n,\nlandingLongitude\n,\nbody\n.\ngetReferenceFrame\n());\nQuartet\n<\nDouble\n,\nDouble\n,\nDouble\n,\nDouble\n>\nqLong\n=\nnew\nQuartet\n<\nDouble\n,\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\nMath\n.\nsin\n(\n-\nlandingLongitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n),\n0.0\n,\nMath\n.\ncos\n(\n-\nlandingLongitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n));\nQuartet\n<\nDouble\n,\nDouble\n,\nDouble\n,\nDouble\n>\nqLat\n=\nnew\nQuartet\n<\nDouble\n,\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n0.0\n,\nMath\n.\nsin\n(\nlandingLatitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n),\nMath\n.\ncos\n(\nlandingLatitude\n*\n0.5\n*\nMath\n.\nPI\n/\n180.0\n));\nQuartet\n<\nDouble\n,\nDouble\n,\nDouble\n,\nDouble\n>\nqIdentity\n=\nnew\nQuartet\n<\nDouble\n,\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n0.0\n,\n0.0\n,\n1.0\n);\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nzero\n=\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n0.0\n,\n0.0\n);\nSpaceCenter\n.\nReferenceFrame\nlandingReferenceFrame\n=\nSpaceCenter\n.\nReferenceFrame\n.\ncreateRelative\n(\nconnection\n,\nSpaceCenter\n.\nReferenceFrame\n.\ncreateRelative\n(\nconnection\n,\nSpaceCenter\n.\nReferenceFrame\n.\ncreateRelative\n(\nconnection\n,\nbody\n.\ngetReferenceFrame\n(),\nlandingPosition\n,\nqLong\n,\nzero\n,\nzero\n),\nzero\n,\nqLat\n,\nzero\n,\nzero\n),\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\nlandingAltitude\n,\n0.0\n,\n0.0\n),\nqIdentity\n,\nzero\n,\nzero\n);\n// Draw axes\ndrawing\n.\naddLine\n(\nzero\n,\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n1.0\n,\n0.0\n,\n0.0\n),\nlandingReferenceFrame\n,\ntrue\n);\ndrawing\n.\naddLine\n(\nzero\n,\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n1.0\n,\n0.0\n),\nlandingReferenceFrame\n,\ntrue\n);\ndrawing\n.\naddLine\n(\nzero\n,\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n0.0\n,\n1.0\n),\nlandingReferenceFrame\n,\ntrue\n);\nwhile\n(\ntrue\n)\nThread\n.\nsleep\n(\n1000\n);\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nplatform\n=\nrequire\n'krpc.platform'\nlocal\nList\n=\nrequire\n'pl.List'\nlocal\nmath\n=\nrequire\n'math'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Landing Site'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nbody\n=\nvessel\n.\norbit\n.\nbody\nlocal\nReferenceFrame\n=\nconn\n.\nspace_center\n.\nReferenceFrame\n-- Define the landing site as the top of the VAB\nlocal\nlanding_latitude\n=\n-\n(\n0\n+\n(\n5.0\n/\n60\n)\n+\n(\n48.38\n/\n60\n/\n60\n))\nlocal\nlanding_longitude\n=\n-\n(\n74\n+\n(\n37.0\n/\n60\n)\n+\n(\n12.2\n/\n60\n/\n60\n))\nlocal\nlanding_altitude\n=\n111\n-- Determine landing site reference frame\n-- (orientation: x=zenith, y=north, z=east)\nlocal\nlanding_position\n=\nbody\n:\nsurface_position\n(\nlanding_latitude\n,\nlanding_longitude\n,\nbody\n.\nreference_frame\n)\nlocal\nq_long\n=\nList\n{\n0\n,\nmath.sin\n(\n-\nlanding_longitude\n*\n0.5\n*\nmath.pi\n/\n180\n),\n0\n,\nmath.cos\n(\n-\nlanding_longitude\n*\n0.5\n*\nmath.pi\n/\n180\n)\n}\nlocal\nq_lat\n=\nList\n{\n0\n,\n0\n,\nmath.sin\n(\nlanding_latitude\n*\n0.5\n*\nmath.pi\n/\n180\n),\nmath.cos\n(\nlanding_latitude\n*\n0.5\n*\nmath.pi\n/\n180\n)\n}\nlocal\nlanding_reference_frame\n=\nReferenceFrame\n.\ncreate_relative\n(\nReferenceFrame\n.\ncreate_relative\n(\nReferenceFrame\n.\ncreate_relative\n(\nbody\n.\nreference_frame\n,\nlanding_position\n,\nq_long\n),\nList\n{\n0\n,\n0\n,\n0\n},\nq_lat\n),\nList\n{\nlanding_altitude\n,\n0\n,\n0\n})\n-- Draw axes\nconn\n.\ndrawing\n.\nadd_line\n(\nList\n{\n0\n,\n0\n,\n0\n},\nList\n{\n1\n,\n0\n,\n0\n},\nlanding_reference_frame\n)\nconn\n.\ndrawing\n.\nadd_line\n(\nList\n{\n0\n,\n0\n,\n0\n},\nList\n{\n0\n,\n1\n,\n0\n},\nlanding_reference_frame\n)\nconn\n.\ndrawing\n.\nadd_line\n(\nList\n{\n0\n,\n0\n,\n0\n},\nList\n{\n0\n,\n0\n,\n1\n},\nlanding_reference_frame\n)\nwhile\ntrue\ndo\nplatform\n.\nsleep\n(\n1\n)\nend\nimport\ntime\nfrom\nmath\nimport\nsin\n,\ncos\n,\npi\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Landing Site'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nbody\n=\nvessel\n.\norbit\n.\nbody\ncreate_relative\n=\nconn\n.\nspace_center\n.\nReferenceFrame\n.\ncreate_relative\n# Define the landing site as the top of the VAB\nlanding_latitude\n=\n-\n(\n0\n+\n(\n5.0\n/\n60\n)\n+\n(\n48.38\n/\n60\n/\n60\n))\nlanding_longitude\n=\n-\n(\n74\n+\n(\n37.0\n/\n60\n)\n+\n(\n12.2\n/\n60\n/\n60\n))\nlanding_altitude\n=\n111\n# Determine landing site reference frame\n# (orientation: x=zenith, y=north, z=east)\nlanding_position\n=\nbody\n.\nsurface_position\n(\nlanding_latitude\n,\nlanding_longitude\n,\nbody\n.\nreference_frame\n)\nq_long\n=\n(\n0\n,\nsin\n(\n-\nlanding_longitude\n*\n0.5\n*\npi\n/\n180\n),\n0\n,\ncos\n(\n-\nlanding_longitude\n*\n0.5\n*\npi\n/\n180\n)\n)\nq_lat\n=\n(\n0\n,\n0\n,\nsin\n(\nlanding_latitude\n*\n0.5\n*\npi\n/\n180\n),\ncos\n(\nlanding_latitude\n*\n0.5\n*\npi\n/\n180\n)\n)\nlanding_reference_frame\n=\n\\\ncreate_relative\n(\ncreate_relative\n(\ncreate_relative\n(\nbody\n.\nreference_frame\n,\nlanding_position\n,\nq_long\n),\n(\n0\n,\n0\n,\n0\n),\nq_lat\n),\n(\nlanding_altitude\n,\n0\n,\n0\n))\n# Draw axes\nconn\n.\ndrawing\n.\nadd_line\n((\n0\n,\n0\n,\n0\n),\n(\n1\n,\n0\n,\n0\n),\nlanding_reference_frame\n)\nconn\n.\ndrawing\n.\nadd_line\n((\n0\n,\n0\n,\n0\n),\n(\n0\n,\n1\n,\n0\n),\nlanding_reference_frame\n)\nconn\n.\ndrawing\n.\nadd_line\n((\n0\n,\n0\n,\n0\n),\n(\n0\n,\n0\n,\n1\n),\nlanding_reference_frame\n)\nwhile\nTrue\n:\ntime\n.\nsleep\n(\n1\n)"}
{"url": "https://krpc.github.io/krpc/tutorials/launch-into-orbit.html", "title": "Launch into Orbit¶", "headings": [], "anchors": ["launch-into-orbit", "tab-0-QyM=", "tab-0-Qysr", "tab-0-SmF2YQ==", "tab-0-THVh", "tab-0-UHl0aG9u", "panel-0-QyM=", "panel-0-Qysr", "panel-0-SmF2YQ==", "panel-0-THVh", "panel-0-UHl0aG9u", "tab-1-QyM=", "tab-1-Qysr", "tab-1-SmF2YQ==", "tab-1-THVh", "tab-1-UHl0aG9u", "panel-1-QyM=", "panel-1-Qysr", "panel-1-SmF2YQ==", "panel-1-THVh", "panel-1-UHl0aG9u", "tab-2-QyM=", "tab-2-Qysr", "tab-2-SmF2YQ==", "tab-2-THVh", "tab-2-UHl0aG9u", "panel-2-QyM=", "panel-2-Qysr", "panel-2-SmF2YQ==", "panel-2-THVh", "panel-2-UHl0aG9u", "tab-3-QyM=", "tab-3-Qysr", "tab-3-SmF2YQ==", "tab-3-THVh", "tab-3-UHl0aG9u", "panel-3-QyM=", "panel-3-Qysr", "panel-3-SmF2YQ==", "panel-3-THVh", "panel-3-UHl0aG9u", "tab-4-QyM=", "tab-4-Qysr", "tab-4-SmF2YQ==", "tab-4-THVh", "tab-4-UHl0aG9u", "panel-4-QyM=", "panel-4-Qysr", "panel-4-SmF2YQ==", "panel-4-THVh", "panel-4-UHl0aG9u", "tab-5-QyM=", "tab-5-Qysr", "tab-5-SmF2YQ==", "tab-5-THVh", "tab-5-UHl0aG9u", "panel-5-QyM=", "panel-5-Qysr", "panel-5-SmF2YQ==", "panel-5-THVh", "panel-5-UHl0aG9u"], "content_text": "Launch into Orbit\n¶\nThis tutorial launches a two-stage rocket into a 150km circular orbit. The\nprogram assumes you are using\nthis\ncraft\nfile\n.\nThe program is available in a variety of languages:\nC#\n,\nC++\n,\nJava\n,\nLua\n,\nPython\nThe following code connects to the server, gets the active vessel, sets up a\nbunch of streams to get flight telemetry then prepares the rocket for launch.\nC#\nC++\nJava\nLua\nPython\n1\nusing\nSystem\n;\n2\nusing\nSystem.Collections.Generic\n;\n3\nusing\nSystem.Net\n;\n4\nusing\nKRPC.Client\n;\n5\nusing\nKRPC.Client.Services.SpaceCenter\n;\n6\n7\nclass\nLaunchIntoOrbit\n8\n{\n9\npublic\nstatic\nvoid\nMain\n()\n10\n{\n11\nvar\nconn\n=\nnew\nConnection\n(\n\"Launch into orbit\"\n);\n12\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\n13\n14\nfloat\nturnStartAltitude\n=\n250\n;\n15\nfloat\nturnEndAltitude\n=\n45000\n;\n16\nfloat\ntargetAltitude\n=\n150000\n;\n17\n18\n// Set up streams for telemetry\n19\nvar\nut\n=\nconn\n.\nAddStream\n(()\n=>\nconn\n.\nSpaceCenter\n().\nUT\n);\n20\nvar\nflight\n=\nvessel\n.\nFlight\n();\n21\nvar\naltitude\n=\nconn\n.\nAddStream\n(()\n=>\nflight\n.\nMeanAltitude\n);\n22\nvar\napoapsis\n=\nconn\n.\nAddStream\n(()\n=>\nvessel\n.\nOrbit\n.\nApoapsisAltitude\n);\n23\nvar\nstage2Resources\n=\n24\nvessel\n.\nResourcesInDecoupleStage\n(\nstage\n:\n2\n,\ncumulative\n:\nfalse\n);\n25\nvar\nsrbFuel\n=\nconn\n.\nAddStream\n(()\n=>\nstage2Resources\n.\nAmount\n(\n\"SolidFuel\"\n));\n26\n27\n// Pre-launch setup\n28\nvessel\n.\nControl\n.\nSAS\n=\nfalse\n;\n29\nvessel\n.\nControl\n.\nRCS\n=\nfalse\n;\n30\nvessel\n.\nControl\n.\nThrottle\n=\n1\n;\n31\n32\n// Countdown...\n33\nConsole\n.\nWriteLine\n(\n\"3...\"\n);\n34\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n35\nConsole\n.\nWriteLine\n(\n\"2...\"\n);\n36\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n37\nConsole\n.\nWriteLine\n(\n\"1...\"\n);\n38\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n39\nConsole\n.\nWriteLine\n(\n\"Launch!\"\n);\n1\n#include\n<iostream>\n2\n#include\n<chrono>\n3\n#include\n<cmath>\n4\n#include\n<thread>\n5\n#include\n<krpc.hpp>\n6\n#include\n<krpc/services/space_center.hpp>\n7\n8\nint\nmain\n()\n{\n9\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Launch into orbit\"\n);\n10\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\n11\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\n12\n13\nfloat\nturn_start_altitude\n=\n250\n;\n14\nfloat\nturn_end_altitude\n=\n45000\n;\n15\nfloat\ntarget_altitude\n=\n150000\n;\n16\n17\n// Set up streams for telemetry\n18\nauto\nut\n=\nspace_center\n.\nut_stream\n();\n19\nauto\naltitude\n=\nvessel\n.\nflight\n().\nmean_altitude_stream\n();\n20\nauto\napoapsis\n=\nvessel\n.\norbit\n().\napoapsis_altitude_stream\n();\n21\nauto\nstage_2_resources\n=\nvessel\n.\nresources_in_decouple_stage\n(\n2\n,\nfalse\n);\n22\nauto\nsrb_fuel\n=\nstage_2_resources\n.\namount_stream\n(\n\"SolidFuel\"\n);\n23\n24\n// Pre-launch setup\n25\nvessel\n.\ncontrol\n().\nset_sas\n(\nfalse\n);\n26\nvessel\n.\ncontrol\n().\nset_rcs\n(\nfalse\n);\n27\nvessel\n.\ncontrol\n().\nset_throttle\n(\n1\n);\n28\n29\n// Countdown...\n30\nstd\n::\ncout\n<<\n\"3...\"\n<<\nstd\n::\nendl\n;\n31\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n32\nstd\n::\ncout\n<<\n\"2...\"\n<<\nstd\n::\nendl\n;\n33\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n34\nstd\n::\ncout\n<<\n\"1...\"\n<<\nstd\n::\nendl\n;\n35\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n1\nimport\nkrpc.client.Connection\n;\n2\nimport\nkrpc.client.RPCException\n;\n3\nimport\nkrpc.client.Stream\n;\n4\nimport\nkrpc.client.StreamException\n;\n5\nimport\nkrpc.client.services.SpaceCenter\n;\n6\nimport\nkrpc.client.services.SpaceCenter.Flight\n;\n7\nimport\nkrpc.client.services.SpaceCenter.Node\n;\n8\nimport\nkrpc.client.services.SpaceCenter.ReferenceFrame\n;\n9\nimport\nkrpc.client.services.SpaceCenter.Resources\n;\n10\n11\nimport\norg.javatuples.Triplet\n;\n12\n13\nimport\njava.io.IOException\n;\n14\nimport\njava.lang.Math\n;\n15\n16\npublic\nclass\nLaunchIntoOrbit\n{\n17\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\n18\nthrows\nIOException\n,\nRPCException\n,\nInterruptedException\n,\nStreamException\n{\n19\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"Launch into orbit\"\n);\n20\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\n21\nSpaceCenter\n.\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\n22\n23\nfloat\nturnStartAltitude\n=\n250\n;\n24\nfloat\nturnEndAltitude\n=\n45000\n;\n25\nfloat\ntargetAltitude\n=\n150000\n;\n26\n27\n// Set up streams for telemetry\n28\nspaceCenter\n.\ngetUT\n();\n29\nStream\n<\nDouble\n>\nut\n=\nconnection\n.\naddStream\n(\nSpaceCenter\n.\nclass\n,\n\"getUT\"\n);\n30\nReferenceFrame\nrefFrame\n=\nvessel\n.\ngetSurfaceReferenceFrame\n();\n31\nFlight\nflight\n=\nvessel\n.\nflight\n(\nrefFrame\n);\n32\nStream\n<\nDouble\n>\naltitude\n=\nconnection\n.\naddStream\n(\nflight\n,\n\"getMeanAltitude\"\n);\n33\nStream\n<\nDouble\n>\napoapsis\n=\n34\nconnection\n.\naddStream\n(\nvessel\n.\ngetOrbit\n(),\n\"getApoapsisAltitude\"\n);\n35\nResources\nstage2Resources\n=\nvessel\n.\nresourcesInDecoupleStage\n(\n2\n,\nfalse\n);\n36\nStream\n<\nFloat\n>\nsrbFuel\n=\n37\nconnection\n.\naddStream\n(\nstage2Resources\n,\n\"amount\"\n,\n\"SolidFuel\"\n);\n38\n39\n// Pre-launch setup\n40\nvessel\n.\ngetControl\n().\nsetSAS\n(\nfalse\n);\n41\nvessel\n.\ngetControl\n().\nsetRCS\n(\nfalse\n);\n42\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n1\n);\n43\n44\n// Countdown...\n45\nSystem\n.\nout\n.\nprintln\n(\n\"3...\"\n);\n46\nThread\n.\nsleep\n(\n1000\n);\n47\nSystem\n.\nout\n.\nprintln\n(\n\"2...\"\n);\n48\nThread\n.\nsleep\n(\n1000\n);\n49\nSystem\n.\nout\n.\nprintln\n(\n\"1...\"\n);\n50\nThread\n.\nsleep\n(\n1000\n);\n1\nlocal\nkrpc\n=\nrequire\n'krpc'\n2\nlocal\nplatform\n=\nrequire\n'krpc.platform'\n3\nlocal\nmath\n=\nrequire\n'math'\n4\nlocal\nList\n=\nrequire\n'pl.List'\n5\n6\nlocal\nturn_start_altitude\n=\n250\n7\nlocal\nturn_end_altitude\n=\n45000\n8\nlocal\ntarget_altitude\n=\n150000\n9\n10\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Launch into orbit'\n)\n11\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\n12\n13\nflight\n=\nvessel\n:\nflight\n()\n14\nstage_2_resources\n=\nvessel\n:\nresources_in_decouple_stage\n(\n2\n,\nFalse\n)\n15\n16\n-- Pre-launch setup\n17\nvessel\n.\ncontrol\n.\nsas\n=\nfalse\n18\nvessel\n.\ncontrol\n.\nrcs\n=\nfalse\n19\nvessel\n.\ncontrol\n.\nthrottle\n=\n1\n20\n21\n-- Countdown...\n22\nprint\n(\n'3...'\n)\n23\nplatform\n.\nsleep\n(\n1\n)\n24\nprint\n(\n'2...'\n)\n25\nplatform\n.\nsleep\n(\n1\n)\n26\nprint\n(\n'1...'\n)\n27\nplatform\n.\nsleep\n(\n1\n)\n28\nprint\n(\n'Launch!'\n)\n1\nimport\nmath\n2\nimport\ntime\n3\nimport\nkrpc\n4\n5\nturn_start_altitude\n=\n250\n6\nturn_end_altitude\n=\n45000\n7\ntarget_altitude\n=\n150000\n8\n9\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Launch into orbit'\n)\n10\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\n11\n12\n# Set up streams for telemetry\n13\nut\n=\nconn\n.\nadd_stream\n(\ngetattr\n,\nconn\n.\nspace_center\n,\n'ut'\n)\n14\naltitude\n=\nconn\n.\nadd_stream\n(\ngetattr\n,\nvessel\n.\nflight\n(),\n'mean_altitude'\n)\n15\napoapsis\n=\nconn\n.\nadd_stream\n(\ngetattr\n,\nvessel\n.\norbit\n,\n'apoapsis_altitude'\n)\n16\nstage_2_resources\n=\nvessel\n.\nresources_in_decouple_stage\n(\nstage\n=\n2\n,\ncumulative\n=\nFalse\n)\n17\nsrb_fuel\n=\nconn\n.\nadd_stream\n(\nstage_2_resources\n.\namount\n,\n'SolidFuel'\n)\n18\n19\n# Pre-launch setup\n20\nvessel\n.\ncontrol\n.\nsas\n=\nFalse\n21\nvessel\n.\ncontrol\n.\nrcs\n=\nFalse\n22\nvessel\n.\ncontrol\n.\nthrottle\n=\n1.0\n23\n24\n# Countdown...\n25\nprint\n(\n'3...'\n)\n26\ntime\n.\nsleep\n(\n1\n)\n27\nprint\n(\n'2...'\n)\n28\ntime\n.\nsleep\n(\n1\n)\n29\nprint\n(\n'1...'\n)\n30\ntime\n.\nsleep\n(\n1\n)\n31\nprint\n(\n'Launch!'\n)\nThe next part of the program launches the rocket. The main loop continuously\nupdates the auto-pilot heading to gradually pitch the rocket towards the\nhorizon. It also monitors the amount of solid fuel remaining in the boosters,\nseparating them when they run dry. The loop exits when the rockets apoapsis is\nclose to the target apoapsis.\nC#\nC++\nJava\nLua\nPython\n41\n// Activate the first stage\n42\nvessel\n.\nControl\n.\nActivateNextStage\n();\n43\nvessel\n.\nAutoPilot\n.\nEngage\n();\n44\nvessel\n.\nAutoPilot\n.\nTargetPitchAndHeading\n(\n90\n,\n90\n);\n45\n46\n// Main ascent loop\n47\nbool\nsrbsSeparated\n=\nfalse\n;\n48\ndouble\nturnAngle\n=\n0\n;\n49\nwhile\n(\ntrue\n)\n{\n50\n51\n// Gravity turn\n52\nif\n(\naltitude\n.\nGet\n()\n>\nturnStartAltitude\n&&\n53\naltitude\n.\nGet\n()\n<\nturnEndAltitude\n)\n{\n54\ndouble\nfrac\n=\n(\naltitude\n.\nGet\n()\n-\nturnStartAltitude\n)\n55\n/\n(\nturnEndAltitude\n-\nturnStartAltitude\n);\n56\ndouble\nnewTurnAngle\n=\nfrac\n*\n90.0\n;\n57\nif\n(\nMath\n.\nAbs\n(\nnewTurnAngle\n-\nturnAngle\n)\n>\n0.5\n)\n{\n58\nturnAngle\n=\nnewTurnAngle\n;\n59\nvessel\n.\nAutoPilot\n.\nTargetPitchAndHeading\n(\n60\n(\nfloat\n)(\n90\n-\nturnAngle\n),\n90\n);\n61\n}\n62\n}\n63\n64\n// Separate SRBs when finished\n65\nif\n(\n!\nsrbsSeparated\n)\n{\n66\nif\n(\nsrbFuel\n.\nGet\n()\n<\n0.1\n)\n{\n67\nvessel\n.\nControl\n.\nActivateNextStage\n();\n68\nsrbsSeparated\n=\ntrue\n;\n69\nConsole\n.\nWriteLine\n(\n\"SRBs separated\"\n);\n70\n}\n71\n}\n72\n73\n// Decrease throttle when approaching target apoapsis\n74\nif\n(\napoapsis\n.\nGet\n()\n>\ntargetAltitude\n*\n0.9\n)\n{\n75\nConsole\n.\nWriteLine\n(\n\"Approaching target apoapsis\"\n);\n76\nbreak\n;\n77\n}\n78\n}\n37\n// Activate the first stage\n38\nvessel\n.\ncontrol\n().\nactivate_next_stage\n();\n39\nvessel\n.\nauto_pilot\n().\nengage\n();\n40\nvessel\n.\nauto_pilot\n().\ntarget_pitch_and_heading\n(\n90\n,\n90\n);\n41\n42\n// Main ascent loop\n43\nbool\nsrbs_separated\n=\nfalse\n;\n44\ndouble\nturn_angle\n=\n0\n;\n45\nwhile\n(\ntrue\n)\n{\n46\n// Gravity turn\n47\nif\n(\naltitude\n()\n>\nturn_start_altitude\n&&\naltitude\n()\n<\nturn_end_altitude\n)\n{\n48\ndouble\nfrac\n=\n(\naltitude\n()\n-\nturn_start_altitude\n)\n49\n/\n(\nturn_end_altitude\n-\nturn_start_altitude\n);\n50\ndouble\nnew_turn_angle\n=\nfrac\n*\n90.0\n;\n51\nif\n(\nstd\n::\nabs\n(\nnew_turn_angle\n-\nturn_angle\n)\n>\n0.5\n)\n{\n52\nturn_angle\n=\nnew_turn_angle\n;\n53\nvessel\n.\nauto_pilot\n().\ntarget_pitch_and_heading\n(\n90.0\n-\nturn_angle\n,\n90.0\n);\n54\n}\n55\n}\n56\n57\n// Separate SRBs when finished\n58\nif\n(\n!\nsrbs_separated\n)\n{\n59\nif\n(\nsrb_fuel\n()\n<\n0.1\n)\n{\n60\nvessel\n.\ncontrol\n().\nactivate_next_stage\n();\n61\nsrbs_separated\n=\ntrue\n;\n62\nstd\n::\ncout\n<<\n\"SRBs separated\"\n<<\nstd\n::\nendl\n;\n63\n}\n64\n}\n65\n66\n// Decrease throttle when approaching target apoapsis\n67\nif\n(\napoapsis\n()\n>\ntarget_altitude\n*\n0.9\n)\n{\n68\nstd\n::\ncout\n<<\n\"Approaching target apoapsis\"\n<<\nstd\n::\nendl\n;\n69\nbreak\n;\n70\n}\n52\n// Activate the first stage\n53\nvessel\n.\ngetControl\n().\nactivateNextStage\n();\n54\nvessel\n.\ngetAutoPilot\n().\nengage\n();\n55\nvessel\n.\ngetAutoPilot\n().\ntargetPitchAndHeading\n(\n90\n,\n90\n);\n56\n57\n// Main ascent loop\n58\nboolean\nsrbsSeparated\n=\nfalse\n;\n59\ndouble\nturnAngle\n=\n0\n;\n60\nwhile\n(\ntrue\n)\n{\n61\n62\n// Gravity turn\n63\nif\n(\naltitude\n.\nget\n()\n>\nturnStartAltitude\n&&\n64\naltitude\n.\nget\n()\n<\nturnEndAltitude\n)\n{\n65\ndouble\nfrac\n=\n(\naltitude\n.\nget\n()\n-\nturnStartAltitude\n)\n66\n/\n(\nturnEndAltitude\n-\nturnStartAltitude\n);\n67\ndouble\nnewTurnAngle\n=\nfrac\n*\n90.0\n;\n68\nif\n(\nMath\n.\nabs\n(\nnewTurnAngle\n-\nturnAngle\n)\n>\n0.5\n)\n{\n69\nturnAngle\n=\nnewTurnAngle\n;\n70\nvessel\n.\ngetAutoPilot\n().\ntargetPitchAndHeading\n(\n71\n(\nfloat\n)(\n90\n-\nturnAngle\n),\n90\n);\n72\n}\n73\n}\n74\n75\n// Separate SRBs when finished\n76\nif\n(\n!\nsrbsSeparated\n)\n{\n77\nif\n(\nsrbFuel\n.\nget\n()\n<\n0.1\n)\n{\n78\nvessel\n.\ngetControl\n().\nactivateNextStage\n();\n79\nsrbsSeparated\n=\ntrue\n;\n80\nSystem\n.\nout\n.\nprintln\n(\n\"SRBs separated\"\n);\n81\n}\n82\n}\n83\n84\n// Decrease throttle when approaching target apoapsis\n85\nif\n(\napoapsis\n.\nget\n()\n>\ntargetAltitude\n*\n0.9\n)\n{\n86\nSystem\n.\nout\n.\nprintln\n(\n\"Approaching target apoapsis\"\n);\n87\nbreak\n;\n88\n}\n30\n-- Activate the first stage\n31\nvessel\n.\ncontrol\n:\nactivate_next_stage\n()\n32\nvessel\n.\nauto_pilot\n:\nengage\n()\n33\nvessel\n.\nauto_pilot\n:\ntarget_pitch_and_heading\n(\n90\n,\n90\n)\n34\n35\n-- Main ascent loop\n36\nlocal\nsrbs_separated\n=\nfalse\n37\nlocal\nturn_angle\n=\n0\n38\nwhile\ntrue\ndo\n39\n40\n-- Gravity turn\n41\nif\nflight\n.\nmean_altitude\n>\nturn_start_altitude\nand\nflight\n.\nmean_altitude\n<\nturn_end_altitude\nthen\n42\nfrac\n=\n(\nflight\n.\nmean_altitude\n-\nturn_start_altitude\n)\n/\n(\nturn_end_altitude\n-\nturn_start_altitude\n)\n43\nnew_turn_angle\n=\nfrac\n*\n90\n44\nif\nmath.abs\n(\nnew_turn_angle\n-\nturn_angle\n)\n>\n0.5\nthen\n45\nturn_angle\n=\nnew_turn_angle\n46\nvessel\n.\nauto_pilot\n:\ntarget_pitch_and_heading\n(\n90\n-\nturn_angle\n,\n90\n)\n47\nend\n48\nend\n49\n50\n-- Separate SRBs when finished\n51\nif\nnot\nsrbs_separated\nthen\n52\nif\nstage_2_resources\n:\namount\n(\n'SolidFuel'\n)\n<\n0.1\nthen\n53\nvessel\n.\ncontrol\n:\nactivate_next_stage\n()\n54\nsrbs_separated\n=\ntrue\n55\nprint\n(\n'SRBs separated'\n)\n56\nend\n57\nend\n58\n59\n-- Decrease throttle when approaching target apoapsis\n60\nif\nvessel\n.\norbit\n.\napoapsis_altitude\n>\ntarget_altitude\n*\n0.9\nthen\n61\nprint\n(\n'Approaching target apoapsis'\n)\n62\nbreak\n63\nend\n64\nend\n33\n# Activate the first stage\n34\nvessel\n.\ncontrol\n.\nactivate_next_stage\n()\n35\nvessel\n.\nauto_pilot\n.\nengage\n()\n36\nvessel\n.\nauto_pilot\n.\ntarget_pitch_and_heading\n(\n90\n,\n90\n)\n37\n38\n# Main ascent loop\n39\nsrbs_separated\n=\nFalse\n40\nturn_angle\n=\n0\n41\nwhile\nTrue\n:\n42\n43\n# Gravity turn\n44\nif\naltitude\n()\n>\nturn_start_altitude\nand\naltitude\n()\n<\nturn_end_altitude\n:\n45\nfrac\n=\n((\naltitude\n()\n-\nturn_start_altitude\n)\n/\n46\n(\nturn_end_altitude\n-\nturn_start_altitude\n))\n47\nnew_turn_angle\n=\nfrac\n*\n90\n48\nif\nabs\n(\nnew_turn_angle\n-\nturn_angle\n)\n>\n0.5\n:\n49\nturn_angle\n=\nnew_turn_angle\n50\nvessel\n.\nauto_pilot\n.\ntarget_pitch_and_heading\n(\n90\n-\nturn_angle\n,\n90\n)\n51\n52\n# Separate SRBs when finished\n53\nif\nnot\nsrbs_separated\n:\n54\nif\nsrb_fuel\n()\n<\n0.1\n:\n55\nvessel\n.\ncontrol\n.\nactivate_next_stage\n()\n56\nsrbs_separated\n=\nTrue\n57\nprint\n(\n'SRBs separated'\n)\n58\n59\n# Decrease throttle when approaching target apoapsis\n60\nif\napoapsis\n()\n>\ntarget_altitude\n*\n0.9\n:\n61\nprint\n(\n'Approaching target apoapsis'\n)\n62\nbreak\nNext, the program fine tunes the apoapsis, using 10% thrust, then waits until\nthe rocket has left Kerbin’s atmosphere.\nC#\nC++\nJava\nLua\nPython\n80\n// Disable engines when target apoapsis is reached\n81\nvessel\n.\nControl\n.\nThrottle\n=\n0.25f\n;\n82\nwhile\n(\napoapsis\n.\nGet\n()\n<\ntargetAltitude\n)\n{\n83\n}\n84\nConsole\n.\nWriteLine\n(\n\"Target apoapsis reached\"\n);\n85\nvessel\n.\nControl\n.\nThrottle\n=\n0\n;\n86\n87\n// Wait until out of atmosphere\n88\nConsole\n.\nWriteLine\n(\n\"Coasting out of atmosphere\"\n);\n89\nwhile\n(\naltitude\n.\nGet\n()\n<\n70500\n)\n{\n90\n}\n73\n// Disable engines when target apoapsis is reached\n74\nvessel\n.\ncontrol\n().\nset_throttle\n(\n0.25\n);\n75\nwhile\n(\napoapsis\n()\n<\ntarget_altitude\n)\n{\n76\n}\n77\nstd\n::\ncout\n<<\n\"Target apoapsis reached\"\n<<\nstd\n::\nendl\n;\n78\nvessel\n.\ncontrol\n().\nset_throttle\n(\n0\n);\n79\n80\n// Wait until out of atmosphere\n81\nstd\n::\ncout\n<<\n\"Coasting out of atmosphere\"\n<<\nstd\n::\nendl\n;\n82\nwhile\n(\naltitude\n()\n<\n70500\n)\n{\n91\n// Disable engines when target apoapsis is reached\n92\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n0.25f\n);\n93\nwhile\n(\napoapsis\n.\nget\n()\n<\ntargetAltitude\n)\n{\n94\n}\n95\nSystem\n.\nout\n.\nprintln\n(\n\"Target apoapsis reached\"\n);\n96\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n0\n);\n97\n98\n// Wait until out of atmosphere\n99\nSystem\n.\nout\n.\nprintln\n(\n\"Coasting out of atmosphere\"\n);\n100\nwhile\n(\naltitude\n.\nget\n()\n<\n70500\n)\n{\n66\n-- Disable engines when target apoapsis is reached\n67\nvessel\n.\ncontrol\n.\nthrottle\n=\n0.25\n68\nwhile\nvessel\n.\norbit\n.\napoapsis_altitude\n<\ntarget_altitude\ndo\n69\nend\n70\nprint\n(\n'Target apoapsis reached'\n)\n71\nvessel\n.\ncontrol\n.\nthrottle\n=\n0\n72\n73\n-- Wait until out of atmosphere\n74\nprint\n(\n'Coasting out of atmosphere'\n)\n75\nwhile\nflight\n.\nmean_altitude\n<\n70500\ndo\n76\nend\n64\n# Disable engines when target apoapsis is reached\n65\nvessel\n.\ncontrol\n.\nthrottle\n=\n0.25\n66\nwhile\napoapsis\n()\n<\ntarget_altitude\n:\n67\npass\n68\nprint\n(\n'Target apoapsis reached'\n)\n69\nvessel\n.\ncontrol\n.\nthrottle\n=\n0.0\n70\n71\n# Wait until out of atmosphere\n72\nprint\n(\n'Coasting out of atmosphere'\n)\n73\nwhile\naltitude\n()\n<\n70500\n:\n74\npass\nIt is now time to plan the circularization burn. First, we calculate the delta-v\nrequired to circularize the orbit using the\nvis-viva equation\n. We then calculate the burn\ntime needed to achieve this delta-v, using the\nTsiolkovsky rocket equation\n.\nC#\nC++\nJava\nLua\nPython\n92\n// Plan circularization burn (using vis-viva equation)\n93\nConsole\n.\nWriteLine\n(\n\"Planning circularization burn\"\n);\n94\ndouble\nmu\n=\nvessel\n.\nOrbit\n.\nBody\n.\nGravitationalParameter\n;\n95\ndouble\nr\n=\nvessel\n.\nOrbit\n.\nApoapsis\n;\n96\ndouble\na1\n=\nvessel\n.\nOrbit\n.\nSemiMajorAxis\n;\n97\ndouble\na2\n=\nr\n;\n98\ndouble\nv1\n=\nMath\n.\nSqrt\n(\nmu\n*\n((\n2.0\n/\nr\n)\n-\n(\n1.0\n/\na1\n)));\n99\ndouble\nv2\n=\nMath\n.\nSqrt\n(\nmu\n*\n((\n2.0\n/\nr\n)\n-\n(\n1.0\n/\na2\n)));\n100\ndouble\ndeltaV\n=\nv2\n-\nv1\n;\n101\nvar\nnode\n=\nvessel\n.\nControl\n.\nAddNode\n(\n102\nut\n.\nGet\n()\n+\nvessel\n.\nOrbit\n.\nTimeToApoapsis\n,\nprograde\n:\n(\nfloat\n)\ndeltaV\n);\n103\n104\n// Calculate burn time (using rocket equation)\n105\ndouble\nF\n=\nvessel\n.\nAvailableThrust\n;\n106\ndouble\nIsp\n=\nvessel\n.\nSpecificImpulse\n*\n9.82\n;\n107\ndouble\nm0\n=\nvessel\n.\nMass\n;\n108\ndouble\nm1\n=\nm0\n/\nMath\n.\nExp\n(\ndeltaV\n/\nIsp\n);\n109\ndouble\nflowRate\n=\nF\n/\nIsp\n;\n110\ndouble\nburnTime\n=\n(\nm0\n-\nm1\n)\n/\nflowRate\n;\n85\n// Plan circularization burn (using vis-viva equation)\n86\nstd\n::\ncout\n<<\n\"Planning circularization burn\"\n<<\nstd\n::\nendl\n;\n87\ndouble\nmu\n=\nvessel\n.\norbit\n().\nbody\n().\ngravitational_parameter\n();\n88\ndouble\nr\n=\nvessel\n.\norbit\n().\napoapsis\n();\n89\ndouble\na1\n=\nvessel\n.\norbit\n().\nsemi_major_axis\n();\n90\ndouble\na2\n=\nr\n;\n91\ndouble\nv1\n=\nstd\n::\nsqrt\n(\nmu\n*\n((\n2.0\n/\nr\n)\n-\n(\n1.0\n/\na1\n)));\n92\ndouble\nv2\n=\nstd\n::\nsqrt\n(\nmu\n*\n((\n2.0\n/\nr\n)\n-\n(\n1.0\n/\na2\n)));\n93\ndouble\ndelta_v\n=\nv2\n-\nv1\n;\n94\nauto\nnode\n=\nvessel\n.\ncontrol\n().\nadd_node\n(\n95\nut\n()\n+\nvessel\n.\norbit\n().\ntime_to_apoapsis\n(),\ndelta_v\n);\n96\n97\n// Calculate burn time (using rocket equation)\n98\ndouble\nF\n=\nvessel\n.\navailable_thrust\n();\n99\ndouble\nIsp\n=\nvessel\n.\nspecific_impulse\n()\n*\n9.82\n;\n100\ndouble\nm0\n=\nvessel\n.\nmass\n();\n101\ndouble\nm1\n=\nm0\n/\nstd\n::\nexp\n(\ndelta_v\n/\nIsp\n);\n102\ndouble\nflow_rate\n=\nF\n/\nIsp\n;\n103\n// Plan circularization burn (using vis-viva equation)\n104\nSystem\n.\nout\n.\nprintln\n(\n\"Planning circularization burn\"\n);\n105\ndouble\nmu\n=\nvessel\n.\ngetOrbit\n().\ngetBody\n().\ngetGravitationalParameter\n();\n106\ndouble\nr\n=\nvessel\n.\ngetOrbit\n().\ngetApoapsis\n();\n107\ndouble\na1\n=\nvessel\n.\ngetOrbit\n().\ngetSemiMajorAxis\n();\n108\ndouble\na2\n=\nr\n;\n109\ndouble\nv1\n=\nMath\n.\nsqrt\n(\nmu\n*\n((\n2.0\n/\nr\n)\n-\n(\n1.0\n/\na1\n)));\n110\ndouble\nv2\n=\nMath\n.\nsqrt\n(\nmu\n*\n((\n2.0\n/\nr\n)\n-\n(\n1.0\n/\na2\n)));\n111\ndouble\ndeltaV\n=\nv2\n-\nv1\n;\n112\nNode\nnode\n=\nvessel\n.\ngetControl\n().\naddNode\n(\n113\nut\n.\nget\n()\n+\nvessel\n.\ngetOrbit\n().\ngetTimeToApoapsis\n(),\n(\nfloat\n)\ndeltaV\n,\n0\n,\n0\n);\n114\n115\n// Calculate burn time (using rocket equation)\n116\ndouble\nforce\n=\nvessel\n.\ngetAvailableThrust\n();\n117\ndouble\nisp\n=\nvessel\n.\ngetSpecificImpulse\n()\n*\n9.82\n;\n118\ndouble\nm0\n=\nvessel\n.\ngetMass\n();\n119\ndouble\nm1\n=\nm0\n/\nMath\n.\nexp\n(\ndeltaV\n/\nisp\n);\n120\ndouble\nflowRate\n=\nforce\n/\nisp\n;\n78\n---- Plan circularization burn (using vis-viva equation)\n79\nprint\n(\n'Planning circularization burn'\n)\n80\nlocal\nmu\n=\nvessel\n.\norbit\n.\nbody\n.\ngravitational_parameter\n81\nlocal\nr\n=\nvessel\n.\norbit\n.\napoapsis\n82\nlocal\na1\n=\nvessel\n.\norbit\n.\nsemi_major_axis\n83\nlocal\na2\n=\nr\n84\nlocal\nv1\n=\nmath.sqrt\n(\nmu\n*\n((\n2.\n/\nr\n)\n-\n(\n1.\n/\na1\n)))\n85\nlocal\nv2\n=\nmath.sqrt\n(\nmu\n*\n((\n2.\n/\nr\n)\n-\n(\n1.\n/\na2\n)))\n86\nlocal\ndelta_v\n=\nv2\n-\nv1\n87\nlocal\nnode\n=\nvessel\n.\ncontrol\n:\nadd_node\n(\nconn\n.\nspace_center\n.\nut\n+\nvessel\n.\norbit\n.\ntime_to_apoapsis\n,\ndelta_v\n,\n0\n,\n0\n)\n88\n89\n---- Calculate burn time (using rocket equation)\n90\nlocal\nF\n=\nvessel\n.\navailable_thrust\n91\nlocal\nIsp\n=\nvessel\n.\nspecific_impulse\n*\n9.82\n92\nlocal\nm0\n=\nvessel\n.\nmass\n93\nlocal\nm1\n=\nm0\n/\nmath.exp\n(\ndelta_v\n/\nIsp\n)\n94\nlocal\nflow_rate\n=\nF\n/\nIsp\n95\nlocal\nburn_time\n=\n(\nm0\n-\nm1\n)\n/\nflow_rate\n76\n# Plan circularization burn (using vis-viva equation)\n77\nprint\n(\n'Planning circularization burn'\n)\n78\nmu\n=\nvessel\n.\norbit\n.\nbody\n.\ngravitational_parameter\n79\nr\n=\nvessel\n.\norbit\n.\napoapsis\n80\na1\n=\nvessel\n.\norbit\n.\nsemi_major_axis\n81\na2\n=\nr\n82\nv1\n=\nmath\n.\nsqrt\n(\nmu\n*\n((\n2.\n/\nr\n)\n-\n(\n1.\n/\na1\n)))\n83\nv2\n=\nmath\n.\nsqrt\n(\nmu\n*\n((\n2.\n/\nr\n)\n-\n(\n1.\n/\na2\n)))\n84\ndelta_v\n=\nv2\n-\nv1\n85\nnode\n=\nvessel\n.\ncontrol\n.\nadd_node\n(\n86\nut\n()\n+\nvessel\n.\norbit\n.\ntime_to_apoapsis\n,\nprograde\n=\ndelta_v\n)\n87\n88\n# Calculate burn time (using rocket equation)\n89\nF\n=\nvessel\n.\navailable_thrust\n90\nIsp\n=\nvessel\n.\nspecific_impulse\n*\n9.82\n91\nm0\n=\nvessel\n.\nmass\n92\nm1\n=\nm0\n/\nmath\n.\nexp\n(\ndelta_v\n/\nIsp\n)\n93\nflow_rate\n=\nF\n/\nIsp\n94\nburn_time\n=\n(\nm0\n-\nm1\n)\n/\nflow_rate\nNext, we need to rotate the craft and wait until the circularization burn. We\norientate the ship along the y-axis of the maneuver node’s reference frame\n(i.e. in the direction of the burn) then time warp to 5 seconds before the burn.\nC#\nC++\nJava\nLua\nPython\n112\n// Orientate ship\n113\nConsole\n.\nWriteLine\n(\n\"Orientating ship for circularization burn\"\n);\n114\nvessel\n.\nAutoPilot\n.\nReferenceFrame\n=\nnode\n.\nReferenceFrame\n;\n115\nvessel\n.\nAutoPilot\n.\nTargetDirection\n=\nTuple\n.\nCreate\n(\n0.0\n,\n1.0\n,\n0.0\n);\n116\nvessel\n.\nAutoPilot\n.\nWait\n();\n117\n118\n// Wait until burn\n119\nConsole\n.\nWriteLine\n(\n\"Waiting until circularization burn\"\n);\n120\ndouble\nburnUT\n=\nut\n.\nGet\n()\n+\nvessel\n.\nOrbit\n.\nTimeToApoapsis\n-\n(\nburnTime\n/\n2.0\n);\n121\ndouble\nleadTime\n=\n5\n;\n122\nconn\n.\nSpaceCenter\n().\nWarpTo\n(\nburnUT\n-\nleadTime\n);\n105\n// Orientate ship\n106\nstd\n::\ncout\n<<\n\"Orientating ship for circularization burn\"\n<<\nstd\n::\nendl\n;\n107\nvessel\n.\nauto_pilot\n().\nset_reference_frame\n(\nnode\n.\nreference_frame\n());\n108\nvessel\n.\nauto_pilot\n().\nset_target_direction\n(\nstd\n::\nmake_tuple\n(\n0.0\n,\n1.0\n,\n0.0\n));\n109\nvessel\n.\nauto_pilot\n().\nwait\n();\n110\n111\n// Wait until burn\n112\nstd\n::\ncout\n<<\n\"Waiting until circularization burn\"\n<<\nstd\n::\nendl\n;\n113\ndouble\nburn_ut\n=\nut\n()\n+\nvessel\n.\norbit\n().\ntime_to_apoapsis\n()\n-\n(\nburn_time\n/\n2.0\n);\n114\ndouble\nlead_time\n=\n5\n;\n123\n// Orientate ship\n124\nSystem\n.\nout\n.\nprintln\n(\n\"Orientating ship for circularization burn\"\n);\n125\nvessel\n.\ngetAutoPilot\n().\nsetReferenceFrame\n(\nnode\n.\ngetReferenceFrame\n());\n126\nvessel\n.\ngetAutoPilot\n().\nsetTargetDirection\n(\n127\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n1.0\n,\n0.0\n));\n128\nvessel\n.\ngetAutoPilot\n().\nwait_\n();\n129\n130\n// Wait until burn\n131\nSystem\n.\nout\n.\nprintln\n(\n\"Waiting until circularization burn\"\n);\n132\ndouble\nburnUt\n=\n133\nut\n.\nget\n()\n+\nvessel\n.\ngetOrbit\n().\ngetTimeToApoapsis\n()\n-\n(\nburnTime\n/\n2.0\n);\n134\ndouble\nleadTime\n=\n5\n;\n97\n-- Orientate ship\n98\nprint\n(\n'Orientating ship for circularization burn'\n)\n99\nvessel\n.\nauto_pilot\n.\nreference_frame\n=\nnode\n.\nreference_frame\n100\nvessel\n.\nauto_pilot\n.\ntarget_direction\n=\nList\n{\n0\n,\n1\n,\n0\n}\n101\nvessel\n.\nauto_pilot\n:\nwait\n()\n102\n103\n-- Wait until burn\n104\nprint\n(\n'Waiting until circularization burn'\n)\n105\nlocal\nburn_ut\n=\nconn\n.\nspace_center\n.\nut\n+\nvessel\n.\norbit\n.\ntime_to_apoapsis\n-\n(\nburn_time\n/\n2.\n)\n106\nlocal\nlead_time\n=\n5\n107\nconn\n.\nspace_center\n.\nwarp_to\n(\nburn_ut\n-\nlead_time\n)\n96\n# Orientate ship\n97\nprint\n(\n'Orientating ship for circularization burn'\n)\n98\nvessel\n.\nauto_pilot\n.\nreference_frame\n=\nnode\n.\nreference_frame\n99\nvessel\n.\nauto_pilot\n.\ntarget_direction\n=\n(\n0\n,\n1\n,\n0\n)\n100\nvessel\n.\nauto_pilot\n.\nwait\n()\n101\n102\n# Wait until burn\n103\nprint\n(\n'Waiting until circularization burn'\n)\n104\nburn_ut\n=\nut\n()\n+\nvessel\n.\norbit\n.\ntime_to_apoapsis\n-\n(\nburn_time\n/\n2.\n)\n105\nlead_time\n=\n5\n106\nconn\n.\nspace_center\n.\nwarp_to\n(\nburn_ut\n-\nlead_time\n)\nThis next part executes the burn. It sets maximum throttle, then throttles down\nto 5% approximately a tenth of a second before the predicted end of the burn. It then\nmonitors the remaining delta-v until it flips around to point retrograde (at\nwhich point the node has been executed).\nC#\nC++\nJava\nLua\nPython\n124\n// Execute burn\n125\nConsole\n.\nWriteLine\n(\n\"Ready to execute burn\"\n);\n126\nvar\ntimeToApoapsis\n=\nconn\n.\nAddStream\n(()\n=>\nvessel\n.\nOrbit\n.\nTimeToApoapsis\n);\n127\nwhile\n(\ntimeToApoapsis\n.\nGet\n()\n-\n(\nburnTime\n/\n2.0\n)\n>\n0\n)\n{\n128\n}\n129\nConsole\n.\nWriteLine\n(\n\"Executing burn\"\n);\n130\nvessel\n.\nControl\n.\nThrottle\n=\n1\n;\n131\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n((\nint\n)((\nburnTime\n-\n0.1\n)\n*\n1000\n));\n132\nConsole\n.\nWriteLine\n(\n\"Fine tuning\"\n);\n133\nvessel\n.\nControl\n.\nThrottle\n=\n0.05f\n;\n134\nvar\nremainingBurn\n=\nconn\n.\nAddStream\n(\n135\n()\n=>\nnode\n.\nRemainingBurnVector\n(\nnode\n.\nReferenceFrame\n));\n136\nwhile\n(\nremainingBurn\n.\nGet\n().\nItem1\n>\n0\n)\n{\n137\n}\n138\nvessel\n.\nControl\n.\nThrottle\n=\n0\n;\n139\nnode\n.\nRemove\n();\n140\n141\nConsole\n.\nWriteLine\n(\n\"Launch complete\"\n);\n142\nconn\n.\nDispose\n();\n143\n}\n144\n}\n115\n// Execute burn\n116\nstd\n::\ncout\n<<\n\"Ready to execute burn\"\n<<\nstd\n::\nendl\n;\n117\nauto\ntime_to_apoapsis\n=\nvessel\n.\norbit\n().\ntime_to_apoapsis_stream\n();\n118\nwhile\n(\ntime_to_apoapsis\n()\n-\n(\nburn_time\n/\n2.0\n)\n>\n0\n)\n{\n119\n}\n120\nstd\n::\ncout\n<<\n\"Executing burn\"\n<<\nstd\n::\nendl\n;\n121\nvessel\n.\ncontrol\n().\nset_throttle\n(\n1\n);\n122\nstd\n::\nthis_thread\n::\nsleep_for\n(\n123\nstd\n::\nchrono\n::\nmilliseconds\n(\nstatic_cast\n<\nint\n>\n((\nburn_time\n-\n0.1\n)\n*\n1000\n)));\n124\nstd\n::\ncout\n<<\n\"Fine tuning\"\n<<\nstd\n::\nendl\n;\n125\nvessel\n.\ncontrol\n().\nset_throttle\n(\n0.05\n);\n126\nauto\nremaining_burn\n=\nnode\n.\nremaining_burn_vector_stream\n(\nnode\n.\nreference_frame\n());\n127\nwhile\n(\nstd\n::\nget\n<\n0\n>\n(\nremaining_burn\n())\n>\n0\n)\n{\n128\n}\n129\nvessel\n.\ncontrol\n().\nset_throttle\n(\n0\n);\n130\nnode\n.\nremove\n();\n131\n132\nstd\n::\ncout\n<<\n\"Launch complete\"\n<<\nstd\n::\nendl\n;\n133\n}\n137\n// Execute burn\n138\nSystem\n.\nout\n.\nprintln\n(\n\"Ready to execute burn\"\n);\n139\nStream\n<\nDouble\n>\ntimeToApoapsis\n=\n140\nconnection\n.\naddStream\n(\nvessel\n.\ngetOrbit\n(),\n\"getTimeToApoapsis\"\n);\n141\nwhile\n(\ntimeToApoapsis\n.\nget\n()\n-\n(\nburnTime\n/\n2.0\n)\n>\n0\n)\n{\n142\n}\n143\nSystem\n.\nout\n.\nprintln\n(\n\"Executing burn\"\n);\n144\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n1\n);\n145\nThread\n.\nsleep\n((\nint\n)((\nburnTime\n-\n0.1\n)\n*\n1000\n));\n146\nSystem\n.\nout\n.\nprintln\n(\n\"Fine tuning\"\n);\n147\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n0.05f\n);\n148\nStream\n<\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>>\nremainingBurn\n=\n149\nconnection\n.\naddStream\n(\n150\nnode\n,\n\"remainingBurnVector\"\n,\nnode\n.\ngetReferenceFrame\n());\n151\nwhile\n(\nremainingBurn\n.\nget\n().\ngetValue1\n()\n>\n0\n)\n{\n152\n}\n153\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n0\n);\n154\nnode\n.\nremove\n();\n155\n156\nSystem\n.\nout\n.\nprintln\n(\n\"Launch complete\"\n);\n157\nconnection\n.\nclose\n();\n158\n}\n159\n}\n109\n-- Execute burn\n110\nprint\n(\n'Ready to execute burn'\n)\n111\nwhile\nvessel\n.\norbit\n.\ntime_to_apoapsis\n-\n(\nburn_time\n/\n2.\n)\n>\n0\ndo\n112\nend\n113\nprint\n(\n'Executing burn'\n)\n114\nvessel\n.\ncontrol\n.\nthrottle\n=\n1\n115\nplatform\n.\nsleep\n(\nburn_time\n-\n0.1\n)\n116\nprint\n(\n'Fine tuning'\n)\n117\nvessel\n.\ncontrol\n.\nthrottle\n=\n0.05\n118\nwhile\nnode\n:\nremaining_burn_vector\n(\nnode\n.\nreference_frame\n)[\n2\n]\n>\n0\ndo\n119\nend\n120\nvessel\n.\ncontrol\n.\nthrottle\n=\n0\n121\nnode\n:\nremove\n()\n122\n123\nprint\n(\n'Launch complete'\n)\n108\n# Execute burn\n109\nprint\n(\n'Ready to execute burn'\n)\n110\ntime_to_apoapsis\n=\nconn\n.\nadd_stream\n(\ngetattr\n,\nvessel\n.\norbit\n,\n'time_to_apoapsis'\n)\n111\nwhile\ntime_to_apoapsis\n()\n-\n(\nburn_time\n/\n2.\n)\n>\n0\n:\n112\npass\n113\nprint\n(\n'Executing burn'\n)\n114\nvessel\n.\ncontrol\n.\nthrottle\n=\n1.0\n115\ntime\n.\nsleep\n(\nburn_time\n-\n0.1\n)\n116\nprint\n(\n'Fine tuning'\n)\n117\nvessel\n.\ncontrol\n.\nthrottle\n=\n0.05\n118\nremaining_burn\n=\nconn\n.\nadd_stream\n(\nnode\n.\nremaining_burn_vector\n,\nnode\n.\nreference_frame\n)\n119\nwhile\nremaining_burn\n()[\n1\n]\n>\n0\n:\n120\npass\n121\nvessel\n.\ncontrol\n.\nthrottle\n=\n0.0\n122\nnode\n.\nremove\n()\n123\n124\nprint\n(\n'Launch complete'\n)\nThe rocket should now be in a circular 150km orbit above Kerbin."}
{"url": "https://krpc.github.io/krpc/tutorials/pitch-heading-roll.html", "title": "Pitch, Heading and Roll¶", "headings": [], "anchors": ["pitch-heading-and-roll", "tab-0-0-0", "tab-0-0-1", "tab-0-0-2", "tab-0-0-3", "tab-0-0-4", "tab-0-0-5", "panel-0-0-0", "panel-0-0-1", "panel-0-0-2", "panel-0-0-3", "panel-0-0-4", "panel-0-0-5"], "content_text": "Pitch, Heading and Roll\n¶\nThis example calculates the pitch, heading and rolls angles of the active vessel\nonce per second.\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nusing\nVector3\n=\nSystem\n.\nTuple\n<\ndouble\n,\ndouble\n,\ndouble\n>\n;\nclass\nAngleOfAttack\n{\nstatic\nVector3\nCrossProduct\n(\nVector3\nu\n,\nVector3\nv\n)\n{\nreturn\nnew\nVector3\n(\nu\n.\nItem2\n*\nv\n.\nItem3\n-\nu\n.\nItem3\n*\nv\n.\nItem2\n,\nu\n.\nItem3\n*\nv\n.\nItem1\n-\nu\n.\nItem1\n*\nv\n.\nItem3\n,\nu\n.\nItem1\n*\nv\n.\nItem2\n-\nu\n.\nItem2\n*\nv\n.\nItem1\n);\n}\nstatic\ndouble\nDotProduct\n(\nVector3\nu\n,\nVector3\nv\n)\n{\nreturn\nu\n.\nItem1\n*\nv\n.\nItem1\n+\nu\n.\nItem2\n*\nv\n.\nItem2\n+\nu\n.\nItem3\n*\nv\n.\nItem3\n;\n}\nstatic\ndouble\nMagnitude\n(\nVector3\nv\n)\n{\nreturn\nMath\n.\nSqrt\n(\nDotProduct\n(\nv\n,\nv\n));\n}\n// Compute the angle between vector x and y\nstatic\ndouble\nAngleBetweenVectors\n(\nVector3\nu\n,\nVector3\nv\n)\n{\ndouble\ndp\n=\nDotProduct\n(\nu\n,\nv\n);\nif\n(\ndp\n==\n0\n)\nreturn\n0\n;\ndouble\num\n=\nMagnitude\n(\nu\n);\ndouble\nvm\n=\nMagnitude\n(\nv\n);\nreturn\nMath\n.\nAcos\n(\ndp\n/\n(\num\n*\nvm\n))\n*\n(\n180f\n/\nMath\n.\nPI\n);\n}\npublic\nstatic\nvoid\nMain\n()\n{\nvar\nconn\n=\nnew\nConnection\n(\n\"Angle of attack\"\n);\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nwhile\n(\ntrue\n)\n{\nvar\nvesselDirection\n=\nvessel\n.\nDirection\n(\nvessel\n.\nSurfaceReferenceFrame\n);\n// Get the direction of the vessel in the horizon plane\nvar\nhorizonDirection\n=\nnew\nVector3\n(\n0\n,\nvesselDirection\n.\nItem2\n,\nvesselDirection\n.\nItem3\n);\n// Compute the pitch - the angle between the vessels direction and\n// the direction in the horizon plane\ndouble\npitch\n=\nAngleBetweenVectors\n(\nvesselDirection\n,\nhorizonDirection\n);\nif\n(\nvesselDirection\n.\nItem1\n<\n0\n)\npitch\n=\n-\npitch\n;\n// Compute the heading - the angle between north and\n// the direction in the horizon plane\nvar\nnorth\n=\nnew\nVector3\n(\n0\n,\n1\n,\n0\n);\ndouble\nheading\n=\nAngleBetweenVectors\n(\nnorth\n,\nhorizonDirection\n);\nif\n(\nhorizonDirection\n.\nItem3\n<\n0\n)\nheading\n=\n360\n-\nheading\n;\n// Compute the roll\n// Compute the plane running through the vessels direction\n// and the upwards direction\nvar\nup\n=\nnew\nVector3\n(\n1\n,\n0\n,\n0\n);\nvar\nplaneNormal\n=\nCrossProduct\n(\nvesselDirection\n,\nup\n);\n// Compute the upwards direction of the vessel\nvar\nvesselUp\n=\nconn\n.\nSpaceCenter\n().\nTransformDirection\n(\nnew\nVector3\n(\n0\n,\n0\n,\n-\n1\n),\nvessel\n.\nReferenceFrame\n,\nvessel\n.\nSurfaceReferenceFrame\n);\n// Compute the angle between the upwards direction of\n// the vessel and the plane normal\ndouble\nroll\n=\nAngleBetweenVectors\n(\nvesselUp\n,\nplaneNormal\n);\n// Adjust so that the angle is between -180 and 180 and\n// rolling right is +ve and left is -ve\nif\n(\nvesselUp\n.\nItem1\n>\n0\n)\nroll\n*=\n-\n1\n;\nelse\nif\n(\nroll\n<\n0\n)\nroll\n+=\n180\n;\nelse\nroll\n-=\n180\n;\nConsole\n.\nWriteLine\n(\n\"pitch = {0:F1}, heading = {1:F1}, roll = {2:F1}\"\n,\npitch\n,\nheading\n,\nroll\n);\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n}\n}\n}\n#include\n<iostream>\n#include\n<iomanip>\n#include\n<tuple>\n#include\n<thread>\n#include\n<chrono>\n#include\n<cmath>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nstatic\nconst\ndouble\npi\n=\n3.1415926535897\n;\ntypedef\nstd\n::\ntuple\n<\ndouble\n,\ndouble\n,\ndouble\n>\nvector3\n;\nvector3\ncross_product\n(\nconst\nvector3\n&\nu\n,\nconst\nvector3\n&\nv\n)\n{\nreturn\nstd\n::\nmake_tuple\n(\nstd\n::\nget\n<\n1\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n2\n>\n(\nv\n)\n-\nstd\n::\nget\n<\n2\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n1\n>\n(\nv\n),\nstd\n::\nget\n<\n2\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n0\n>\n(\nv\n)\n-\nstd\n::\nget\n<\n0\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n2\n>\n(\nv\n),\nstd\n::\nget\n<\n0\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n1\n>\n(\nv\n)\n-\nstd\n::\nget\n<\n1\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n0\n>\n(\nv\n));\n}\ndouble\ndot_product\n(\nconst\nvector3\n&\nu\n,\nconst\nvector3\n&\nv\n)\n{\nreturn\nstd\n::\nget\n<\n0\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n0\n>\n(\nv\n)\n+\nstd\n::\nget\n<\n1\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n1\n>\n(\nv\n)\n+\nstd\n::\nget\n<\n2\n>\n(\nu\n)\n*\nstd\n::\nget\n<\n2\n>\n(\nv\n);\n}\ndouble\nmagnitude\n(\nconst\nvector3\n&\nv\n)\n{\nreturn\nstd\n::\nsqrt\n(\ndot_product\n(\nv\n,\nv\n));\n}\n// Compute the angle between vector u and v\ndouble\nangle_between_vectors\n(\nconst\nvector3\n&\nu\n,\nconst\nvector3\n&\nv\n)\n{\ndouble\ndp\n=\ndot_product\n(\nu\n,\nv\n);\nif\n(\ndp\n==\n0\n)\nreturn\n0\n;\ndouble\num\n=\nmagnitude\n(\nu\n);\ndouble\nvm\n=\nmagnitude\n(\nv\n);\nreturn\nstd\n::\nacos\n(\ndp\n/\n(\num\n*\nvm\n))\n*\n(\n180.0\n/\npi\n);\n}\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"Pitch/Heading/Roll\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nwhile\n(\ntrue\n)\n{\nvector3\nvessel_direction\n=\nvessel\n.\ndirection\n(\nvessel\n.\nsurface_reference_frame\n());\n// Get the direction of the vessel in the horizon plane\nvector3\nhorizon_direction\n{\n0\n,\nstd\n::\nget\n<\n1\n>\n(\nvessel_direction\n),\nstd\n::\nget\n<\n2\n>\n(\nvessel_direction\n)\n};\n// Compute the pitch - the angle between the vessels direction\n// and the direction in the horizon plane\ndouble\npitch\n=\nangle_between_vectors\n(\nvessel_direction\n,\nhorizon_direction\n);\nif\n(\nstd\n::\nget\n<\n0\n>\n(\nvessel_direction\n)\n<\n0\n)\npitch\n=\n-\npitch\n;\n// Compute the heading - the angle between north\n// and the direction in the horizon plane\nvector3\nnorth\n{\n0\n,\n1\n,\n0\n};\ndouble\nheading\n=\nangle_between_vectors\n(\nnorth\n,\nhorizon_direction\n);\nif\n(\nstd\n::\nget\n<\n2\n>\n(\nhorizon_direction\n)\n<\n0\n)\nheading\n=\n360\n-\nheading\n;\n// Compute the roll\n// Compute the plane running through the vessels direction\n// and the upwards direction\nvector3\nup\n{\n1\n,\n0\n,\n0\n};\nvector3\nplane_normal\n=\ncross_product\n(\nvessel_direction\n,\nup\n);\n// Compute the upwards direction of the vessel\nvector3\nvessel_up\n=\nspace_center\n.\ntransform_direction\n(\nstd\n::\nmake_tuple\n(\n0\n,\n0\n,\n-1\n),\nvessel\n.\nreference_frame\n(),\nvessel\n.\nsurface_reference_frame\n());\n// Compute the angle between the upwards direction of\n// the vessel and the plane normal\ndouble\nroll\n=\nangle_between_vectors\n(\nvessel_up\n,\nplane_normal\n);\n// Adjust so that the angle is between -180 and 180 and\n// rolling right is +ve and left is -ve\nif\n(\nstd\n::\nget\n<\n0\n>\n(\nvessel_up\n)\n>\n0\n)\nroll\n*=\n-1\n;\nelse\nif\n(\nroll\n<\n0\n)\nroll\n+=\n180\n;\nelse\nroll\n-=\n180\n;\nstd\n::\ncout\n<<\nstd\n::\nfixed\n<<\nstd\n::\nsetprecision\n(\n1\n);\nstd\n::\ncout\n<<\n\"pitch = \"\n<<\npitch\n<<\n\", \"\n<<\n\"heading = \"\n<<\nheading\n<<\n\", \"\n<<\n\"roll = \"\n<<\nroll\n<<\nstd\n::\nendl\n;\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n}\n}\n#include\n<math.h>\n#include\n<unistd.h>\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\nstatic\ndouble\npi\n=\n3.1415926535897\n;\ntypedef\nkrpc_tuple_double_double_double_t\nvector3\n;\nvector3\ncross_product\n(\nvector3\nu\n,\nvector3\nv\n)\n{\nvector3\nresult\n=\n{\nu\n.\ne1\n*\nv\n.\ne2\n-\nu\n.\ne2\n*\nv\n.\ne1\n,\nu\n.\ne2\n*\nv\n.\ne0\n-\nu\n.\ne0\n*\nv\n.\ne2\n,\nu\n.\ne0\n*\nv\n.\ne1\n-\nu\n.\ne1\n*\nv\n.\ne0\n};\nreturn\nresult\n;\n}\ndouble\ndot_product\n(\nvector3\nu\n,\nvector3\nv\n)\n{\nreturn\nu\n.\ne0\n*\nv\n.\ne0\n+\nu\n.\ne1\n*\nv\n.\ne1\n+\nu\n.\ne2\n*\nv\n.\ne2\n;\n}\ndouble\nmagnitude\n(\nvector3\nv\n)\n{\nreturn\nsqrt\n(\ndot_product\n(\nv\n,\nv\n));\n}\n// Compute the angle between vector u and v\ndouble\nangle_between_vectors\n(\nvector3\nu\n,\nvector3\nv\n)\n{\ndouble\ndp\n=\ndot_product\n(\nu\n,\nv\n);\nif\n(\ndp\n==\n0\n)\nreturn\n0\n;\ndouble\num\n=\nmagnitude\n(\nu\n);\ndouble\nvm\n=\nmagnitude\n(\nv\n);\nreturn\nacos\n(\ndp\n/\n(\num\n*\nvm\n))\n*\n(\n180.0\n/\npi\n);\n}\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nsrf_ref\n;\nkrpc_SpaceCenter_Vessel_SurfaceReferenceFrame\n(\nconn\n,\n&\nsrf_ref\n,\nvessel\n);\nkrpc_SpaceCenter_ReferenceFrame_t\nvessel_ref\n;\nkrpc_SpaceCenter_Vessel_ReferenceFrame\n(\nconn\n,\n&\nvessel_ref\n,\nvessel\n);\nwhile\n(\ntrue\n)\n{\nvector3\nvessel_direction\n;\nkrpc_SpaceCenter_Vessel_Direction\n(\nconn\n,\n&\nvessel_direction\n,\nvessel\n,\nsrf_ref\n);\n// Get the direction of the vessel in the horizon plane\nvector3\nhorizon_direction\n=\n{\n0\n,\nvessel_direction\n.\ne1\n,\nvessel_direction\n.\ne2\n};\n// Compute the pitch - the angle between the vessels direction\n// and the direction in the horizon plane\ndouble\npitch\n=\nangle_between_vectors\n(\nvessel_direction\n,\nhorizon_direction\n);\nif\n(\nvessel_direction\n.\ne0\n<\n0\n)\npitch\n=\n-\npitch\n;\n// Compute the heading - the angle between north\n// and the direction in the horizon plane\nvector3\nnorth\n=\n{\n0\n,\n1\n,\n0\n};\ndouble\nheading\n=\nangle_between_vectors\n(\nnorth\n,\nhorizon_direction\n);\nif\n(\nhorizon_direction\n.\ne2\n<\n0\n)\nheading\n=\n360\n-\nheading\n;\n// Compute the roll\n// Compute the plane running through the vessels direction\n// and the upwards direction\nvector3\nup\n=\n{\n1\n,\n0\n,\n0\n};\nvector3\nplane_normal\n=\ncross_product\n(\nvessel_direction\n,\nup\n);\n// Compute the upwards direction of the vessel\nvector3\nvessel_up\n;\nvector3\ntmp\n=\n{\n0\n,\n0\n,\n-1\n};\nkrpc_SpaceCenter_TransformDirection\n(\nconn\n,\n&\nvessel_up\n,\n&\ntmp\n,\nvessel_ref\n,\nsrf_ref\n);\n// Compute the angle between the upwards direction of\n// the vessel and the plane normal\ndouble\nroll\n=\nangle_between_vectors\n(\nvessel_up\n,\nplane_normal\n);\n// Adjust so that the angle is between -180 and 180 and\n// rolling right is +ve and left is -ve\nif\n(\nvessel_up\n.\ne0\n>\n0\n)\nroll\n*=\n-1\n;\nelse\nif\n(\nroll\n<\n0\n)\nroll\n+=\n180\n;\nelse\nroll\n-=\n180\n;\nprintf\n(\n\"pitch = %.1f, heading = %.1f, roll = %.1f\n\\n\n\"\n,\npitch\n,\nheading\n,\nroll\n);\nsleep\n(\n1\n);\n}\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\nimport\njava.lang.Math\n;\npublic\nclass\nPitchHeadingRoll\n{\nstatic\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\ncrossProduct\n(\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nu\n,\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nv\n)\n{\nreturn\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\nu\n.\ngetValue1\n()\n*\nv\n.\ngetValue2\n()\n-\nu\n.\ngetValue2\n()\n*\nv\n.\ngetValue1\n(),\nu\n.\ngetValue2\n()\n*\nv\n.\ngetValue0\n()\n-\nu\n.\ngetValue0\n()\n*\nv\n.\ngetValue2\n(),\nu\n.\ngetValue0\n()\n*\nv\n.\ngetValue1\n()\n-\nu\n.\ngetValue1\n()\n*\nv\n.\ngetValue0\n()\n);\n}\nstatic\ndouble\ndotProduct\n(\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nu\n,\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nv\n)\n{\nreturn\nu\n.\ngetValue0\n()\n*\nv\n.\ngetValue0\n()\n+\nu\n.\ngetValue1\n()\n*\nv\n.\ngetValue1\n()\n+\nu\n.\ngetValue2\n()\n*\nv\n.\ngetValue2\n();\n}\nstatic\ndouble\nmagnitude\n(\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nv\n)\n{\nreturn\nMath\n.\nsqrt\n(\ndotProduct\n(\nv\n,\nv\n));\n}\n// Compute the angle between vector x and y\nstatic\ndouble\nangleBetweenVectors\n(\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nu\n,\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nv\n)\n{\ndouble\ndp\n=\ndotProduct\n(\nu\n,\nv\n);\nif\n(\ndp\n==\n0\n)\n{\nreturn\n0\n;\n}\ndouble\num\n=\nmagnitude\n(\nu\n);\ndouble\nvm\n=\nmagnitude\n(\nv\n);\nreturn\nMath\n.\nacos\n(\ndp\n/\n(\num\n*\nvm\n))\n*\n(\n180\nf\n/\nMath\n.\nPI\n);\n}\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n,\nInterruptedException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n();\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nSpaceCenter\n.\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nwhile\n(\ntrue\n)\n{\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nvesselDirection\n=\nvessel\n.\ndirection\n(\nvessel\n.\ngetSurfaceReferenceFrame\n());\n// Get the direction of the vessel in the horizon plane\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nhorizonDirection\n=\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\nvesselDirection\n.\ngetValue1\n(),\nvesselDirection\n.\ngetValue2\n());\n// Compute the pitch - the angle between the vessels direction\n// and the direction in the horizon plane\ndouble\npitch\n=\nangleBetweenVectors\n(\nvesselDirection\n,\nhorizonDirection\n);\nif\n(\nvesselDirection\n.\ngetValue0\n()\n<\n0\n)\n{\npitch\n=\n-\npitch\n;\n}\n// Compute the heading - the angle between north\n// and the direction in the horizon plane\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nnorth\n=\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n1.0\n,\n0.0\n);\ndouble\nheading\n=\nangleBetweenVectors\n(\nnorth\n,\nhorizonDirection\n);\nif\n(\nhorizonDirection\n.\ngetValue2\n()\n<\n0\n)\n{\nheading\n=\n360\n-\nheading\n;\n}\n// Compute the roll\n// Compute the plane running through the vessels direction\n// and the upwards direction\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nup\n=\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n1.0\n,\n0.0\n,\n0.0\n);\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nplaneNormal\n=\ncrossProduct\n(\nvesselDirection\n,\nup\n);\n// Compute the upwards direction of the vessel\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\nvesselUp\n=\nspaceCenter\n.\ntransformDirection\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n0.0\n,\n0.0\n,\n-\n1.0\n),\nvessel\n.\ngetReferenceFrame\n(),\nvessel\n.\ngetSurfaceReferenceFrame\n());\n// Compute the angle between the upwards direction\n// of the vessel and the plane normal\ndouble\nroll\n=\nangleBetweenVectors\n(\nvesselUp\n,\nplaneNormal\n);\n// Adjust so that the angle is between -180 and 180 and\n// rolling right is +ve and left is -ve\nif\n(\nvesselUp\n.\ngetValue0\n()\n>\n0\n)\n{\nroll\n*=\n-\n1\n;\n}\nelse\nif\n(\nroll\n<\n0\n)\n{\nroll\n+=\n180\n;\n}\nelse\n{\nroll\n-=\n180\n;\n}\nSystem\n.\nout\n.\nprintf\n(\n\"pitch = %.1f, heading = %.1f, roll = %.1f\\n\"\n,\npitch\n,\nheading\n,\nroll\n);\nThread\n.\nsleep\n(\n1000\n);\n}\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nplatform\n=\nrequire\n'krpc.platform'\nlocal\nmath\n=\nrequire\n'math'\nlocal\nList\n=\nrequire\n'pl.List'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Pitch/Heading/Roll'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nfunction\ncross_product\n(\nu\n,\nv\n)\nreturn\nList\n{\nu\n[\n3\n]\n*\nv\n[\n3\n]\n-\nu\n[\n3\n]\n*\nv\n[\n2\n],\nu\n[\n1\n]\n*\nv\n[\n1\n]\n-\nu\n[\n1\n]\n*\nv\n[\n3\n],\nu\n[\n2\n]\n*\nv\n[\n2\n]\n-\nu\n[\n2\n]\n*\nv\n[\n1\n]}\nend\nfunction\ndot_product\n(\nu\n,\nv\n)\nreturn\nu\n[\n1\n]\n*\nv\n[\n1\n]\n+\nu\n[\n2\n]\n*\nv\n[\n2\n]\n+\nu\n[\n3\n]\n*\nv\n[\n3\n]\nend\nfunction\nmagnitude\n(\nv\n)\nreturn\nmath.sqrt\n(\ndot_product\n(\nv\n,\nv\n))\nend\nfunction\nangle_between_vectors\n(\nu\n,\nv\n)\n-- Compute the angle between vector u and v\ndp\n=\ndot_product\n(\nu\n,\nv\n)\nif\ndp\n==\n0\nthen\nreturn\n0\nend\num\n=\nmagnitude\n(\nu\n)\nvm\n=\nmagnitude\n(\nv\n)\nreturn\nmath.acos\n(\ndp\n/\n(\num\n*\nvm\n))\n*\n(\n180.\n/\nmath.pi\n)\nend\nwhile\ntrue\ndo\nlocal\nvessel_direction\n=\nvessel\n:\ndirection\n(\nvessel\n.\nsurface_reference_frame\n)\n-- Get the direction of the vessel in the horizon plane\nlocal\nhorizon_direction\n=\nList\n{\n0\n,\nvessel_direction\n[\n2\n],\nvessel_direction\n[\n3\n]}\n-- Compute the pitch - the angle between the vessels direction and\n-- the direction in the horizon plane\nlocal\npitch\n=\nangle_between_vectors\n(\nvessel_direction\n,\nhorizon_direction\n)\nif\nvessel_direction\n[\n1\n]\n<\n0\nthen\npitch\n=\n-\npitch\nend\n-- Compute the heading - the angle between north and\n-- the direction in the horizon plane\nlocal\nnorth\n=\nList\n{\n0\n,\n1\n,\n0\n}\nlocal\nheading\n=\nangle_between_vectors\n(\nnorth\n,\nhorizon_direction\n)\nif\nhorizon_direction\n[\n3\n]\n<\n0\nthen\nheading\n=\n360\n-\nheading\nend\n-- Compute the roll\n-- Compute the plane running through the vessels direction\n-- and the upwards direction\nlocal\nup\n=\nList\n{\n1\n,\n0\n,\n0\n}\nlocal\nplane_normal\n=\ncross_product\n(\nvessel_direction\n,\nup\n)\n-- Compute the upwards direction of the vessel\nlocal\nvessel_up\n=\nconn\n.\nspace_center\n.\ntransform_direction\n(\nList\n{\n0\n,\n0\n,\n-\n1\n},\nvessel\n.\nreference_frame\n,\nvessel\n.\nsurface_reference_frame\n)\n-- Compute the angle between the upwards direction of\n-- the vessel and the plane normal\nlocal\nroll\n=\nangle_between_vectors\n(\nvessel_up\n,\nplane_normal\n)\n-- Adjust so that the angle is between -180 and 180 and\n-- rolling right is +ve and left is -ve\nif\nvessel_up\n[\n1\n]\n>\n0\nthen\nroll\n=\n-\nroll\nelseif\nroll\n<\n0\nthen\nroll\n=\nroll\n+\n180\nelse\nroll\n=\nroll\n-\n180\nend\nprint\n(\nstring.format\n(\n'pitch = %1.f, heading = %.1f, roll = %.1f'\n,\npitch\n,\nheading\n,\nroll\n))\nplatform\n.\nsleep\n(\n1\n)\nend\nimport\nmath\nimport\ntime\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Pitch/Heading/Roll'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\ndef\ncross_product\n(\nu\n,\nv\n):\nreturn\n(\nu\n[\n1\n]\n*\nv\n[\n2\n]\n-\nu\n[\n2\n]\n*\nv\n[\n1\n],\nu\n[\n2\n]\n*\nv\n[\n0\n]\n-\nu\n[\n0\n]\n*\nv\n[\n2\n],\nu\n[\n0\n]\n*\nv\n[\n1\n]\n-\nu\n[\n1\n]\n*\nv\n[\n0\n])\ndef\ndot_product\n(\nu\n,\nv\n):\nreturn\nu\n[\n0\n]\n*\nv\n[\n0\n]\n+\nu\n[\n1\n]\n*\nv\n[\n1\n]\n+\nu\n[\n2\n]\n*\nv\n[\n2\n]\ndef\nmagnitude\n(\nv\n):\nreturn\nmath\n.\nsqrt\n(\ndot_product\n(\nv\n,\nv\n))\ndef\nangle_between_vectors\n(\nu\n,\nv\n):\n\"\"\" Compute the angle between vector u and v \"\"\"\ndp\n=\ndot_product\n(\nu\n,\nv\n)\nif\ndp\n==\n0\n:\nreturn\n0\num\n=\nmagnitude\n(\nu\n)\nvm\n=\nmagnitude\n(\nv\n)\nreturn\nmath\n.\nacos\n(\ndp\n/\n(\num\n*\nvm\n))\n*\n(\n180.\n/\nmath\n.\npi\n)\nwhile\nTrue\n:\nvessel_direction\n=\nvessel\n.\ndirection\n(\nvessel\n.\nsurface_reference_frame\n)\n# Get the direction of the vessel in the horizon plane\nhorizon_direction\n=\n(\n0\n,\nvessel_direction\n[\n1\n],\nvessel_direction\n[\n2\n])\n# Compute the pitch - the angle between the vessels direction and\n# the direction in the horizon plane\npitch\n=\nangle_between_vectors\n(\nvessel_direction\n,\nhorizon_direction\n)\nif\nvessel_direction\n[\n0\n]\n<\n0\n:\npitch\n=\n-\npitch\n# Compute the heading - the angle between north and\n# the direction in the horizon plane\nnorth\n=\n(\n0\n,\n1\n,\n0\n)\nheading\n=\nangle_between_vectors\n(\nnorth\n,\nhorizon_direction\n)\nif\nhorizon_direction\n[\n2\n]\n<\n0\n:\nheading\n=\n360\n-\nheading\n# Compute the roll\n# Compute the plane running through the vessels direction\n# and the upwards direction\nup\n=\n(\n1\n,\n0\n,\n0\n)\nplane_normal\n=\ncross_product\n(\nvessel_direction\n,\nup\n)\n# Compute the upwards direction of the vessel\nvessel_up\n=\nconn\n.\nspace_center\n.\ntransform_direction\n(\n(\n0\n,\n0\n,\n-\n1\n),\nvessel\n.\nreference_frame\n,\nvessel\n.\nsurface_reference_frame\n)\n# Compute the angle between the upwards direction of\n# the vessel and the plane normal\nroll\n=\nangle_between_vectors\n(\nvessel_up\n,\nplane_normal\n)\n# Adjust so that the angle is between -180 and 180 and\n# rolling right is +ve and left is -ve\nif\nvessel_up\n[\n0\n]\n>\n0\n:\nroll\n*=\n-\n1\nelif\nroll\n<\n0\n:\nroll\n+=\n180\nelse\n:\nroll\n-=\n180\nprint\n(\n'pitch =\n% 5.1f\n, heading =\n% 5.1f\n, roll =\n% 5.1f\n'\n%\n(\npitch\n,\nheading\n,\nroll\n))\ntime\n.\nsleep\n(\n1\n)"}
{"url": "https://krpc.github.io/krpc/tutorials/parts.html", "title": "Interacting with Parts¶", "headings": ["Deploying all Parachutes¶", "‘Control From Here’ for Docking Ports¶", "Combined Specific Impulse¶"], "anchors": ["interacting-with-parts", "tab-0-0-0", "tab-0-0-1", "tab-0-0-2", "tab-0-0-3", "tab-0-0-4", "tab-0-0-5", "panel-0-0-0", "panel-0-0-1", "panel-0-0-2", "panel-0-0-3", "panel-0-0-4", "panel-0-0-5", "deploying-all-parachutes", "tab-1-1-0", "tab-1-1-1", "tab-1-1-2", "tab-1-1-3", "tab-1-1-4", "tab-1-1-5", "panel-1-1-0", "panel-1-1-1", "panel-1-1-2", "panel-1-1-3", "panel-1-1-4", "panel-1-1-5", "control-from-here-for-docking-ports", "tab-2-2-0", "tab-2-2-1", "tab-2-2-2", "tab-2-2-3", "tab-2-2-4", "tab-2-2-5", "panel-2-2-0", "panel-2-2-1", "panel-2-2-2", "panel-2-2-3", "panel-2-2-4", "panel-2-2-5", "combined-specific-impulse", "tab-3-3-0", "tab-3-3-1", "tab-3-3-2", "tab-3-3-3", "tab-3-3-4", "tab-3-3-5", "panel-3-3-0", "panel-3-3-1", "panel-3-3-2", "panel-3-3-3", "panel-3-3-4", "panel-3-3-5"], "content_text": "Interacting with Parts\n¶\nThe following examples demonstrate use of the\nParts\nfunctionality to\nachieve various tasks. More details on specific topics can also be found in the\nAPI documentation:\nC#\nC++\nC\nJava\nLua\nPython\nTrees of Parts\nAttachment Modes\nFuel Lines\nStaging\nTrees of Parts\nAttachment Modes\nFuel Lines\nStaging\nTrees of Parts\nAttachment Modes\nFuel Lines\nStaging\nTrees of Parts\nAttachment Modes\nFuel Lines\nStaging\nTrees of Parts\nAttachment Modes\nFuel Lines\nStaging\nTrees of Parts\nAttachment Modes\nFuel Lines\nStaging\nDeploying all Parachutes\n¶\nSometimes things go horribly wrong. The following script does its best to save\nyour Kerbals by deploying all the parachutes:\nC#\nC++\nC\nJava\nLua\nPython\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nDeployParachutes\n{\npublic\nstatic\nvoid\nMain\n()\n{\nusing\n(\nvar\nconnection\n=\nnew\nConnection\n())\n{\nvar\nvessel\n=\nconnection\n.\nSpaceCenter\n().\nActiveVessel\n;\nforeach\n(\nvar\nparachute\nin\nvessel\n.\nParts\n.\nParachutes\n)\nparachute\n.\nDeploy\n();\n}\n}\n}\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n();\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nfor\n(\nauto\nparachute\n:\nvessel\n.\nparts\n().\nparachutes\n())\nparachute\n.\ndeploy\n();\n}\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"DeployParachutes\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Parts_t\nparts\n;\nkrpc_SpaceCenter_Vessel_Parts\n(\nconn\n,\n&\nparts\n,\nvessel\n);\nkrpc_list_object_t\nparachutes\n;\nkrpc_SpaceCenter_Parts_Parachutes\n(\nconn\n,\n&\nparachutes\n,\nparts\n);\nfor\n(\nsize_t\ni\n=\n0\n;\ni\n<\nparachutes\n.\nsize\n;\ni\n++\n)\n{\nkrpc_SpaceCenter_Parachute_t\nparachute\n=\nparachutes\n.\nitems\n[\ni\n];\nkrpc_SpaceCenter_Parachute_Deploy\n(\nconn\n,\nparachute\n);\n}\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.Parachute\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\njava.io.IOException\n;\npublic\nclass\nDeployParachutes\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n();\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nfor\n(\nParachute\nparachute\n:\nvessel\n.\ngetParts\n().\ngetParachutes\n())\n{\nparachute\n.\ndeploy\n();\n}\nconnection\n.\nclose\n();\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'Example'\n)\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nfor\n_\n,\nparachute\nin\nipairs\n(\nvessel\n.\nparts\n.\nparachutes\n)\ndo\nparachute\n:\ndeploy\n()\nend\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nfor\nparachute\nin\nvessel\n.\nparts\n.\nparachutes\n:\nparachute\n.\ndeploy\n()\n‘Control From Here’ for Docking Ports\n¶\nThe following example will find a standard sized Clamp-O-Tron docking port, and\ncontrol the vessel from it:\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nSystem.Linq\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nControlFromHere\n{\npublic\nstatic\nvoid\nMain\n()\n{\nusing\n(\nvar\nconn\n=\nnew\nConnection\n())\n{\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\npart\n=\nvessel\n.\nParts\n.\nWithTitle\n(\n\"Clamp-O-Tron Docking Port\"\n)\n[\n0\n];\nvessel\n.\nParts\n.\nControlling\n=\npart\n;\n}\n}\n}\n#include\n<iostream>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n();\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nauto\npart\n=\nvessel\n.\nparts\n().\nwith_title\n(\n\"Clamp-O-Tron Docking Port\"\n).\nfront\n();\nvessel\n.\nparts\n().\nset_controlling\n(\npart\n);\n}\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"ControlFromHere\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Parts_t\nparts\n;\nkrpc_SpaceCenter_Vessel_Parts\n(\nconn\n,\n&\nparts\n,\nvessel\n);\nkrpc_list_object_t\ndocking_port_parts\n;\nkrpc_SpaceCenter_Parts_WithTitle\n(\nconn\n,\n&\ndocking_port_parts\n,\nparts\n,\n\"Clamp-O-Tron Docking Port\"\n);\nkrpc_object_t\npart\n=\ndocking_port_parts\n.\nitems\n[\n0\n];\nkrpc_SpaceCenter_Parts_set_Controlling\n(\nconn\n,\nparts\n,\npart\n);\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.Part\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\njava.io.IOException\n;\npublic\nclass\nControlFromHere\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n();\nVessel\nvessel\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n).\ngetActiveVessel\n();\nPart\npart\n=\nvessel\n.\ngetParts\n().\nwithTitle\n(\n\"Clamp-O-Tron Docking Port\"\n).\nget\n(\n0\n);\nvessel\n.\ngetParts\n().\nsetControlling\n(\npart\n);\nconnection\n.\nclose\n();\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nconn\n=\nkrpc\n.\nconnect\n()\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\npart\n=\nvessel\n.\nparts\n:\nwith_title\n(\n'Clamp-O-Tron Docking Port'\n)[\n1\n]\nvessel\n.\nparts\n.\ncontrolling\n=\npart\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\npart\n=\nvessel\n.\nparts\n.\nwith_title\n(\n'Clamp-O-Tron Docking Port'\n)[\n0\n]\nvessel\n.\nparts\n.\ncontrolling\n=\npart\nCombined Specific Impulse\n¶\nThe following script calculates the combined specific impulse of all currently\nactive and fueled engines on a rocket. See here for a description of the maths:\nhttps://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\nC#\nC++\nC\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nSystem.Linq\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nclass\nCombinedIsp\n{\npublic\nstatic\nvoid\nMain\n()\n{\nusing\n(\nvar\nconnection\n=\nnew\nConnection\n())\n{\nvar\nvessel\n=\nconnection\n.\nSpaceCenter\n().\nActiveVessel\n;\nvar\nactiveEngines\n=\nvessel\n.\nParts\n.\nEngines\n.\nWhere\n(\ne\n=>\ne\n.\nActive\n&&\ne\n.\nHasFuel\n).\nToList\n();\nConsole\n.\nWriteLine\n(\n\"Active engines:\"\n);\nforeach\n(\nvar\nengine\nin\nactiveEngines\n)\nConsole\n.\nWriteLine\n(\n\"   \"\n+\nengine\n.\nPart\n.\nTitle\n+\n\" in stage \"\n+\nengine\n.\nPart\n.\nStage\n);\ndouble\nthrust\n=\nactiveEngines\n.\nSum\n(\ne\n=>\ne\n.\nThrust\n);\ndouble\nfuel_consumption\n=\nactiveEngines\n.\nSum\n(\ne\n=>\ne\n.\nThrust\n/\ne\n.\nSpecificImpulse\n);\ndouble\nisp\n=\nthrust\n/\nfuel_consumption\n;\nConsole\n.\nWriteLine\n(\n\"Combined vacuum Isp = {0:F0} seconds\"\n,\nisp\n);\n}\n}\n}\n#include\n<iostream>\n#include\n<vector>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\nusing\nSpaceCenter\n=\nkrpc\n::\nservices\n::\nSpaceCenter\n;\nint\nmain\n()\n{\nauto\nconn\n=\nkrpc\n::\nconnect\n();\nSpaceCenter\nsc\n(\n&\nconn\n);\nauto\nvessel\n=\nsc\n.\nactive_vessel\n();\nauto\nengines\n=\nvessel\n.\nparts\n().\nengines\n();\nstd\n::\nvector\n<\nSpaceCenter\n::\nEngine\n>\nactive_engines\n;\nfor\n(\nauto\nengine\n:\nengines\n)\nif\n(\nengine\n.\nactive\n()\n&&\nengine\n.\nhas_fuel\n())\nactive_engines\n.\npush_back\n(\nengine\n);\nstd\n::\ncout\n<<\n\"Active engines:\"\n<<\nstd\n::\nendl\n;\nfor\n(\nauto\nengine\n:\nactive_engines\n)\nstd\n::\ncout\n<<\n\"   \"\n<<\nengine\n.\npart\n().\ntitle\n()\n<<\n\" in stage \"\n<<\nengine\n.\npart\n().\nstage\n()\n<<\nstd\n::\nendl\n;\ndouble\nthrust\n=\n0\n;\ndouble\nfuel_consumption\n=\n0\n;\nfor\n(\nauto\nengine\n:\nactive_engines\n)\n{\nthrust\n+=\nengine\n.\nthrust\n();\nfuel_consumption\n+=\nengine\n.\nthrust\n()\n/\nengine\n.\nspecific_impulse\n();\n}\ndouble\nisp\n=\nthrust\n/\nfuel_consumption\n;\nstd\n::\ncout\n<<\n\"Combined vacuum Isp = \"\n<<\nisp\n<<\n\" seconds\"\n<<\nstd\n::\nendl\n;\n}\n#include\n<krpc_cnano.h>\n#include\n<krpc_cnano/services/space_center.h>\nint\nmain\n()\n{\nkrpc_connection_t\nconn\n;\nkrpc_open\n(\n&\nconn\n,\n\"COM0\"\n);\nkrpc_connect\n(\nconn\n,\n\"CombinedISP\"\n);\nkrpc_SpaceCenter_Vessel_t\nvessel\n;\nkrpc_SpaceCenter_ActiveVessel\n(\nconn\n,\n&\nvessel\n);\nkrpc_SpaceCenter_Parts_t\nparts\n;\nkrpc_SpaceCenter_Vessel_Parts\n(\nconn\n,\n&\nparts\n,\nvessel\n);\nkrpc_list_object_t\nengines\n=\nKRPC_NULL_LIST\n;\nkrpc_SpaceCenter_Parts_Engines\n(\nconn\n,\n&\nengines\n,\nparts\n);\nkrpc_list_object_t\nactive_engines\n=\nKRPC_NULL_LIST\n;\nactive_engines\n.\nsize\n=\n0\n;\nactive_engines\n.\nitems\n=\nkrpc_calloc\n(\nengines\n.\nsize\n,\nsizeof\n(\nkrpc_object_t\n));\nfor\n(\nsize_t\ni\n=\n0\n;\ni\n<\nengines\n.\nsize\n;\ni\n++\n)\n{\nkrpc_SpaceCenter_Engine_t\nengine\n=\nengines\n.\nitems\n[\ni\n];\nbool\nactive\n;\nbool\nhas_fuel\n;\nkrpc_SpaceCenter_Engine_Active\n(\nconn\n,\n&\nactive\n,\nengine\n);\nkrpc_SpaceCenter_Engine_HasFuel\n(\nconn\n,\n&\nhas_fuel\n,\nengine\n);\nif\n(\nactive\n&&\nhas_fuel\n)\n{\nactive_engines\n.\nitems\n[\nactive_engines\n.\nsize\n]\n=\nengine\n;\nactive_engines\n.\nsize\n++\n;\n}\n}\nprintf\n(\n\"Active engines:\n\\n\n\"\n);\nfor\n(\nsize_t\ni\n=\n0\n;\ni\n<\nactive_engines\n.\nsize\n;\ni\n++\n)\n{\nkrpc_SpaceCenter_Engine_t\nengine\n=\nactive_engines\n.\nitems\n[\ni\n];\nkrpc_SpaceCenter_Part_t\npart\n;\nkrpc_SpaceCenter_Engine_Part\n(\nconn\n,\n&\npart\n,\nengine\n);\nchar\n*\ntitle\n=\nNULL\n;\nint\nstage\n;\nkrpc_SpaceCenter_Part_Title\n(\nconn\n,\n&\ntitle\n,\npart\n);\nkrpc_SpaceCenter_Part_Stage\n(\nconn\n,\n&\nstage\n,\npart\n);\nprintf\n(\n\"   %s in stage %d\n\\n\n\"\n,\ntitle\n,\nstage\n);\n}\ndouble\nthrust\n=\n0\n;\ndouble\nfuel_consumption\n=\n0\n;\nfor\n(\nsize_t\ni\n=\n0\n;\ni\n<\nactive_engines\n.\nsize\n;\ni\n++\n)\n{\nkrpc_SpaceCenter_Engine_t\nengine\n=\nactive_engines\n.\nitems\n[\ni\n];\nfloat\nengine_thrust\n;\nfloat\nengine_isp\n;\nkrpc_SpaceCenter_Engine_Thrust\n(\nconn\n,\n&\nengine_thrust\n,\nengine\n);\nkrpc_SpaceCenter_Engine_SpecificImpulse\n(\nconn\n,\n&\nengine_isp\n,\nengine\n);\nthrust\n+=\nengine_thrust\n;\nfuel_consumption\n+=\nengine_thrust\n/\nengine_isp\n;\n}\ndouble\nisp\n=\nthrust\n/\nfuel_consumption\n;\nprintf\n(\n\"Combined vacuum Isp = %.2f seconds\n\\n\n\"\n,\nisp\n);\nKRPC_FREE_LIST\n(\nengines\n);\nKRPC_FREE_LIST\n(\nactive_engines\n);\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.Engine\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\njava.io.IOException\n;\nimport\njava.util.LinkedList\n;\nimport\njava.util.List\n;\npublic\nclass\nCombinedIsp\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n();\nVessel\nvessel\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n).\ngetActiveVessel\n();\nList\n<\nEngine\n>\nengines\n=\nvessel\n.\ngetParts\n().\ngetEngines\n();\nList\n<\nEngine\n>\nactiveEngines\n=\nnew\nLinkedList\n<\nEngine\n>\n();\nfor\n(\nEngine\nengine\n:\nengines\n)\n{\nif\n(\nengine\n.\ngetActive\n()\n&&\nengine\n.\ngetHasFuel\n())\n{\nactiveEngines\n.\nadd\n(\nengine\n);\n}\n}\nSystem\n.\nout\n.\nprintln\n(\n\"Active engines:\"\n);\nfor\n(\nEngine\nengine\n:\nactiveEngines\n)\n{\nSystem\n.\nout\n.\nprintln\n(\n\"   \"\n+\nengine\n.\ngetPart\n().\ngetTitle\n()\n+\n\" in stage \"\n+\nengine\n.\ngetPart\n().\ngetStage\n());\n}\ndouble\nthrust\n=\n0\n;\ndouble\nfuelConsumption\n=\n0\n;\nfor\n(\nEngine\nengine\n:\nactiveEngines\n)\n{\nthrust\n+=\nengine\n.\ngetThrust\n();\nfuelConsumption\n+=\nengine\n.\ngetThrust\n()\n/\nengine\n.\ngetSpecificImpulse\n();\n}\ndouble\nisp\n=\nthrust\n/\nfuelConsumption\n;\nSystem\n.\nout\n.\nprintf\n(\n\"Combined vacuum Isp = %.0f\\n\"\n,\nisp\n);\nconnection\n.\nclose\n();\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nmath\n=\nrequire\n'math'\nlocal\nconn\n=\nkrpc\n.\nconnect\n()\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nlocal\nactive_engines\n=\n{}\nfor\n_\n,\nengine\nin\nipairs\n(\nvessel\n.\nparts\n.\nengines\n)\ndo\nif\nengine\n.\nactive\nand\nengine\n.\nhas_fuel\nthen\ntable.insert\n(\nactive_engines\n,\nengine\n)\nend\nend\nprint\n(\n'Active engines:'\n)\nfor\n_\n,\nengine\nin\nipairs\n(\nactive_engines\n)\ndo\nprint\n(\n'   '\n..\nengine\n.\npart\n.\ntitle\n..\n' in stage '\n..\nengine\n.\npart\n.\nstage\n)\nend\nthrust\n=\n0\nfuel_consumption\n=\n0\nfor\n_\n,\nengine\nin\nipairs\n(\nactive_engines\n)\ndo\nthrust\n=\nthrust\n+\nengine\n.\nthrust\nfuel_consumption\n=\nfuel_consumption\n+\nengine\n.\nthrust\n/\nengine\n.\nspecific_impulse\nend\nisp\n=\nthrust\n/\nfuel_consumption\nprint\n(\nstring.format\n(\n'Combined vacuum Isp = %.1f seconds'\n,\nisp\n))\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n()\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nactive_engines\n=\n[\ne\nfor\ne\nin\nvessel\n.\nparts\n.\nengines\nif\ne\n.\nactive\nand\ne\n.\nhas_fuel\n]\nprint\n(\n'Active engines:'\n)\nfor\nengine\nin\nactive_engines\n:\nprint\n(\n'\n%s\nin stage\n%d\n'\n%\n(\nengine\n.\npart\n.\ntitle\n,\nengine\n.\npart\n.\nstage\n))\nthrust\n=\nsum\n(\nengine\n.\nthrust\nfor\nengine\nin\nactive_engines\n)\nfuel_consumption\n=\nsum\n(\nengine\n.\nthrust\n/\nengine\n.\nspecific_impulse\nfor\nengine\nin\nactive_engines\n)\nisp\n=\nthrust\n/\nfuel_consumption\nprint\n(\n'Combined vacuum Isp =\n%d\nseconds'\n%\nisp\n)"}
{"url": "https://krpc.github.io/krpc/tutorials/docking-guidance.html", "title": "Docking Guidance¶", "headings": [], "anchors": ["docking-guidance"], "content_text": "Docking Guidance\n¶\nThe following script outputs docking guidance information. It waits until the\nvessel is being controlled from a docking port, and a docking port is set as the\ncurrent target. It then prints out information about speeds and distances\nrelative to the docking axis.\nIt uses\nnumpy\nto do linear algebra on the vectors\nreturned by kRPC – for example computing the dot product or length of a vector\n– and uses\ncurses\nfor terminal\noutput.\nimport\ncurses\nimport\ntime\nimport\nnumpy\nas\nnp\nimport\nnumpy.linalg\nas\nla\nimport\nkrpc\n# Set up curses\nstdscr\n=\ncurses\n.\ninitscr\n()\ncurses\n.\nnocbreak\n()\nstdscr\n.\nkeypad\n(\n1\n)\ncurses\n.\nnoecho\n()\ntry\n:\n# Connect to kRPC\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'Docking Guidance'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\ncurrent\n=\nNone\ntarget\n=\nNone\nwhile\nTrue\n:\nstdscr\n.\nclear\n()\nstdscr\n.\naddstr\n(\n0\n,\n0\n,\n'-- Docking Guidance --'\n)\ncurrent\n=\nconn\n.\nspace_center\n.\nactive_vessel\n.\nparts\n.\ncontrolling\n.\ndocking_port\ntarget\n=\nconn\n.\nspace_center\n.\ntarget_docking_port\nif\ncurrent\nis\nNone\n:\nstdscr\n.\naddstr\n(\n2\n,\n0\n,\n'Awaiting control from docking port...'\n)\nelif\ntarget\nis\nNone\n:\nstdscr\n.\naddstr\n(\n2\n,\n0\n,\n'Awaiting target docking port...'\n)\nelse\n:\n# Get positions, distances, velocities and\n# speeds relative to the target docking port\ncurrent_position\n=\ncurrent\n.\nposition\n(\ntarget\n.\nreference_frame\n)\nvelocity\n=\ncurrent\n.\npart\n.\nvelocity\n(\ntarget\n.\nreference_frame\n)\ndisplacement\n=\nnp\n.\narray\n(\ncurrent_position\n)\ndistance\n=\nla\n.\nnorm\n(\ndisplacement\n)\nspeed\n=\nla\n.\nnorm\n(\nnp\n.\narray\n(\nvelocity\n))\n# Get speeds and distances relative to the docking axis\n# (the direction the target docking port is facing in)\n# Axial = along the docking axis\naxial_displacement\n=\nnp\n.\ncopy\n(\ndisplacement\n)\naxial_displacement\n[\n0\n]\n=\n0\naxial_displacement\n[\n2\n]\n=\n0\naxial_distance\n=\naxial_displacement\n[\n1\n]\naxial_velocity\n=\nnp\n.\ncopy\n(\nvelocity\n)\naxial_velocity\n[\n0\n]\n=\n0\naxial_velocity\n[\n2\n]\n=\n0\naxial_speed\n=\naxial_velocity\n[\n1\n]\nif\naxial_distance\n>\n0\n:\naxial_speed\n*=\n-\n1\n# Radial = perpendicular to the docking axis\nradial_displacement\n=\nnp\n.\ncopy\n(\ndisplacement\n)\nradial_displacement\n[\n1\n]\n=\n0\nradial_distance\n=\nla\n.\nnorm\n(\nradial_displacement\n)\nradial_velocity\n=\nnp\n.\ncopy\n(\nvelocity\n)\nradial_velocity\n[\n1\n]\n=\n0\nradial_speed\n=\nla\n.\nnorm\n(\nradial_velocity\n)\nif\nnp\n.\ndot\n(\nradial_velocity\n,\nradial_displacement\n)\n>\n0\n:\nradial_speed\n*=\n-\n1\n# Get the docking port state\nif\ncurrent\n.\nstate\n==\nconn\n.\nspace_center\n.\nDockingPortState\n.\nready\n:\nstate\n=\n'Ready to dock'\nelif\ncurrent\n.\nstate\n==\nconn\n.\nspace_center\n.\nDockingPortState\n.\ndocked\n:\nstate\n=\n'Docked'\nelif\ncurrent\n.\nstate\n==\nconn\n.\nspace_center\n.\nDockingPortState\n.\ndocking\n:\nstate\n=\n'Docking...'\nelse\n:\nstate\n=\n'Unknown'\n# Output information\nstdscr\n.\naddstr\n(\n2\n,\n0\n,\n'Current ship:\n{:30}\n'\n.\nformat\n(\ncurrent\n.\npart\n.\nvessel\n.\nname\n[:\n30\n]))\nstdscr\n.\naddstr\n(\n3\n,\n0\n,\n'Current port:\n{:30}\n'\n.\nformat\n(\ncurrent\n.\npart\n.\ntitle\n[:\n30\n]))\nstdscr\n.\naddstr\n(\n5\n,\n0\n,\n'Target ship:\n{:30}\n'\n.\nformat\n(\ntarget\n.\npart\n.\nvessel\n.\nname\n[:\n30\n]))\nstdscr\n.\naddstr\n(\n6\n,\n0\n,\n'Target port:\n{:30}\n'\n.\nformat\n(\ntarget\n.\npart\n.\ntitle\n[:\n30\n]))\nstdscr\n.\naddstr\n(\n8\n,\n0\n,\n'Status:\n{:10}\n'\n.\nformat\n(\nstate\n))\nstdscr\n.\naddstr\n(\n10\n,\n0\n,\n'          +---------------------------+'\n)\nstdscr\n.\naddstr\n(\n11\n,\n0\n,\n'          |  Distance  |  Speed       |'\n)\nstdscr\n.\naddstr\n(\n12\n,\n0\n,\n'+---------+------------+--------------+'\n)\nstdscr\n.\naddstr\n(\n13\n,\n0\n,\n'|         |\n{:>+6.2f}\nm  |\n{:>+6.2f}\nm/s  |'\n.\nformat\n(\ndistance\n,\nspeed\n))\nstdscr\n.\naddstr\n(\n14\n,\n0\n,\n'|   Axial |\n{:>+6.2f}\nm  |\n{:>+6.2f}\nm/s  |'\n.\nformat\n(\naxial_distance\n,\naxial_speed\n))\nstdscr\n.\naddstr\n(\n15\n,\n0\n,\n'|  Radial |\n{:>+6.2f}\nm  |\n{:>+6.2f}\nm/s  |'\n.\nformat\n(\nradial_distance\n,\nradial_speed\n))\nstdscr\n.\naddstr\n(\n16\n,\n0\n,\n'+---------+------------+--------------+'\n)\nstdscr\n.\nrefresh\n()\ntime\n.\nsleep\n(\n0.25\n)\nfinally\n:\n# Shutdown curses\ncurses\n.\nnocbreak\n()\nstdscr\n.\nkeypad\n(\n0\n)\ncurses\n.\necho\n()\ncurses\n.\nendwin\n()"}
{"url": "https://krpc.github.io/krpc/tutorials/user-interface.html", "title": "User Interface¶", "headings": [], "anchors": ["user-interface", "tab-0-0-0", "tab-0-0-1", "tab-0-0-2", "tab-0-0-3", "tab-0-0-4", "panel-0-0-0", "panel-0-0-1", "panel-0-0-2", "panel-0-0-3", "panel-0-0-4"], "content_text": "User Interface\n¶\nThe following script demonstrates how to use the UI service to display text and\nhandle basic user input. It adds a panel to the left side of the screen,\ndisplaying the current thrust produced by the vessel and a button to set the\nthrottle to maximum.\nC#\nC++\nJava\nLua\nPython\nusing\nSystem\n;\nusing\nKRPC.Client\n;\nusing\nKRPC.Client.Services.SpaceCenter\n;\nusing\nKRPC.Client.Services.UI\n;\nclass\nUserInterface\n{\npublic\nstatic\nvoid\nMain\n()\n{\nvar\nconn\n=\nnew\nConnection\n(\n\"User Interface Example\"\n);\nvar\ncanvas\n=\nconn\n.\nUI\n().\nStockCanvas\n;\n// Get the size of the game window in pixels\nvar\nscreenSize\n=\ncanvas\n.\nRectTransform\n.\nSize\n;\n// Add a panel to contain the UI elements\nvar\npanel\n=\ncanvas\n.\nAddPanel\n();\n// Position the panel on the left of the screen\nvar\nrect\n=\npanel\n.\nRectTransform\n;\nrect\n.\nSize\n=\nTuple\n.\nCreate\n(\n200.0\n,\n100.0\n);\nrect\n.\nPosition\n=\nTuple\n.\nCreate\n((\n110\n-\n(\nscreenSize\n.\nItem1\n)\n/\n2\n),\n0.0\n);\n// Add a button to set the throttle to maximum\nvar\nbutton\n=\npanel\n.\nAddButton\n(\n\"Full Throttle\"\n);\nbutton\n.\nRectTransform\n.\nPosition\n=\nTuple\n.\nCreate\n(\n0.0\n,\n20.0\n);\n// Add some text displaying the total engine thrust\nvar\ntext\n=\npanel\n.\nAddText\n(\n\"Thrust: 0 kN\"\n);\ntext\n.\nRectTransform\n.\nPosition\n=\nTuple\n.\nCreate\n(\n0.0\n,\n-\n20.0\n);\ntext\n.\nColor\n=\nTuple\n.\nCreate\n(\n1.0\n,\n1.0\n,\n1.0\n);\ntext\n.\nSize\n=\n18\n;\n// Set up a stream to monitor the throttle button\nvar\nbuttonClicked\n=\nconn\n.\nAddStream\n(()\n=>\nbutton\n.\nClicked\n);\nvar\nvessel\n=\nconn\n.\nSpaceCenter\n().\nActiveVessel\n;\nwhile\n(\ntrue\n)\n{\n// Handle the throttle button being clicked\nif\n(\nbuttonClicked\n.\nGet\n())\n{\nvessel\n.\nControl\n.\nThrottle\n=\n1\n;\nbutton\n.\nClicked\n=\nfalse\n;\n}\n// Update the thrust text\ntext\n.\nContent\n=\n\"Thrust: \"\n+\n(\nvessel\n.\nThrust\n/\n1000\n)\n+\n\" kN\"\n;\nSystem\n.\nThreading\n.\nThread\n.\nSleep\n(\n1000\n);\n}\n}\n}\n#include\n<chrono>\n#include\n<thread>\n#include\n<krpc.hpp>\n#include\n<krpc/services/space_center.hpp>\n#include\n<krpc/services/ui.hpp>\nint\nmain\n()\n{\nkrpc\n::\nClient\nconn\n=\nkrpc\n::\nconnect\n(\n\"User Interface Example\"\n);\nkrpc\n::\nservices\n::\nSpaceCenter\nspace_center\n(\n&\nconn\n);\nkrpc\n::\nservices\n::\nUI\nui\n(\n&\nconn\n);\nauto\ncanvas\n=\nui\n.\nstock_canvas\n();\n// Get the size of the game window in pixels\nauto\nscreen_size\n=\ncanvas\n.\nrect_transform\n().\nsize\n();\n// Add a panel to contain the UI elements\nauto\npanel\n=\ncanvas\n.\nadd_panel\n();\n// Position the panel on the left of the screen\nauto\nrect\n=\npanel\n.\nrect_transform\n();\nrect\n.\nset_size\n(\nstd\n::\nmake_tuple\n(\n200\n,\n100\n));\nrect\n.\nset_position\n(\nstd\n::\nmake_tuple\n(\n110\n-\n(\nstd\n::\nget\n<\n0\n>\n(\nscreen_size\n)\n/\n2\n),\n0\n));\n// Add a button to set the throttle to maximum\nauto\nbutton\n=\npanel\n.\nadd_button\n(\n\"Full Throttle\"\n);\nbutton\n.\nrect_transform\n().\nset_position\n(\nstd\n::\nmake_tuple\n(\n0\n,\n20\n));\n// Add some text displaying the total engine thrust\nauto\ntext\n=\npanel\n.\nadd_text\n(\n\"Thrust: 0 kN\"\n);\ntext\n.\nrect_transform\n().\nset_position\n(\nstd\n::\nmake_tuple\n(\n0\n,\n-20\n));\ntext\n.\nset_color\n(\nstd\n::\nmake_tuple\n(\n1\n,\n1\n,\n1\n));\ntext\n.\nset_size\n(\n18\n);\n// Set up a stream to monitor the throttle button\nauto\nbutton_clicked\n=\nbutton\n.\nclicked_stream\n();\nauto\nvessel\n=\nspace_center\n.\nactive_vessel\n();\nwhile\n(\ntrue\n)\n{\n// Handle the throttle button being clicked\nif\n(\nbutton_clicked\n())\n{\nvessel\n.\ncontrol\n().\nset_throttle\n(\n1\n);\nbutton\n.\nset_clicked\n(\nfalse\n);\n}\n// Update the thrust text\ntext\n.\nset_content\n(\n\"Thrust: \"\n+\nstd\n::\nto_string\n((\nint\n)(\nvessel\n.\nthrust\n()\n/\n1000\n))\n+\n\" kN\"\n);\nstd\n::\nthis_thread\n::\nsleep_for\n(\nstd\n::\nchrono\n::\nseconds\n(\n1\n));\n}\n}\nimport\nkrpc.client.Connection\n;\nimport\nkrpc.client.RPCException\n;\nimport\nkrpc.client.Stream\n;\nimport\nkrpc.client.StreamException\n;\nimport\nkrpc.client.services.SpaceCenter\n;\nimport\nkrpc.client.services.SpaceCenter.Vessel\n;\nimport\nkrpc.client.services.UI\n;\nimport\nkrpc.client.services.UI.Button\n;\nimport\nkrpc.client.services.UI.Canvas\n;\nimport\nkrpc.client.services.UI.Panel\n;\nimport\nkrpc.client.services.UI.RectTransform\n;\nimport\nkrpc.client.services.UI.Text\n;\nimport\norg.javatuples.Pair\n;\nimport\norg.javatuples.Triplet\n;\nimport\njava.io.IOException\n;\npublic\nclass\nUserInterface\n{\npublic\nstatic\nvoid\nmain\n(\nString\n[]\nargs\n)\nthrows\nIOException\n,\nRPCException\n,\nInterruptedException\n,\nStreamException\n{\nConnection\nconnection\n=\nConnection\n.\nnewInstance\n(\n\"User Interface Example\"\n);\nSpaceCenter\nspaceCenter\n=\nSpaceCenter\n.\nnewInstance\n(\nconnection\n);\nUI\nui\n=\nUI\n.\nnewInstance\n(\nconnection\n);\nCanvas\ncanvas\n=\nui\n.\ngetStockCanvas\n();\n// Get the size of the game window in pixels\nPair\n<\nDouble\n,\nDouble\n>\nscreenSize\n=\ncanvas\n.\ngetRectTransform\n().\ngetSize\n();\n// Add a panel to contain the UI elements\nPanel\npanel\n=\ncanvas\n.\naddPanel\n(\ntrue\n);\n// Position the panel on the left of the screen\nRectTransform\nrect\n=\npanel\n.\ngetRectTransform\n();\nrect\n.\nsetSize\n(\nnew\nPair\n<\nDouble\n,\nDouble\n>\n(\n200.0\n,\n100.0\n));\nrect\n.\nsetPosition\n(\nnew\nPair\n<\nDouble\n,\nDouble\n>\n((\n110\n-\n(\nscreenSize\n.\ngetValue0\n())\n/\n2\n),\n0.0\n));\n// Add a button to set the throttle to maximum\nButton\nbutton\n=\npanel\n.\naddButton\n(\n\"Full Throttle\"\n,\ntrue\n);\nbutton\n.\ngetRectTransform\n().\nsetPosition\n(\nnew\nPair\n<\nDouble\n,\nDouble\n>\n(\n0.0\n,\n20.0\n));\n// Add some text displaying the total engine thrust\nText\ntext\n=\npanel\n.\naddText\n(\n\"Thrust: 0 kN\"\n,\ntrue\n);\ntext\n.\ngetRectTransform\n().\nsetPosition\n(\nnew\nPair\n<\nDouble\n,\nDouble\n>\n(\n0.0\n,\n-\n20.0\n));\ntext\n.\nsetColor\n(\nnew\nTriplet\n<\nDouble\n,\nDouble\n,\nDouble\n>\n(\n1.0\n,\n1.0\n,\n1.0\n));\ntext\n.\nsetSize\n(\n18\n);\n// Set up a stream to monitor the throttle button\nStream\n<\nBoolean\n>\nbuttonClicked\n=\nconnection\n.\naddStream\n(\nbutton\n,\n\"getClicked\"\n);\nVessel\nvessel\n=\nspaceCenter\n.\ngetActiveVessel\n();\nwhile\n(\ntrue\n)\n{\n// Handle the throttle button being clicked\nif\n(\nbuttonClicked\n.\nget\n())\n{\nvessel\n.\ngetControl\n().\nsetThrottle\n(\n1\n);\nbutton\n.\nsetClicked\n(\nfalse\n);\n}\n// Update the thrust text\ntext\n.\nsetContent\n(\nString\n.\nformat\n(\n\"Thrust: %.0f kN\"\n,\n(\nvessel\n.\ngetThrust\n()\n/\n1000\n)));\nThread\n.\nsleep\n(\n1000\n);\n}\n}\n}\nlocal\nkrpc\n=\nrequire\n'krpc'\nlocal\nplatform\n=\nrequire\n'krpc.platform'\nlocal\nList\n=\nrequire\n'pl.List'\nlocal\nconn\n=\nkrpc\n.\nconnect\n(\n'User Interface Example'\n)\nlocal\ncanvas\n=\nconn\n.\nui\n.\nstock_canvas\n-- Get the size of the game window in pixels\nlocal\nscreen_size\n=\ncanvas\n.\nrect_transform\n.\nsize\n-- Add a panel to contain the UI elements\nlocal\npanel\n=\ncanvas\n:\nadd_panel\n()\n-- Position the panel on the left of the screen\nlocal\nrect\n=\npanel\n.\nrect_transform\nrect\n.\nsize\n=\nList\n{\n200\n,\n100\n}\nrect\n.\nposition\n=\nList\n{\n110\n-\n(\nscreen_size\n[\n1\n]\n/\n2\n),\n0\n}\n-- Add a button to set the throttle to maximum\nlocal\nbutton\n=\npanel\n:\nadd_button\n(\n\"Full Throttle\"\n)\nbutton\n.\nrect_transform\n.\nposition\n=\nList\n{\n0\n,\n20\n}\n-- Add some text displaying the total engine thrust\nlocal\ntext\n=\npanel\n:\nadd_text\n(\n\"Thrust: 0 kN\"\n)\ntext\n.\nrect_transform\n.\nposition\n=\nList\n{\n0\n,\n-\n20\n}\ntext\n.\ncolor\n=\nList\n{\n1\n,\n1\n,\n1\n}\ntext\n.\nsize\n=\n18\nlocal\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nwhile\ntrue\ndo\n-- Handle the throttle button being clicked\nif\nbutton\n.\nclicked\nthen\nvessel\n.\ncontrol\n.\nthrottle\n=\n1\nbutton\n.\nclicked\n=\nfalse\nend\n-- Update the thrust text\ntext\n.\ncontent\n=\nstring.format\n(\n'Thrust: %.1f kN'\n,\nvessel\n.\nthrust\n/\n1000\n)\nplatform\n.\nsleep\n(\n0.1\n)\nend\nimport\ntime\nimport\nkrpc\nconn\n=\nkrpc\n.\nconnect\n(\nname\n=\n'User Interface Example'\n)\ncanvas\n=\nconn\n.\nui\n.\nstock_canvas\n# Get the size of the game window in pixels\nscreen_size\n=\ncanvas\n.\nrect_transform\n.\nsize\n# Add a panel to contain the UI elements\npanel\n=\ncanvas\n.\nadd_panel\n()\n# Position the panel on the left of the screen\nrect\n=\npanel\n.\nrect_transform\nrect\n.\nsize\n=\n(\n200\n,\n100\n)\nrect\n.\nposition\n=\n(\n110\n-\n(\nscreen_size\n[\n0\n]\n/\n2\n),\n0\n)\n# Add a button to set the throttle to maximum\nbutton\n=\npanel\n.\nadd_button\n(\n\"Full Throttle\"\n)\nbutton\n.\nrect_transform\n.\nposition\n=\n(\n0\n,\n20\n)\n# Add some text displaying the total engine thrust\ntext\n=\npanel\n.\nadd_text\n(\n\"Thrust: 0 kN\"\n)\ntext\n.\nrect_transform\n.\nposition\n=\n(\n0\n,\n-\n20\n)\ntext\n.\ncolor\n=\n(\n1\n,\n1\n,\n1\n)\ntext\n.\nsize\n=\n18\n# Set up a stream to monitor the throttle button\nbutton_clicked\n=\nconn\n.\nadd_stream\n(\ngetattr\n,\nbutton\n,\n'clicked'\n)\nvessel\n=\nconn\n.\nspace_center\n.\nactive_vessel\nwhile\nTrue\n:\n# Handle the throttle button being clicked\nif\nbutton_clicked\n():\nvessel\n.\ncontrol\n.\nthrottle\n=\n1\nbutton\n.\nclicked\n=\nFalse\n# Update the thrust text\ntext\n.\ncontent\n=\n'Thrust:\n%d\nkN'\n%\n(\nvessel\n.\nthrust\n/\n1000\n)\ntime\n.\nsleep\n(\n0.1\n)"}
{"url": "https://krpc.github.io/krpc/tutorials/autopilot.html", "title": "AutoPilot¶", "headings": ["Overview¶", "Configuring the AutoPilot¶", "Computing the Target Angular Velocity¶", "Tuning the Controllers¶", "Corner Cases¶", "When sitting on the launchpad¶", "When the available angular acceleration is zero¶"], "anchors": ["autopilot", "overview", "configuring-the-autopilot", "computing-the-target-angular-velocity", "target-angular-velocity", "tuning-the-controllers", "id1", "corner-cases", "when-sitting-on-the-launchpad", "when-the-available-angular-acceleration-is-zero"], "content_text": "AutoPilot\n¶\nkRPC provides an autopilot that can be used to hold a vessel in a chosen\norientation. It automatically tunes itself to cope with vessels of differing\nsize and control authority. This tutorial explains how the autopilot works, how\nto configure it and mathematics behind it.\nOverview\n¶\nThe inputs to the autopilot are:\nA reference frame defining where zero rotation is,\ntarget pitch and heading angles,\nand an (optional) target roll angle.\nWhen a roll angle is not specified, the autopilot will try to zero out any\nrotation around the roll axis but will not try to hold a specific roll\nangle.\nThe diagram below shows a high level overview of the autopilot. First, the\ncurrent rotation and target rotation are used to compute the\ntarget\nangular velocity\nthat is needed to rotate the vessel\nto face the target. Next, the components of this angular velocity in the pitch,\nyaw and roll axes of the vessel are passed to three PID controllers. The outputs\nof these controllers are used as the control inputs for the vessel.\nThere are several parameters affecting the operation of the autopilot, shown the\nthe left of the diagram. They are covered in the next section.\nConfiguring the AutoPilot\n¶\nThere are several parameters that affect the behavior of the autopilot. The\ndefault values for these should suffice in most cases, but they can be adjusted\nto fit your needs.\nThe\nstopping time\nis the maximum amount of time that the vessel should\nneed to come to a complete stop. This limits the maximum angular velocity of\nthe vessel. It is a vector of three stopping times, one for each of the pitch,\nroll and yaw axes. The default value is 0.5 seconds for each axis.\nThe\ndeceleration time\nis the minimum time the autopilot should take to\ndecelerate the vessel to a stop, as it approaches the target direction. This\nis a minimum value, as the time required may be higher if the vessel does not\nhave sufficient angular acceleration. It is a vector of three deceleration\ntimes, in seconds, for each of the pitch, roll and yaw axes. The default value\nis 5 seconds for each axis. A smaller value will make the autopilot decelerate\nmore aggressively, turning the vessel towards the target more\nquickly. However, decreasing the value too much could result in overshoot.\nIn order to avoid overshoot, the stopping time should be smaller than the\ndeceleration time. This gives the autopilot some ‘spare’ acceleration, to\nadjust for errors in the vessels rotation, for example due to changing\naerodynamic forces.\nThe\nattenuation angle\nsets the region in which the autopilot considers the\nvessel to be ‘close’ to the target direction. In this region, the target\nvelocity is attenuated based on how close the vessel is to the target. It is\nan angle, in degrees, for each of the pitch, roll and yaw axes. The default\nvalue is 1 degree in each axis. This attenuation prevents the controls from\noscillating when the vessel is pointing in the correct direction. If you find\nthat the vessel still oscillates, try increasing this value.\nThe\ntime to peak\n, in seconds, that the PID controllers take to adjust the\nangular velocity of the vessel to the target angular velocity. Decreasing this\nvalue will make the controllers try to match the target velocity more\naggressively. It is a vector of three times, one for each of the pitch, roll\nand yaw axes. The default is 3 seconds in each axis.\nThe\novershoot\nis the percentage by which the PID controllers are allowed\nto overshoot the target angular velocity. Increasing this value will make the\ncontrollers try to match the target velocity more aggressively, but will cause\nmore overshoot. It is a vector of three values, between 0 and 1, for each of\nthe pitch, roll and yaw axes. The default is 0.01 in each axis.\nComputing the Target Angular Velocity\n¶\nThe target angular velocity is the angular velocity needed to the vessel to\nrotate it towards the target direction. It is computed by summing a target\nangular speed for each of pitch, yaw and roll axes. If no roll angle is set,\nthen the target angular velocity in the roll axis is simply set to 0.\nThe target angular speed\n\\(\\omega\\)\nin a given axis is computed from the\nangular error\n\\(\\theta\\)\nusing the following function:\nThe equation for this function is:\n\\[\\begin{split}\\omega &= -\\frac{\\theta}{\\lvert\\theta\\rvert}\n          \\text{min} \\big(\n              \\omega_{max},\n              \\sqrt{2 \\alpha \\lvert\\theta\\rvert} \\cdot f_a(\\theta)\n          \\big) \\\\\n\\text{where} & \\\\\n\\alpha &= \\frac{\\omega_{max}}{t_{decel}} \\\\\n\\omega_{max} &= \\frac{\\tau_{max}t_{stop}}{I} \\\\\nf_a(\\theta) &= \\frac{1}{1 + e^{-6/\\theta_a(\\lvert\\theta\\rvert - \\theta_a)}}\\end{split}\\]\nThe reasoning and derivation for this is as follows:\nThe vessel needs to rotate towards\n\\(\\theta = 0\\)\n. This means that the\ntarget angular speed\n\\(\\omega\\)\nneeds to be positive when\n\\(\\theta\\)\nis negative, and negative when\n\\(\\theta\\)\nis positive. This is done by\nmultiplying by the term\n\\(-\\frac{\\theta}{\\lvert\\theta\\rvert}\\)\n, which is 1\nwhen\n\\(\\theta < 0\\)\nand -1 when\n\\(\\theta >= 0\\)\nWe want the vessel to rotate at a maximum angular speed\n\\(\\omega_{max}\\)\n,\nwhich is determined by the stopping time\n\\(t_{stop}\\)\n. Using the equations\nof motion under constant acceleration we can derive it as follows:\n\\[\\begin{split}\\omega &= \\alpha t \\\\\n\\Rightarrow \\omega_{max} &= \\alpha_{max} t_{stop} \\\\\n                         &= \\frac{\\tau_{max}t_{stop}}{I}\\end{split}\\]\nwhere\n\\(\\tau_{max}\\)\nis the maximum torque the vessel can generate, and\n\\(I\\)\nis its moment of inertia.\nWe want the vessel to take time\n\\(t_{decel}\\)\n(the deceleration time) to\ngo from moving at speed\n\\(\\omega_{max}\\)\nto rest, when facing the\ntarget. And we want it to do this using a constant acceleration\n\\(\\alpha\\)\n. Using the equations of motion under constant acceleration we\ncan derive the target velocity\n\\(\\omega\\)\nin terms of the current angular\nerror\n\\(\\theta\\)\n:\n\\[\\begin{split}\\omega &= \\alpha t \\\\\n\\Rightarrow \\alpha &= \\frac{\\omega}{t}\n                    = \\frac{\\omega_{max}}{t_{decel}} \\\\\n\\theta &= \\frac{1}{2} \\alpha t^2\n\\Rightarrow t = \\sqrt{\\frac{2 \\theta}{\\alpha}} \\\\\n\\Rightarrow \\omega &= \\alpha \\sqrt{\\frac{2 \\theta}{\\alpha}}\n                    = \\sqrt{2 \\alpha \\theta}\\end{split}\\]\nTo prevent the vessel from oscillating when it is pointing in the target\ndirection, the gradient of the target angular speed curve at\n\\(\\theta =\n0\\)\nneeds to be 0, and increase/decrease smoothly with increasing/decreasing\n\\(\\theta\\)\n.\nThis is not the case for the target angular speed calculated above. To correct\nthis, we multiply by an attenuation function which has the required shape. The\nfollowing diagram shows the shape of the attenuation function (line in red),\nthe target velocity as calculated previously (line in blue) and the result of\nmultiplying these together (dashed line in black):\nThe formula for the attenuation function is a logistic function, with the\nfollowing formula:\n\\[f_a(\\theta) = \\frac{1}{1 + e^{-6/\\theta_a(\\lvert\\theta\\rvert - \\theta_a)}}\\]\nNote that the original function, derived from the equations of motion under\nconstant acceleration, is only affected by the attenuation function close to\nthe attenuation angle. This means that autopilot will use a constant\nacceleration to slow the vessel, until it gets close to the target direction.\nTuning the Controllers\n¶\nThree PID controllers, one for each of the pitch, roll and yaw control axes, are\nused to control the vessel. Each controller takes the relevant component of the\ntarget angular velocity as input. The following describes how the gains for\nthese controllers are automatically tuned based on the vessels available torque\nand moment of inertia.\nThe schematic for the entire system, in a single control axis, is as follows:\nThe input to the system is the angular speed around the control axis, denoted\n\\(\\omega\\)\n. The error in the angular speed\n\\(\\omega_\\epsilon\\)\nis\ncalculated from this and passed to controller\n\\(C\\)\n. This is a PID\ncontroller that we need to tune. The output of the controller is the control\ninput,\n\\(x\\)\n, that is passed to the vessel. The plant\n\\(H\\)\ndescribes\nthe physical system, i.e. how the control input affects the angular acceleration\nof the vessel. The derivative of this is computed to get the new angular speed\nof the vessel, which is then fed back to compute the new error.\nFor the controller,\n\\(C\\)\n, we use a proportional-integral controller. Note\nthat the controller does not have a derivative term, so that the system behaves\nlike a second order system and is therefore easy to tune.\nThe transfer function for the controller in the\n\\(s\\)\ndomain is:\n\\[C(s) = K_P + K_I s^{-1}\\]\nFrom the schematic, the transfer function for the plant\n\\(H\\)\nis:\n\\[H(s) = \\frac{\\omega_\\epsilon(s)}{X(s)}\\]\n\\(x\\)\nis the control input to the vessel, which is the percentage of the\navailable torque\n\\(\\tau_{max}\\)\nthat is being applied to the vessel. Call\nthis the current torque, denoted\n\\(\\tau\\)\n. This can be written\nmathematically as:\n\\[\\tau = x \\tau_{max}\\]\nCombining this with the angular equation of motion gives the angular\nacceleration in terms of the control input:\n\\[\\begin{split}I &= \\text{moment of inertia of the vessel} \\\\\n\\tau &= I \\omega_\\epsilon \\\\\n\\Rightarrow \\omega_\\epsilon &= \\frac{x\\tau_{max}}{I}\\end{split}\\]\nTaking the laplace transform of this gives us:\n\\[\\begin{split}\\mathcal{L}(\\omega_\\epsilon(t)) &= s\\omega_\\epsilon(s) \\\\\n                             &= \\frac{sX(s)\\tau_{max}}{I} \\\\\n\\Rightarrow \\frac{\\omega_\\epsilon(s)}{X(s)} &= \\frac{\\tau_{max}}{I}\\end{split}\\]\nWe can now rewrite the transfer function for\n\\(H\\)\nas:\n\\[H(s) = \\frac{\\tau_{max}}{I}\\]\nThe open loop transfer function for the entire system is:\n\\[\\begin{split}G_{OL}(s) &= C(S) \\cdot H(s) \\cdot s^{-1} \\\\\n          &= (K_P + K_I s^{-1}) \\frac{\\tau_{max}}{Is}\\end{split}\\]\nThe closed loop transfer function is then:\n\\[\\begin{split}G(s) &= \\frac{G_{OL}(s)}{1 + G_{OL}(s)} \\\\\n     &= \\frac{a K_P s + a  K_I}{s^2 + a K_P s + a K_I}\n        \\text{ where } a = \\frac{\\tau_{max}}{I}\\end{split}\\]\nThe characteristic equation for the system is therefore:\n\\[\\Phi = s^2 + \\frac{\\tau_{max}}{I} K_P s + \\frac{\\tau_{max}}{I} K_I\\]\nThe characteristic equation for a standard second order system is:\n\\[\\begin{split}\\Phi_{standard} &= s^2 + 2 \\zeta \\omega_0 s + \\omega_0^2 \\\\\\end{split}\\]\nwhere\n\\(\\zeta\\)\nis the damping ratio and\n\\(\\omega_0\\)\nis the natural\nfrequency of the system.\nEquating coefficients between these equations, and rearranging, gives us the\ngains for the PI controller in terms of\n\\(\\zeta\\)\nand\n\\(\\omega_0\\)\n:\n\\[\\begin{split}K_P &= \\frac{2 \\zeta \\omega_0 I}{\\tau_{max}} \\\\\nK_I &= \\frac{I\\omega_0^2}{\\tau_{max}}\\end{split}\\]\nWe now need to choose some performance requirements to place on the system,\nwhich will allow us to determine the values of\n\\(\\zeta\\)\nand\n\\(\\omega_0\\)\n, and therefore the gains for the controller.\nThe percentage by which a second order system overshoots is:\n\\[O = e^{-\\frac{\\pi\\zeta}{\\sqrt{1-\\zeta^2}}}\\]\nAnd the time it takes to reach the first peak in its output is:\n\\[T_P = \\frac{\\pi}{\\omega_0\\sqrt{1-\\zeta^2}}\\]\nThese can be rearranged to give us\n\\(\\zeta\\)\nand\n\\(\\omega_0\\)\nin terms\nof overshoot and time to peak:\n\\[\\begin{split}\\zeta = \\sqrt{\\frac{\\ln^2(O)}{\\pi^2+\\ln^2(O)}} \\\\\n\\omega_0 = \\frac{\\pi}{T_P\\sqrt{1-\\zeta^2}}\\end{split}\\]\nBy default, kRPC uses the values\n\\(O = 0.01\\)\nand\n\\(T_P = 3\\)\n.\nCorner Cases\n¶\nWhen sitting on the launchpad\n¶\nIn this situation, the autopilot cannot rotate the vessel. This means that the\nintegral term in the controllers will build up to a large value. This is even\ntrue if the vessel is pointing in the correct direction, as small floating point\nvariations in the computed error will also cause the integral term to\nincrease. The integral terms are therefore fixed at zero to overcome this.\nWhen the available angular acceleration is zero\n¶\nThis could be caused, for example, by the reaction wheels on a vessel running\nout of electricity resulting in the vessel having no torque.\nIn this situation, the autopilot also has little or no control over the\nvessel. This means that the integral terms in the controllers will build up to a\nlarge value over time. This is overcome by fixing the integral terms to zero\nwhen the available angular acceleration falls below a small threshold.\nThis situation also causes an issue with the controller gain auto-tuning: as the\navailable angular acceleration tends towards zero, the controller gains tend\ntowards infinity. When it equals zero, the auto-tuning would cause a division by\nzero. Therefore, auto-tuning is also disabled when the available acceleration\nfalls below the threshold. This leaves the controller gains at their current\nvalues until the available acceleration rises again."}
